var t="3.0.1-beta0";const e="Meteogram Card",i=new Date,r=t.includes("beta");function a(t,e,i,r){var a,s=arguments.length,o=s<3?e:null===r?r=Object.getOwnPropertyDescriptor(e,i):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,r);else for(var n=t.length-1;n>=0;n--)(a=t[n])&&(o=(s<3?a(o):s>3?a(e,i,o):a(e,i))||o);return s>3&&o&&Object.defineProperty(e,i,o),o}"function"==typeof SuppressedError&&SuppressedError;const s=globalThis,o=s.ShadowRoot&&(void 0===s.ShadyCSS||s.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,n=Symbol(),d=new WeakMap;let l=class{constructor(t,e,i){if(this._$cssResult$=!0,i!==n)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(o&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=d.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&d.set(e,t))}return t}toString(){return this.cssText}};const h=o?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new l("string"==typeof t?t:t+"",void 0,n))(e)})(t):t,{is:c,defineProperty:u,getOwnPropertyDescriptor:m,getOwnPropertyNames:g,getOwnPropertySymbols:p,getPrototypeOf:_}=Object,f=globalThis,w=f.trustedTypes,b=w?w.emptyScript:"",v=f.reactiveElementPolyfillSupport,y=(t,e)=>t,$={toAttribute(t,e){switch(e){case Boolean:t=t?b:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},x=(t,e)=>!c(t,e),A={attribute:!0,type:String,converter:$,reflect:!1,useDefault:!1,hasChanged:x};Symbol.metadata??=Symbol("metadata"),f.litPropertyMetadata??=new WeakMap;let S=class extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,e=A){if(e.state&&(e.attribute=!1),this._$Ei(),this.prototype.hasOwnProperty(t)&&((e=Object.create(e)).wrapped=!0),this.elementProperties.set(t,e),!e.noAccessor){const i=Symbol(),r=this.getPropertyDescriptor(t,i,e);void 0!==r&&u(this.prototype,t,r)}}static getPropertyDescriptor(t,e,i){const{get:r,set:a}=m(this.prototype,t)??{get(){return this[e]},set(t){this[e]=t}};return{get:r,set(e){const s=r?.call(this);a?.call(this,e),this.requestUpdate(t,s,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??A}static _$Ei(){if(this.hasOwnProperty(y("elementProperties")))return;const t=_(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(y("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(y("properties"))){const t=this.properties,e=[...g(t),...p(t)];for(const i of e)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const e=litPropertyMetadata.get(t);if(void 0!==e)for(const[t,i]of e)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,e]of this.elementProperties){const i=this._$Eu(t,e);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(h(t))}else void 0!==t&&e.push(h(t));return e}static _$Eu(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise(t=>this.enableUpdating=t),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach(t=>t(this))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,e=this.constructor.elementProperties;for(const i of e.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{if(o)t.adoptedStyleSheets=e.map(t=>t instanceof CSSStyleSheet?t:t.styleSheet);else for(const i of e){const e=document.createElement("style"),r=s.litNonce;void 0!==r&&e.setAttribute("nonce",r),e.textContent=i.cssText,t.appendChild(e)}})(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach(t=>t.hostConnected?.())}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach(t=>t.hostDisconnected?.())}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$ET(t,e){const i=this.constructor.elementProperties.get(t),r=this.constructor._$Eu(t,i);if(void 0!==r&&!0===i.reflect){const a=(void 0!==i.converter?.toAttribute?i.converter:$).toAttribute(e,i.type);this._$Em=t,null==a?this.removeAttribute(r):this.setAttribute(r,a),this._$Em=null}}_$AK(t,e){const i=this.constructor,r=i._$Eh.get(t);if(void 0!==r&&this._$Em!==r){const t=i.getPropertyOptions(r),a="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:$;this._$Em=r;const s=a.fromAttribute(e,t.type);this[r]=s??this._$Ej?.get(r)??s,this._$Em=null}}requestUpdate(t,e,i){if(void 0!==t){const r=this.constructor,a=this[t];if(i??=r.getPropertyOptions(t),!((i.hasChanged??x)(a,e)||i.useDefault&&i.reflect&&a===this._$Ej?.get(t)&&!this.hasAttribute(r._$Eu(t,i))))return;this.C(t,e,i)}!1===this.isUpdatePending&&(this._$ES=this._$EP())}C(t,e,{useDefault:i,reflect:r,wrapped:a},s){i&&!(this._$Ej??=new Map).has(t)&&(this._$Ej.set(t,s??e??this[t]),!0!==a||void 0!==s)||(this._$AL.has(t)||(this.hasUpdated||i||(e=void 0),this._$AL.set(t,e)),!0===r&&this._$Em!==t&&(this._$Eq??=new Set).add(t))}async _$EP(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,e]of this._$Ep)this[t]=e;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[e,i]of t){const{wrapped:t}=i,r=this[e];!0!==t||this._$AL.has(e)||void 0===r||this.C(e,void 0,i,r)}}let t=!1;const e=this._$AL;try{t=this.shouldUpdate(e),t?(this.willUpdate(e),this._$EO?.forEach(t=>t.hostUpdate?.()),this.update(e)):this._$EM()}catch(e){throw t=!1,this._$EM(),e}t&&this._$AE(e)}willUpdate(t){}_$AE(t){this._$EO?.forEach(t=>t.hostUpdated?.()),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EM(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Eq&&=this._$Eq.forEach(t=>this._$ET(t,this[t])),this._$EM()}updated(t){}firstUpdated(t){}};S.elementStyles=[],S.shadowRootOptions={mode:"open"},S[y("elementProperties")]=new Map,S[y("finalized")]=new Map,v?.({ReactiveElement:S}),(f.reactiveElementVersions??=[]).push("2.1.1");const C=globalThis,k=C.trustedTypes,E=k?k.createPolicy("lit-html",{createHTML:t=>t}):void 0,I="$lit$",M=`lit$${Math.random().toFixed(9).slice(2)}$`,D="?"+M,T=`<${D}>`,P=document,R=()=>P.createComment(""),L=t=>null===t||"object"!=typeof t&&"function"!=typeof t,O=Array.isArray,z="[ \t\n\f\r]",F=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,H=/-->/g,W=/>/g,N=RegExp(`>|${z}(?:([^\\s"'>=/]+)(${z}*=${z}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),U=/'/g,V=/"/g,j=/^(?:script|style|textarea|title)$/i,q=(t=>(e,...i)=>({_$litType$:t,strings:e,values:i}))(1),B=Symbol.for("lit-noChange"),G=Symbol.for("lit-nothing"),J=new WeakMap,K=P.createTreeWalker(P,129);function Z(t,e){if(!O(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==E?E.createHTML(e):e}const X=(t,e)=>{const i=t.length-1,r=[];let a,s=2===e?"<svg>":3===e?"<math>":"",o=F;for(let e=0;e<i;e++){const i=t[e];let n,d,l=-1,h=0;for(;h<i.length&&(o.lastIndex=h,d=o.exec(i),null!==d);)h=o.lastIndex,o===F?"!--"===d[1]?o=H:void 0!==d[1]?o=W:void 0!==d[2]?(j.test(d[2])&&(a=RegExp("</"+d[2],"g")),o=N):void 0!==d[3]&&(o=N):o===N?">"===d[0]?(o=a??F,l=-1):void 0===d[1]?l=-2:(l=o.lastIndex-d[2].length,n=d[1],o=void 0===d[3]?N:'"'===d[3]?V:U):o===V||o===U?o=N:o===H||o===W?o=F:(o=N,a=void 0);const c=o===N&&t[e+1].startsWith("/>")?" ":"";s+=o===F?i+T:l>=0?(r.push(n),i.slice(0,l)+I+i.slice(l)+M+c):i+M+(-2===l?e:c)}return[Z(t,s+(t[i]||"<?>")+(2===e?"</svg>":3===e?"</math>":"")),r]};class Q{constructor({strings:t,_$litType$:e},i){let r;this.parts=[];let a=0,s=0;const o=t.length-1,n=this.parts,[d,l]=X(t,e);if(this.el=Q.createElement(d,i),K.currentNode=this.el.content,2===e||3===e){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(r=K.nextNode())&&n.length<o;){if(1===r.nodeType){if(r.hasAttributes())for(const t of r.getAttributeNames())if(t.endsWith(I)){const e=l[s++],i=r.getAttribute(t).split(M),o=/([.?@])?(.*)/.exec(e);n.push({type:1,index:a,name:o[2],strings:i,ctor:"."===o[1]?rt:"?"===o[1]?at:"@"===o[1]?st:it}),r.removeAttribute(t)}else t.startsWith(M)&&(n.push({type:6,index:a}),r.removeAttribute(t));if(j.test(r.tagName)){const t=r.textContent.split(M),e=t.length-1;if(e>0){r.textContent=k?k.emptyScript:"";for(let i=0;i<e;i++)r.append(t[i],R()),K.nextNode(),n.push({type:2,index:++a});r.append(t[e],R())}}}else if(8===r.nodeType)if(r.data===D)n.push({type:2,index:a});else{let t=-1;for(;-1!==(t=r.data.indexOf(M,t+1));)n.push({type:7,index:a}),t+=M.length-1}a++}}static createElement(t,e){const i=P.createElement("template");return i.innerHTML=t,i}}function Y(t,e,i=t,r){if(e===B)return e;let a=void 0!==r?i._$Co?.[r]:i._$Cl;const s=L(e)?void 0:e._$litDirective$;return a?.constructor!==s&&(a?._$AO?.(!1),void 0===s?a=void 0:(a=new s(t),a._$AT(t,i,r)),void 0!==r?(i._$Co??=[])[r]=a:i._$Cl=a),void 0!==a&&(e=Y(t,a._$AS(t,e.values),a,r)),e}class tt{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:e},parts:i}=this._$AD,r=(t?.creationScope??P).importNode(e,!0);K.currentNode=r;let a=K.nextNode(),s=0,o=0,n=i[0];for(;void 0!==n;){if(s===n.index){let e;2===n.type?e=new et(a,a.nextSibling,this,t):1===n.type?e=new n.ctor(a,n.name,n.strings,this,t):6===n.type&&(e=new ot(a,this,t)),this._$AV.push(e),n=i[++o]}s!==n?.index&&(a=K.nextNode(),s++)}return K.currentNode=P,r}p(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class et{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,e,i,r){this.type=2,this._$AH=G,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=r,this._$Cv=r?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t?.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=Y(this,t,e),L(t)?t===G||null==t||""===t?(this._$AH!==G&&this._$AR(),this._$AH=G):t!==this._$AH&&t!==B&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):(t=>O(t)||"function"==typeof t?.[Symbol.iterator])(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==G&&L(this._$AH)?this._$AA.nextSibling.data=t:this.T(P.createTextNode(t)),this._$AH=t}$(t){const{values:e,_$litType$:i}=t,r="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=Q.createElement(Z(i.h,i.h[0]),this.options)),i);if(this._$AH?._$AD===r)this._$AH.p(e);else{const t=new tt(r,this),i=t.u(this.options);t.p(e),this.T(i),this._$AH=t}}_$AC(t){let e=J.get(t.strings);return void 0===e&&J.set(t.strings,e=new Q(t)),e}k(t){O(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,r=0;for(const a of t)r===e.length?e.push(i=new et(this.O(R()),this.O(R()),this,this.options)):i=e[r],i._$AI(a),r++;r<e.length&&(this._$AR(i&&i._$AB.nextSibling,r),e.length=r)}_$AR(t=this._$AA.nextSibling,e){for(this._$AP?.(!1,!0,e);t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class it{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,e,i,r,a){this.type=1,this._$AH=G,this._$AN=void 0,this.element=t,this.name=e,this._$AM=r,this.options=a,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=G}_$AI(t,e=this,i,r){const a=this.strings;let s=!1;if(void 0===a)t=Y(this,t,e,0),s=!L(t)||t!==this._$AH&&t!==B,s&&(this._$AH=t);else{const r=t;let o,n;for(t=a[0],o=0;o<a.length-1;o++)n=Y(this,r[i+o],e,o),n===B&&(n=this._$AH[o]),s||=!L(n)||n!==this._$AH[o],n===G?t=G:t!==G&&(t+=(n??"")+a[o+1]),this._$AH[o]=n}s&&!r&&this.j(t)}j(t){t===G?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??"")}}class rt extends it{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===G?void 0:t}}class at extends it{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==G)}}class st extends it{constructor(t,e,i,r,a){super(t,e,i,r,a),this.type=5}_$AI(t,e=this){if((t=Y(this,t,e,0)??G)===B)return;const i=this._$AH,r=t===G&&i!==G||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,a=t!==G&&(i===G||r);r&&this.element.removeEventListener(this.name,this,i),a&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class ot{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){Y(this,t)}}const nt=C.litHtmlPolyfillSupport;nt?.(Q,et),(C.litHtmlVersions??=[]).push("3.3.1");const dt=globalThis;class lt extends S{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{const r=i?.renderBefore??e;let a=r._$litPart$;if(void 0===a){const t=i?.renderBefore??null;r._$litPart$=a=new et(e.insertBefore(R(),t),t,void 0,i??{})}return a._$AI(t),a})(e,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return B}}lt._$litElement$=!0,lt.finalized=!0,dt.litElementHydrateSupport?.({LitElement:lt});const ht=dt.litElementPolyfillSupport;ht?.({LitElement:lt}),(dt.litElementVersions??=[]).push("4.2.1");const ct=t=>(e,i)=>{void 0!==i?i.addInitializer(()=>{customElements.define(t,e)}):customElements.define(t,e)},ut={attribute:!0,type:String,converter:$,reflect:!1,hasChanged:x},mt=(t=ut,e,i)=>{const{kind:r,metadata:a}=i;let s=globalThis.litPropertyMetadata.get(a);if(void 0===s&&globalThis.litPropertyMetadata.set(a,s=new Map),"setter"===r&&((t=Object.create(t)).wrapped=!0),s.set(i.name,t),"accessor"===r){const{name:r}=i;return{set(i){const a=e.get.call(this);e.set.call(this,i),this.requestUpdate(r,a,t)},init(e){return void 0!==e&&this.C(r,void 0,t,e),e}}}if("setter"===r){const{name:r}=i;return function(i){const a=this[r];e.call(this,i),this.requestUpdate(r,a,t)}}throw Error("Unsupported decorator location: "+r)};function gt(t){return(e,i)=>"object"==typeof i?mt(t,e,i):((t,e,i)=>{const r=e.hasOwnProperty(i);return e.constructor.createProperty(i,t),r?Object.getOwnPropertyDescriptor(e,i):void 0})(t,e,i)}function pt(t){return gt({...t,state:!0,attribute:!1})}const _t=[{code:"en",data:{"ui.card.meteogram.attribution":"Data from","ui.card.meteogram.status.cached":"cached","ui.card.meteogram.status.success":"success","ui.card.meteogram.status.failed":"failed","ui.card.meteogram.status_panel":"Status Panel","ui.card.meteogram.status.expires_at":"Expires At","ui.card.meteogram.status.last_render":"Last Render","ui.card.meteogram.status.last_fingerprint_miss":"Last Fingerprint Miss","ui.card.meteogram.status.last_data_fetch":"Last Data Fetch","ui.card.meteogram.status.last_cached":"Last cached","ui.card.meteogram.status.api_success":"API Success","ui.card.meteogram.error":"Weather data not available","ui.card.meteogram.attributes.temperature":"Temperature","ui.card.meteogram.attributes.air_pressure":"Pressure","ui.card.meteogram.attributes.precipitation":"Rain","ui.card.meteogram.attributes.snow":"Snow","ui.card.meteogram.attributes.cloud_coverage":"Cloud Cover","ui.card.meteogram.attributes.weather_icons":"Show Weather Icons","ui.card.meteogram.attributes.wind":"Show Wind","ui.card.meteogram.attributes.dense_icons":"Dense Weather Icons (every hour)","ui.card.meteogram.attributes.fill_container":"Fill Container","ui.editor.meteogram.title":"Meteogram Card Settings","ui.editor.meteogram.title_label":"Title","ui.editor.meteogram.location_info":"Location coordinates will be used to fetch weather data directly from Met.no API.","ui.editor.meteogram.using_ha_location":"Using Home Assistant's location by default.","ui.editor.meteogram.latitude":"Latitude","ui.editor.meteogram.longitude":"Longitude","ui.editor.meteogram.default":"Default","ui.editor.meteogram.leave_empty":"Leave empty to use Home Assistant's configured location","ui.editor.meteogram.display_options":"Display Options","ui.editor.meteogram.meteogram_length":"Meteogram Length","ui.editor.meteogram.hours_8":"8 hours","ui.editor.meteogram.hours_12":"12 hours","ui.editor.meteogram.hours_24":"24 hours","ui.editor.meteogram.hours_48":"48 hours","ui.editor.meteogram.hours_54":"54 hours","ui.editor.meteogram.hours_max":"Max available","ui.editor.meteogram.choose_hours":"Choose how many hours to show in the meteogram","ui.editor.meteogram.attributes.cloud_coverage":"Show Cloud Cover","ui.editor.meteogram.attributes.air_pressure":"Show Pressure","ui.editor.meteogram.attributes.precipitation":"Show Rain","ui.editor.meteogram.attributes.weather_icons":"Show Weather Icons","ui.editor.meteogram.attributes.wind":"Show Wind","ui.editor.meteogram.attributes.dense_icons":"Dense Weather Icons (every hour)","ui.editor.meteogram.attributes.fill_container":"Fill Container"}},{code:"nb",data:{"ui.card.meteogram.attribution":"Data fra","ui.card.meteogram.status.cached":"bufret","ui.card.meteogram.status.success":"suksess","ui.card.meteogram.status.failed":"feilet","ui.card.meteogram.status_panel":"Statuspanel","ui.card.meteogram.status.expires_at":"Utløper","ui.card.meteogram.status.last_render":"Sist tegnet","ui.card.meteogram.status.last_fingerprint_miss":"Siste fingerprint-miss","ui.card.meteogram.status.last_data_fetch":"Siste datainnhenting","ui.card.meteogram.status.last_cached":"Sist bufret","ui.card.meteogram.status.api_success":"API-suksess","ui.card.meteogram.error":"Værdata ikke tilgjengelig","ui.card.meteogram.attributes.temperature":"Temperatur","ui.card.meteogram.attributes.air_pressure":"Lufttrykk","ui.card.meteogram.attributes.precipitation":"Regn","ui.card.meteogram.attributes.snow":"Snø","ui.card.meteogram.attributes.cloud_coverage":"Skydekke","ui.card.meteogram.attributes.weather_icons":"Vis værikoner","ui.card.meteogram.attributes.wind":"Vis vind","ui.card.meteogram.attributes.dense_icons":"Tette værikoner (hver time)","ui.card.meteogram.attributes.fill_container":"Fyll beholder","ui.editor.meteogram.title":"Meteogram-kortinnstillinger","ui.editor.meteogram.title_label":"Tittel","ui.editor.meteogram.location_info":"Lokasjonskoordinater brukes for å hente værdata direkte fra Met.no API.","ui.editor.meteogram.using_ha_location":"Bruker Home Assistants lokasjon som standard.","ui.editor.meteogram.latitude":"Breddegrad","ui.editor.meteogram.longitude":"Lengdegrad","ui.editor.meteogram.default":"Standard","ui.editor.meteogram.leave_empty":"La stå tomt for å bruke Home Assistants konfigurerte lokasjon","ui.editor.meteogram.display_options":"Visningsvalg","ui.editor.meteogram.meteogram_length":"Meteogramlengde","ui.editor.meteogram.hours_8":"8 timer","ui.editor.meteogram.hours_12":"12 timer","ui.editor.meteogram.hours_24":"24 timer","ui.editor.meteogram.hours_48":"48 timer","ui.editor.meteogram.hours_54":"54 timer","ui.editor.meteogram.hours_max":"Maks tilgjengelig","ui.editor.meteogram.choose_hours":"Velg hvor mange timer som skal vises i meteogrammet","ui.editor.meteogram.attributes.cloud_coverage":"Vis skydekke","ui.editor.meteogram.attributes.air_pressure":"Vis lufttrykk","ui.editor.meteogram.attributes.precipitation":"Vis regn","ui.editor.meteogram.attributes.weather_icons":"Vis værikoner","ui.editor.meteogram.attributes.wind":"Vis vind","ui.editor.meteogram.attributes.dense_icons":"Tette værikoner (hver time)","ui.editor.meteogram.attributes.fill_container":"Fyll beholder"}},{code:"es",data:{"ui.card.meteogram.attribution":"Datos de","ui.card.meteogram.status.cached":"en caché","ui.card.meteogram.status.success":"éxito","ui.card.meteogram.status.failed":"fallido","ui.card.meteogram.status_panel":"Panel de estado","ui.card.meteogram.status.expires_at":"Expira en","ui.card.meteogram.status.last_render":"Última representación","ui.card.meteogram.status.last_fingerprint_miss":"Última huella fallida","ui.card.meteogram.status.last_data_fetch":"Última obtención de datos","ui.card.meteogram.status.last_cached":"Último en caché","ui.card.meteogram.status.api_success":"Éxito de la API","ui.card.meteogram.error":"Datos meteorológicos no disponibles","ui.card.meteogram.attributes.temperature":"Temperatura","ui.card.meteogram.attributes.air_pressure":"Presión","ui.card.meteogram.attributes.precipitation":"Lluvia","ui.card.meteogram.attributes.snow":"Nieve","ui.card.meteogram.attributes.cloud_coverage":"Cobertura de nubes","ui.card.meteogram.attributes.weather_icons":"Mostrar iconos meteorológicos","ui.card.meteogram.attributes.wind":"Mostrar viento","ui.card.meteogram.attributes.dense_icons":"Iconos meteorológicos densos (cada hora)","ui.card.meteogram.attributes.fill_container":"Rellenar el contenedor","ui.editor.meteogram.title":"Configuración de la tarjeta Meteograma","ui.editor.meteogram.title_label":"Título","ui.editor.meteogram.location_info":"Las coordenadas se utilizarán para obtener datos meteorológicos directamente de la API de Met.no.","ui.editor.meteogram.using_ha_location":"Usando la ubicación de Home Assistant por defecto.","ui.editor.meteogram.latitude":"Latitud","ui.editor.meteogram.longitude":"Longitud","ui.editor.meteogram.default":"Predeterminado","ui.editor.meteogram.leave_empty":"Dejar vacío para usar la ubicación configurada en Home Assistant","ui.editor.meteogram.display_options":"Opciones de visualización","ui.editor.meteogram.meteogram_length":"Duración del meteograma","ui.editor.meteogram.hours_8":"8 horas","ui.editor.meteogram.hours_12":"12 horas","ui.editor.meteogram.hours_24":"24 horas","ui.editor.meteogram.hours_48":"48 horas","ui.editor.meteogram.hours_54":"54 horas","ui.editor.meteogram.hours_max":"Máximo disponible","ui.editor.meteogram.choose_hours":"Elija cuántas horas mostrar en el meteograma","ui.editor.meteogram.attributes.cloud_coverage":"Mostrar cobertura de nubes","ui.editor.meteogram.attributes.air_pressure":"Mostrar presión","ui.editor.meteogram.attributes.precipitation":"Mostrar lluvia","ui.editor.meteogram.attributes.weather_icons":"Mostrar iconos meteorológicos","ui.editor.meteogram.attributes.wind":"Mostrar viento","ui.editor.meteogram.attributes.dense_icons":"Iconos meteorológicos densos (cada hora)","ui.editor.meteogram.attributes.fill_container":"Rellenar el contenedor"}},{code:"it",data:{"ui.card.meteogram.attribution":"Dati da","ui.card.meteogram.status.cached":"memorizzato","ui.card.meteogram.status.success":"successo","ui.card.meteogram.status.failed":"fallito","ui.card.meteogram.status_panel":"Pannello di stato","ui.card.meteogram.status.expires_at":"Scade il","ui.card.meteogram.status.last_render":"Ultima visualizzazione","ui.card.meteogram.status.last_fingerprint_miss":"Ultima impronta mancante","ui.card.meteogram.status.last_data_fetch":"Ultimo recupero dati","ui.card.meteogram.status.last_cached":"Ultimo memorizzato","ui.card.meteogram.status.api_success":"Successo API","ui.card.meteogram.error":"Dati meteorologici non disponibili","ui.card.meteogram.attributes.temperature":"Temperatura","ui.card.meteogram.attributes.air_pressure":"Pressione","ui.card.meteogram.attributes.precipitation":"Pioggia","ui.card.meteogram.attributes.snow":"Neve","ui.card.meteogram.attributes.cloud_coverage":"Copertura nuvolosa","ui.card.meteogram.attributes.weather_icons":"Mostra icone meteo","ui.card.meteogram.attributes.wind":"Mostra vento","ui.card.meteogram.attributes.dense_icons":"Icone meteo dense (ogni ora)","ui.card.meteogram.attributes.fill_container":"Riempi contenitore","ui.editor.meteogram.title":"Impostazioni della scheda Meteogramma","ui.editor.meteogram.title_label":"Titolo","ui.editor.meteogram.location_info":"Le coordinate verranno utilizzate per ottenere i dati meteorologici direttamente dall'API Met.no.","ui.editor.meteogram.using_ha_location":"Utilizzo della posizione di Home Assistant come predefinita.","ui.editor.meteogram.latitude":"Latitudine","ui.editor.meteogram.longitude":"Longitudine","ui.editor.meteogram.default":"Predefinito","ui.editor.meteogram.leave_empty":"Lascia vuoto per usare la posizione configurata in Home Assistant","ui.editor.meteogram.display_options":"Opzioni di visualizzazione","ui.editor.meteogram.meteogram_length":"Durata meteogramma","ui.editor.meteogram.hours_8":"8 ore","ui.editor.meteogram.hours_12":"12 ore","ui.editor.meteogram.hours_24":"24 ore","ui.editor.meteogram.hours_48":"48 ore","ui.editor.meteogram.hours_54":"54 ore","ui.editor.meteogram.hours_max":"Massimo disponibile","ui.editor.meteogram.choose_hours":"Scegli quante ore mostrare nel meteogramma","ui.editor.meteogram.attributes.cloud_coverage":"Mostra copertura nuvolosa","ui.editor.meteogram.attributes.air_pressure":"Mostra pressione","ui.editor.meteogram.attributes.precipitation":"Mostra pioggia","ui.editor.meteogram.attributes.weather_icons":"Mostra icone meteo","ui.editor.meteogram.attributes.wind":"Mostra vento","ui.editor.meteogram.attributes.dense_icons":"Icone meteo dense (ogni ora)","ui.editor.meteogram.attributes.fill_container":"Riempi contenitore"}},{code:"de",data:{"ui.card.meteogram.attribution":"Daten von","ui.card.meteogram.status.cached":"zwischengespeichert","ui.card.meteogram.status.success":"Erfolg","ui.card.meteogram.status.failed":"Fehler","ui.card.meteogram.status_panel":"Statuspanel","ui.card.meteogram.status.expires_at":"Ablaufdatum","ui.card.meteogram.status.last_render":"Letzte Darstellung","ui.card.meteogram.status.last_fingerprint_miss":"Letzter Fingerabdruck-Fehler","ui.card.meteogram.status.last_data_fetch":"Letzter Datenabruf","ui.card.meteogram.status.last_cached":"Zuletzt zwischengespeichert","ui.card.meteogram.status.api_success":"API-Erfolg","ui.card.meteogram.error":"Wetterdaten nicht verfügbar","ui.card.meteogram.attributes.temperature":"Temperatur","ui.card.meteogram.attributes.air_pressure":"Luftdruck","ui.card.meteogram.attributes.precipitation":"Regen","ui.card.meteogram.attributes.snow":"Schnee","ui.card.meteogram.attributes.cloud_coverage":"Wolkenbedeckung","ui.card.meteogram.attributes.weather_icons":"Wetter-Symbole anzeigen","ui.card.meteogram.attributes.wind":"Wind anzeigen","ui.card.meteogram.attributes.dense_icons":"Dichte Wettersymbole (jede Stunde)","ui.card.meteogram.attributes.fill_container":"Container ausfüllen","ui.editor.meteogram.title":"Meteogramm-Karteneinstellungen","ui.editor.meteogram.title_label":"Titel","ui.editor.meteogram.location_info":"Die Koordinaten werden verwendet, um Wetterdaten direkt von der Met.no API abzurufen.","ui.editor.meteogram.using_ha_location":"Standardmäßig wird der Standort von Home Assistant verwendet.","ui.editor.meteogram.latitude":"Breitengrad","ui.editor.meteogram.longitude":"Längengrad","ui.editor.meteogram.default":"Standard","ui.editor.meteogram.leave_empty":"Leer lassen, um die konfigurierte Position von Home Assistant zu verwenden","ui.editor.meteogram.display_options":"Anzeigeoptionen","ui.editor.meteogram.meteogram_length":"Meteogramm-Länge","ui.editor.meteogram.hours_8":"8 Stunden","ui.editor.meteogram.hours_12":"12 Stunden","ui.editor.meteogram.hours_24":"24 Stunden","ui.editor.meteogram.hours_48":"48 Stunden","ui.editor.meteogram.hours_54":"54 Stunden","ui.editor.meteogram.hours_max":"Maximal verfügbar","ui.editor.meteogram.choose_hours":"Wählen Sie, wie viele Stunden im Meteogramm angezeigt werden sollen","ui.editor.meteogram.attributes.cloud_coverage":"Wolkenbedeckung anzeigen","ui.editor.meteogram.attributes.air_pressure":"Luftdruck anzeigen","ui.editor.meteogram.attributes.precipitation":"Regen anzeigen","ui.editor.meteogram.attributes.weather_icons":"Wetter-Symbole anzeigen","ui.editor.meteogram.attributes.wind":"Wind anzeigen","ui.editor.meteogram.attributes.dense_icons":"Dichte Wettersymbole (jede Stunde)","ui.editor.meteogram.attributes.fill_container":"Container ausfüllen"}},{code:"fr",data:{"ui.card.meteogram.attribution":"Données de","ui.card.meteogram.status.cached":"mis en cache","ui.card.meteogram.status.success":"succès","ui.card.meteogram.status.failed":"échec","ui.card.meteogram.status_panel":"Panneau d'état","ui.card.meteogram.status.expires_at":"Expire à","ui.card.meteogram.status.last_render":"Dernier rendu","ui.card.meteogram.status.last_fingerprint_miss":"Dernière empreinte manquée","ui.card.meteogram.status.last_data_fetch":"Dernière récupération de données","ui.card.meteogram.status.last_cached":"Dernière mise en cache","ui.card.meteogram.status.api_success":"Succès API","ui.card.meteogram.error":"Données météo non disponibles","ui.card.meteogram.attributes.temperature":"Température","ui.card.meteogram.attributes.air_pressure":"Pression","ui.card.meteogram.attributes.precipitation":"Pluie","ui.card.meteogram.attributes.snow":"Neige","ui.card.meteogram.attributes.cloud_coverage":"Couverture nuageuse","ui.card.meteogram.attributes.weather_icons":"Afficher les icônes météo","ui.card.meteogram.attributes.wind":"Afficher le vent","ui.card.meteogram.attributes.dense_icons":"Icônes météo denses (chaque heure)","ui.card.meteogram.attributes.fill_container":"Remplir le conteneur","ui.editor.meteogram.title":"Paramètres de la carte Météogramme","ui.editor.meteogram.title_label":"Titre","ui.editor.meteogram.location_info":"Les coordonnées seront utilisées pour obtenir les données météo directement depuis l'API Met.no.","ui.editor.meteogram.using_ha_location":"Utilisation de la localisation Home Assistant par défaut.","ui.editor.meteogram.latitude":"Latitude","ui.editor.meteogram.longitude":"Longitude","ui.editor.meteogram.default":"Défaut","ui.editor.meteogram.leave_empty":"Laisser vide pour utiliser la localisation configurée dans Home Assistant","ui.editor.meteogram.display_options":"Options d'affichage","ui.editor.meteogram.meteogram_length":"Durée du météogramme","ui.editor.meteogram.hours_8":"8 heures","ui.editor.meteogram.hours_12":"12 heures","ui.editor.meteogram.hours_24":"24 heures","ui.editor.meteogram.hours_48":"48 heures","ui.editor.meteogram.hours_54":"54 heures","ui.editor.meteogram.hours_max":"Maximum disponible","ui.editor.meteogram.choose_hours":"Choisissez combien d'heures afficher dans le météogramme","ui.editor.meteogram.attributes.cloud_coverage":"Afficher la couverture nuageuse","ui.editor.meteogram.attributes.air_pressure":"Afficher la pression","ui.editor.meteogram.attributes.precipitation":"Afficher la pluie","ui.editor.meteogram.attributes.weather_icons":"Afficher les icônes météo","ui.editor.meteogram.attributes.wind":"Afficher le vent","ui.editor.meteogram.attributes.dense_icons":"Icônes météo denses (chaque heure)","ui.editor.meteogram.attributes.fill_container":"Remplir le conteneur"}}];function ft(t,e,i){var r;if(t&&"function"==typeof t.localize){const i=t.localize(e);if(i&&i!==e)return i}if(t&&t.resources&&"object"==typeof t.resources){const i=t.language||"en",a=null===(r=t.resources[i])||void 0===r?void 0:r[e];if(a)return a}const a=t&&t.language?t.language:"en",s=_t.find(t=>a.toLowerCase().startsWith(t.code))||_t[0],o=s.data[e];return o||(void 0!==i?i:e)}let wt=class extends lt{constructor(){super(...arguments),this._config={},this._initialized=!1,this._elements=new Map}setConfig(t){this._config=t||{},this._initialized?this._updateValues():this._initialize()}get config(){return this._config}connectedCallback(){this._initialized||this._initialize()}_initialize(){this.render(),this._initialized=!0,setTimeout(()=>this._updateValues(),0)}_updateValues(){var t,e,i,a;if(!this._initialized)return;const s=(t,e,i="value")=>{t&&t[i]!==e&&(t[i]=e)};s(this._elements.get("title"),this._config.title||""),s(this._elements.get("latitude"),void 0!==this._config.latitude?String(this._config.latitude):void 0!==(null===(e=null===(t=this.hass)||void 0===t?void 0:t.config)||void 0===e?void 0:e.latitude)?String(this.hass.config.latitude):""),s(this._elements.get("longitude"),void 0!==this._config.longitude?String(this._config.longitude):void 0!==(null===(a=null===(i=this.hass)||void 0===i?void 0:i.config)||void 0===a?void 0:a.longitude)?String(this.hass.config.longitude):""),s(this._elements.get("show_cloud_cover"),void 0===this._config.show_cloud_cover||this._config.show_cloud_cover,"checked"),s(this._elements.get("show_pressure"),void 0===this._config.show_pressure||this._config.show_pressure,"checked"),s(this._elements.get("show_rain"),void 0===this._config.show_rain||this._config.show_rain,"checked"),s(this._elements.get("show_weather_icons"),void 0===this._config.show_weather_icons||this._config.show_weather_icons,"checked"),s(this._elements.get("show_wind"),void 0===this._config.show_wind||this._config.show_wind,"checked"),s(this._elements.get("dense_weather_icons"),void 0===this._config.dense_weather_icons||this._config.dense_weather_icons,"checked"),s(this._elements.get("meteogram_hours"),this._config.meteogram_hours||"48h"),s(this._elements.get("diagnostics"),void 0!==this._config.diagnostics?this._config.diagnostics:r,"checked"),s(this._elements.get("entity_id"),this._config.entity_id||""),s(this._elements.get("focussed"),void 0!==this._config.focussed&&this._config.focussed,"checked")}render(){var t,e,i,a,s;const o=this.hass,n=this._config;if(!o||!n)return this.innerHTML='<ha-card><div style="padding:16px;">Loading Home Assistant context...</div></ha-card>',void setTimeout(()=>this.render(),300);const d=null!==(e=null===(t=null==o?void 0:o.config)||void 0===t?void 0:t.latitude)&&void 0!==e?e:"",l=null!==(a=null===(i=null==o?void 0:o.config)||void 0===i?void 0:i.longitude)&&void 0!==a?a:"",h=void 0===this._config.show_cloud_cover||this._config.show_cloud_cover,c=void 0===this._config.show_pressure||this._config.show_pressure,u=void 0===this._config.show_rain||this._config.show_rain,m=void 0===this._config.show_weather_icons||this._config.show_weather_icons,g=void 0===this._config.show_wind||this._config.show_wind,p=void 0===this._config.dense_weather_icons||this._config.dense_weather_icons,_=this._config.meteogram_hours||"48h",f=void 0!==this._config.diagnostics?this._config.diagnostics:r,w=void 0!==this._config.focussed&&this._config.focussed,b=document.createElement("div"),v=o&&o.states?Object.keys(o.states).filter(t=>t.startsWith("weather.")):[],y=null!==(s=this._config.entity_id)&&void 0!==s?s:v.length>0?v[0]:"",$=!(!y||"none"===y);b.innerHTML=`\n  <style>\n    ha-card {\n      padding: 16px;\n    }\n    .values {\n      padding-left: 16px;\n      margin: 8px 0;\n    }\n    .row {\n      display: flex;\n      margin-bottom: 12px;\n      align-items: center;\n    }\n    ha-textfield {\n      width: 100%;\n    }\n    .side-by-side {\n      display: flex;\n      gap: 12px;\n    }\n    .side-by-side > * {\n      flex: 1;\n    }\n    h3 {\n      font-size: 18px;\n      color: var(--primary-text-color);\n      font-weight: 500;\n      margin-bottom: 12px;\n      margin-top: 0;\n    }\n    .help-text {\n      color: var(--secondary-text-color);\n      font-size: 0.875rem;\n      margin-top: 4px;\n    }\n    .info-text {\n      color: var(--primary-text-color);\n      opacity: 0.8;\n      font-size: 0.9rem;\n      font-style: italic;\n      margin: 4px 0 16px 0;\n    }\n    .toggle-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n    .toggle-label {\n      flex-grow: 1;\n    }\n    .toggle-section {\n      margin-top: 16px;\n      border-top: 1px solid var(--divider-color);\n      padding-top: 16px;\n    }\n  </style>\n  <ha-card>\n    <h3>${(null==o?void 0:o.localize)?o.localize("ui.editor.meteogram.title"):"Meteogram Card Settings"}</h3>\n    <div class="values">\n      <div class="row">\n        <ha-textfield\n          label="${(null==o?void 0:o.localize)?o.localize("ui.editor.meteogram.title_label"):"Title"}"\n          id="title-input"\n          .value="${this._config.title||""}"\n        ></ha-textfield>\n      </div>\n      <p class="help-text">${ft(o,"ui.editor.meteogram.title_description","Card title (optional, shown at the top of the card)")}</p>\n\n      <div class="row">\n        <label for="weather-entity-select" style="margin-right:8px;">${ft(o,"ui.editor.meteogram.weather_entity","Weather Entity")}</label>\n        <select id="weather-entity-select">\n          <option value="none" ${$?"":"selected"}>None</option>\n          ${v.map(t=>`<option value="${t}" ${y===t?"selected":""}>${t}</option>`).join("")}\n        </select>\n      </div>\n      <p class="help-text">${ft(o,"ui.editor.meteogram.choose_weather_entity","Choose a weather entity for Home Assistant integration, or select 'None' to use coordinates.")}</p>\n\n      <div class="info-text">\n        ${(null==o?void 0:o.localize)?o.localize("ui.editor.meteogram.location_info"):"Location coordinates will be used to fetch weather data directly from Met.no API."}\n        ${d?ft(o,"ui.editor.meteogram.using_ha_location","Using Home Assistant's location by default."):""}\n      </div>\n\n      <div class="side-by-side">\n        <ha-textfield\n          label="${ft(o,"ui.editor.meteogram.latitude","Latitude")}"\n          id="latitude-input"\n          type="number"\n          step="any"\n          .value="${void 0!==this._config.latitude?this._config.latitude:d}"\n          placeholder="${d?`${ft(o,"ui.editor.meteogram.default","Default")}: ${d}`:""}"\n          ${$?"disabled":""}\n        ></ha-textfield>\n\n        <ha-textfield\n          label="${ft(o,"ui.editor.meteogram.longitude","Longitude")}"\n          id="longitude-input"\n          type="number"\n          step="any"\n          .value="${void 0!==this._config.longitude?this._config.longitude:l}"\n          placeholder="${l?`${ft(o,"ui.editor.meteogram.default","Default")}: ${l}`:""}"\n          ${$?"disabled":""}\n        ></ha-textfield>\n      </div>\n      <p class="help-text">${ft(o,"ui.editor.meteogram.leave_empty","Leave empty to use Home Assistant's configured location")}</p>\n\n      <div class="toggle-section">\n        <h3>${ft(o,"ui.editor.meteogram.display_options","Display Options")}</h3>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(o,"ui.editor.meteogram.attributes.cloud_coverage","Show Cloud Cover")}</div>\n          <ha-switch\n            id="show-cloud-cover"\n            .checked="${h}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(o,"ui.editor.meteogram.attributes.air_pressure","Show Pressure")}</div>\n          <ha-switch\n            id="show-pressure"\n            .checked="${c}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(o,"ui.editor.meteogram.attributes.precipitation","Show Rain")}</div>\n          <ha-switch\n            id="show-rain"\n            .checked="${u}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(o,"ui.editor.meteogram.attributes.weather_icons","Show Weather Icons")}</div>\n          <ha-switch\n            id="show-weather-icons"\n            .checked="${m}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(o,"ui.editor.meteogram.attributes.wind","Show Wind")}</div>\n          <ha-switch\n            id="show-wind"\n            .checked="${g}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(o,"ui.editor.meteogram.attributes.dense_icons","Dense Weather Icons (every hour)")}</div>\n          <ha-switch\n            id="dense-weather-icons"\n            .checked="${p}"\n          ></ha-switch>\n        </div>\n      \n        <div class="toggle-row">\n          <div class="toggle-label">${ft(o,"ui.editor.meteogram.attributes.focussed","Focussed Mode (minimal chart)")}</div>\n          <ha-switch\n            id="focussed"\n            .checked="${w}"\n          ></ha-switch>\n        </div>\n      </div>\n\n      <div class="row">\n        <label for="meteogram-hours-select" style="margin-right:8px;">${ft(o,"ui.editor.meteogram.meteogram_length","Meteogram Length")}</label>\n        <select id="meteogram-hours-select">\n          <option value="8h" ${"8h"===_?"selected":""}>${ft(o,"ui.editor.meteogram.hours_8","8 hours")}</option>\n          <option value="12h" ${"12h"===_?"selected":""}>${ft(o,"ui.editor.meteogram.hours_12","12 hours")}</option>\n          <option value="24h" ${"24h"===_?"selected":""}>${ft(o,"ui.editor.meteogram.hours_24","24 hours")}</option>\n          <option value="48h" ${"48h"===_?"selected":""}>${ft(o,"ui.editor.meteogram.hours_48","48 hours")}</option>\n          <option value="54h" ${"54h"===_?"selected":""}>${ft(o,"ui.editor.meteogram.hours_54","54 hours")}</option>\n          <option value="max" ${"max"===_?"selected":""}>${ft(o,"ui.editor.meteogram.hours_max","Max available")}</option>\n        </select>\n      </div>\n      <p class="help-text">${ft(o,"ui.editor.meteogram.choose_hours","Choose how many hours to show in the meteogram")}</p>\n      <div class="toggle-section"></div>\n        <div class="toggle-row">\n          <div class="toggle-label">Diagnostics (debug logging)</div>\n          <ha-switch\n            id="diagnostics"\n            .checked="${f}"\n          ></ha-switch>\n        </div>\n      </div>\n    </div>\n  </ha-card>\n`,this.innerHTML="",this.appendChild(b),setTimeout(()=>{const t=this.querySelector("#title-input");t&&(t.configValue="title",t.addEventListener("input",this._valueChanged.bind(this)),this._elements.set("title",t));const e=this.querySelector("#latitude-input");e&&(e.configValue="latitude",e.addEventListener("input",this._valueChanged.bind(this)),this._elements.set("latitude",e));const i=this.querySelector("#longitude-input");i&&(i.configValue="longitude",i.addEventListener("input",this._valueChanged.bind(this)),this._elements.set("longitude",i));const r=this.querySelector("#show-cloud-cover");r&&(r.configValue="show_cloud_cover",r.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_cloud_cover",r));const a=this.querySelector("#show-pressure");a&&(a.configValue="show_pressure",a.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_pressure",a));const s=this.querySelector("#show-rain");s&&(s.configValue="show_rain",s.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_rain",s));const o=this.querySelector("#show-weather-icons");o&&(o.configValue="show_weather_icons",o.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_weather_icons",o));const n=this.querySelector("#show-wind");n&&(n.configValue="show_wind",n.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_wind",n));const d=this.querySelector("#dense-weather-icons");d&&(d.configValue="dense_weather_icons",d.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("dense_weather_icons",d));const l=this.querySelector("#meteogram-hours-select");l&&(l.configValue="meteogram_hours",l.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("meteogram_hours",l));const h=this.querySelector("#diagnostics");h&&(h.configValue="diagnostics",h.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("diagnostics",h));const c=this.querySelector("#weather-entity-select");c&&(c.configValue="entity_id",c.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("entity_id",c));const u=this.querySelector("#focussed");u&&(u.configValue="focussed",u.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("focussed",u)),e&&(e.disabled=$),i&&(i.disabled=$),this._updateValues()},0)}_valueChanged(t){var e;const i=t.target;if(!this._config||!i||!i.configValue)return;let r=i.value;const a=["show_cloud_cover","show_pressure","show_rain","show_weather_icons","show_wind","dense_weather_icons","diagnostics","focussed"];if("HA-SWITCH"===i.tagName)r=i.checked;else if("number"===i.type)if(""===r)r=void 0;else{const t=parseFloat(null!==(e=null==r?void 0:r.toString())&&void 0!==e?e:"");isNaN(t)||(r=t)}else""===r&&(r=void a.includes(i.configValue));a.includes(i.configValue)&&(""===r?r=void 0:"boolean"!=typeof r&&void 0!==r&&(r=Boolean(r))),"entity_id"===i.configValue&&("none"===r&&(r=void 0),setTimeout(()=>{const t=this.querySelector("#latitude-input"),e=this.querySelector("#longitude-input"),i=!(!r||"none"===r);t&&(t.disabled=i),e&&(e.disabled=i)},0));const s=a.includes(i.configValue)?void 0===r?void 0:!!r:r;this._config={...this._config,[i.configValue]:s},this.dispatchEvent(new CustomEvent("config-changed",{detail:{config:this._config}}))}};a([gt({type:Object})],wt.prototype,"_config",void 0),a([gt({type:Object})],wt.prototype,"hass",void 0),a([pt()],wt.prototype,"_initialized",void 0),wt=a([ct("meteogram-card-editor")],wt);class bt{constructor(t,e){this.lastError=null,this.lastStatusCode=null,this._forecastData=null,this._expiresAt=null,this._fetchPromise=null,this._lastFetchTime=null,this.lat=t,this.lon=e}async getForecastData(){if(console.debug(`[weather-api] getForecastData called for lat=${this.lat}, lon=${this.lon}`),this._forecastData||this.loadCacheFromStorage(),this._forecastData&&this._expiresAt&&Date.now()<this._expiresAt)return this._forecastData;const t=Date.now();if(this._lastFetchTime&&t-this._lastFetchTime<6e4&&this._fetchPromise)return await this._fetchPromise,this._forecastData;this._fetchPromise||(this._fetchPromise=this._fetchWeatherDataFromAPI());try{await this._fetchPromise}finally{this._fetchPromise=null}return this._forecastData}get expiresAt(){return this._expiresAt}getDiagnosticText(){var e;let i="<br><b>API Error</b><br>";return this.lastError instanceof Error?i+=`Error: <code>${this.lastError.message}</code><br>`:void 0!==this.lastError&&null!==this.lastError&&(i+=`Error: <code>${String(this.lastError)}</code><br>`),i+=`Status: <code>${null!==(e=this.lastStatusCode)&&void 0!==e?e:""}</code><br>`,i+=`Card version: <code>${t}</code><br>`,i+=`Client type: <code>${navigator.userAgent}</code><br>`,i}static encodeCacheKey(t,e){const i=String(t)+String(e);return btoa(i)}saveCacheToStorage(){if(!this._forecastData||!this._expiresAt)return;const t=bt.encodeCacheKey(Number(this.lat.toFixed(4)),Number(this.lon.toFixed(4)));let e={};const i=localStorage.getItem("metno-weather-cache");if(i)try{e=JSON.parse(i)}catch{e={}}e["forecast-data"]||(e["forecast-data"]={}),e["forecast-data"][t]={expiresAt:this._expiresAt,data:this._forecastData},localStorage.setItem("metno-weather-cache",JSON.stringify(e))}loadCacheFromStorage(){var t;const e=bt.encodeCacheKey(Number(this.lat.toFixed(4)),Number(this.lon.toFixed(4))),i=localStorage.getItem("metno-weather-cache");if(i){let r={};try{r=JSON.parse(i)}catch{r={}}const a=null===(t=r["forecast-data"])||void 0===t?void 0:t[e];a&&a.expiresAt&&a.data?(this._expiresAt=a.expiresAt,Array.isArray(a.data.time)&&(a.data.time=a.data.time.map(t=>"string"==typeof t?new Date(t):t)),this._forecastData=a.data):(this._expiresAt=null,this._forecastData=null)}}async _fetchWeatherDataFromAPI(){const t=Date.now();if(this._lastFetchTime&&t-this._lastFetchTime<6e4)return;this._lastFetchTime=t;const e=this.lat,i=this.lon;let r=`https://api.met.no/weatherapi/locationforecast/2.0/complete?lat=${e}&lon=${i}`,a=`https://aa015h6buqvih86i1.api.met.no/weatherapi/locationforecast/2.0/complete?lat=${e}&lon=${i}`,s=r,o={};this.lastStatusCode=null,this.lastError=null;try{o={Origin:window.location.origin,Accept:"application/json"},s=window.location.origin.includes("ui.nabu.casa")?a:r,console.debug(`[weather-api] Fetching weather data from ${s} with Origin ${o.Origin}`),bt.METEOGRAM_CARD_API_CALL_COUNT++;const t=await fetch(s,{headers:o,mode:"cors",method:"GET"});this.lastStatusCode=t.status;const e=t.headers.get("Expires");let i=null;if(e){const t=new Date(e);isNaN(t.getTime())||(i=t)}if(429===this.lastStatusCode){const t=i?i.toLocaleTimeString():"later";throw new Error(`Weather API throttling: Too many requests. Please wait until ${t} before retrying.`)}if(304===this.lastStatusCode)throw new Error("API returned 304 but no cached data is available.");if(!t.ok){const e=await t.text();throw new Error(`Weather API returned ${t.status}: ${t.statusText}\n${e}`)}const n=await t.json();bt.METEOGRAM_CARD_API_SUCCESS_COUNT++,this.assignMeteogramDataFromRaw(n),this._expiresAt=i?i.getTime():null,this.saveCacheToStorage()}catch(t){this.lastError=t;const e=this.getDiagnosticText()+`API URL: <code>${s}</code><br>`+`Origin header: <code>${o.Origin}</code><br>`;throw new Error(`<br>Failed to get weather data: ${t.message}\n<br>Check your network connection, browser console, and API accessibility.\n\n${e}`)}}assignMeteogramDataFromRaw(t){try{if(!t||!t.properties||!Array.isArray(t.properties.timeseries))throw new Error("Invalid raw data format from weather API");const e=t.properties.timeseries.filter(t=>0===new Date(t.time).getMinutes()),i={time:[],temperature:[],rain:[],rainMin:[],rainMax:[],snow:[],cloudCover:[],windSpeed:[],windDirection:[],symbolCode:[],pressure:[]};i.fetchTimestamp=(new Date).toISOString(),e.forEach(t=>{var e,r,a,s,o;const n=new Date(t.time),d=t.data.instant.details,l=null===(e=t.data.next_1_hours)||void 0===e?void 0:e.details,h=null===(r=t.data.next_6_hours)||void 0===r?void 0:r.details,c=null===(a=t.data.next_6_hours)||void 0===a?void 0:a.summary;if(i.time.push(n),i.temperature.push(d.air_temperature),i.cloudCover.push(d.cloud_area_fraction),i.windSpeed.push(d.wind_speed),i.windDirection.push(d.wind_from_direction),i.pressure.push(d.air_pressure_at_sea_level),l){const e=void 0!==l.precipitation_amount_max?l.precipitation_amount_max:void 0!==l.precipitation_amount?l.precipitation_amount:0,r=void 0!==l.precipitation_amount_min?l.precipitation_amount_min:void 0!==l.precipitation_amount?l.precipitation_amount:0;i.rainMin.push(r),i.rainMax.push(e),i.rain.push(void 0!==l.precipitation_amount?l.precipitation_amount:0),i.snow.push(0),(null===(o=null===(s=t.data.next_1_hours)||void 0===s?void 0:s.summary)||void 0===o?void 0:o.symbol_code)?i.symbolCode.push(t.data.next_1_hours.summary.symbol_code):i.symbolCode.push("")}else if(h){const t=(void 0!==h.precipitation_amount?h.precipitation_amount:0)/6;i.rain.push(t),i.rainMin.push(t),i.rainMax.push(t),i.snow.push(0),(null==c?void 0:c.symbol_code)?i.symbolCode.push(c.symbol_code):i.symbolCode.push("")}else i.rain.push(0),i.rainMin.push(0),i.rainMax.push(0),i.snow.push(0),i.symbolCode.push("")}),this._forecastData=i}catch(t){throw new Error("Failed to parse weather data: "+(t instanceof Error?t.message:String(t)))}}}bt.METEOGRAM_CARD_API_CALL_COUNT=0,bt.METEOGRAM_CARD_API_SUCCESS_COUNT=0;class vt{constructor(t,e,i){this._forecastData=null,this._unsubForecast=null,console.debug(`[WeatherEntityAPI] from ${i} Constructor called for entityId: ${e}`),this.hass=t,this.entityId=e,this.hass&&this.entityId&&this.subscribeForecast(t=>{this._forecastData=this._parseForecastArray(t);const e=document.querySelector("meteogram-card");e&&"function"==typeof e._scheduleDrawMeteogram&&e._scheduleDrawMeteogram("WeatherEntityAPI-forecast-update",!0)}).then(t=>{this._unsubForecast=t})}_parseForecastArray(t){const e={time:[],temperature:[],rain:[],rainMin:[],rainMax:[],snow:[],cloudCover:[],windSpeed:[],windDirection:[],symbolCode:[],pressure:[],fetchTimestamp:(new Date).toISOString()};t.forEach(t=>{var i,r,a;e.time.push(new Date(t.datetime||t.time)),e.temperature.push(null!==(i=t.temperature)&&void 0!==i?i:null),e.rain.push(null!==(r=t.precipitation)&&void 0!==r?r:0),"precipitation_min"in t&&e.rainMin.push(t.precipitation_min),"precipitation_max"in t&&e.rainMax.push(t.precipitation_max),"snow"in t&&"number"==typeof t.snow&&e.snow.push(t.snow),"cloud_coverage"in t&&"number"==typeof t.cloud_coverage&&e.cloudCover.push(t.cloud_coverage),"wind_speed"in t&&"number"==typeof t.wind_speed&&e.windSpeed.push(t.wind_speed),"wind_bearing"in t&&"number"==typeof t.wind_bearing&&e.windDirection.push(t.wind_bearing),e.symbolCode.push(null!==(a=t.condition)&&void 0!==a?a:""),"pressure"in t&&"number"==typeof t.pressure?e.pressure.push(t.pressure):"pressure_mbar"in t&&"number"==typeof t.pressure_mbar?e.pressure.push(t.pressure_mbar):"pressure_hpa"in t&&"number"==typeof t.pressure_hpa&&e.pressure.push(t.pressure_hpa)});try{const t="meteogram-card-entity-weather-cache";let i={};const r=localStorage.getItem(t);r&&(i=JSON.parse(r)),i[this.entityId]=e,localStorage.setItem(t,JSON.stringify(i))}catch(t){console.warn(`[WeatherEntityAPI] Failed to store forecast for ${this.entityId} in localStorage:`,t)}return e}getForecast(){if(console.debug(`[WeatherEntityAPI] getForecastData called for entityId=${this.entityId}`),this._forecastData)return this._forecastData;const t=this.hass.states[this.entityId];return t?t.attributes?Array.isArray(t.attributes.forecast)?(this._forecastData=this._parseForecastArray(t.attributes.forecast),this._forecastData):(console.debug("[WeatherEntityAPI] Entity forecast attribute is not an array:",t.attributes.forecast),null):(console.debug(`[WeatherEntityAPI] Entity has no attributes: ${this.entityId}`),null):(console.debug(`[WeatherEntityAPI] Entity not found: ${this.entityId}`),null)}subscribeForecast(t){var e;if(console.debug(`[WeatherEntityAPI] subscribeForecast called for entityId=${this.entityId}`),!(null===(e=this.hass)||void 0===e?void 0:e.connection))return Promise.resolve(()=>{});return this.hass.connection.subscribeMessage(e=>{Array.isArray(e.forecast)?t(e.forecast):console.debug("[WeatherEntityAPI] subscribeForecast: event.forecast not array",e)},{type:"weather/subscribe_forecast",entity_id:this.entityId,forecast_type:"hourly"})}getForecastData(){if(this._forecastData)return this._forecastData;try{const t="meteogram-card-entity-weather-cache",e=localStorage.getItem(t);if(e){const t=JSON.parse(e)[this.entityId];if(t)return Array.isArray(t.time)&&(t.time=t.time.map(t=>"string"==typeof t?new Date(t):t)),this._forecastData=t,this._forecastData}}catch(t){console.warn(`[WeatherEntityAPI] Failed to load forecast for ${this.entityId} from localStorage cache:`,t)}return null}destroy(t){if(this._unsubForecast)try{this._unsubForecast(),this._unsubForecast=null}catch(e){console.warn(`[WeatherEntityAPI] from ${t} Error during unsubscribe for ${this.entityId}:`,e)}}}var yt;let $t=yt=class extends lt{constructor(){super(),this.title="",this.showCloudCover=!0,this.showPressure=!0,this.showRain=!0,this.showWeatherIcons=!0,this.showWind=!0,this.denseWeatherIcons=!0,this.meteogramHours="48h",this.styles={},this.diagnostics=r,this.focussed=!1,this.chartLoaded=!1,this.meteogramError="",this.errorCount=0,this.lastErrorTime=0,this._drawCallIndex=0,this._weatherRetryTimeout=0,this._weatherRefreshTimeout=0,this._chartRenderInProgress=!1,this._pendingRender=!1,this._lastApiSuccess=!1,this.iconCache=new Map,this.iconBasePath="https://raw.githubusercontent.com/metno/weathericons/refs/heads/main/weather/svg/",this.svg=null,this._resizeObserver=null,this._lastWidth=0,this._lastHeight=0,this._intersectionObserver=null,this._mutationObserver=null,this._isInitialized=!1,this._lastRenderedData=null,this.apiExpiresAt=null,this.apiLastModified=null,this.weatherDataPromise=null,this._weatherApiInstance=null,this._weatherEntityApiInstance=null,this._redrawScheduled=!1,this._lastDrawScheduleTime=0,this._drawThrottleMs=200,this._statusExpiresAt="",this._statusLastRender="",this._statusLastFetch="",this._statusApiSuccess=null,this._onVisibilityChange=()=>{!document.hidden&&this.isConnected&&this._handleVisibilityChange()},this._onLocationChanged=()=>{setTimeout(()=>{this.isConnected&&this._isElementVisible()&&this._handleVisibilityChange()},100)},this.title="",this.latitude=void 0,this.longitude=void 0,this.showCloudCover=!0,this.showPressure=!0,this.showRain=!0,this.showWeatherIcons=!0,this.showWind=!0,this.denseWeatherIcons=!0,this.meteogramHours="48h",this.styles={},this.diagnostics=r,this.chartLoaded=!1,this.meteogramError="",this.errorCount=0,this.lastErrorTime=0,this._statusExpiresAt="",this._statusLastRender="",this._statusLastFetch="",this._statusApiSuccess=null}async getIconSVG(t){if(this.iconCache.has(t))return this.iconCache.get(t);try{const e=`${this.iconBasePath}${t}.svg`,i=await fetch(e);if(!i.ok)return console.warn(`Failed to load icon: ${t}, status: ${i.status}`),"";const r=await i.text();return!r.includes("<svg")||r.length<20?(console.warn(`Invalid SVG content for ${t}`),""):(this.iconCache.set(t,r),r)}catch(e){return console.error(`Error loading icon ${t}:`,e),""}}_scheduleDrawMeteogram(t="unknown",i=!1){const r=Date.now();this._drawCallIndex++;const a=`${t}#${this._drawCallIndex}`;console.debug(`[${e}] _scheduleDrawMeteogram called from: ${a}`),i||!(this._redrawScheduled||r-this._lastDrawScheduleTime<this._drawThrottleMs)?(this._redrawScheduled=!0,this._lastDrawScheduleTime=r,setTimeout(()=>{this._redrawScheduled=!1,this._lastDrawScheduleTime=Date.now(),this._drawMeteogram(a)},50)):console.debug(`[${e}] _scheduleDrawMeteogram: redraw already scheduled or throttled, skipping.`)}setConfig(t){const i=void 0!==t.latitude?parseFloat(Number(t.latitude).toFixed(4)):void 0,a=void 0!==t.longitude?parseFloat(Number(t.longitude).toFixed(4)):void 0;void 0!==this.latitude&&parseFloat(Number(this.latitude).toFixed(4)),void 0!==this.longitude&&parseFloat(Number(this.longitude).toFixed(4)),t.title&&(this.title=t.title),void 0!==t.latitude&&(this.latitude=i),void 0!==t.longitude&&(this.longitude=a),this.showCloudCover=void 0===t.show_cloud_cover||t.show_cloud_cover,this.showPressure=void 0===t.show_pressure||t.show_pressure,this.showRain=void 0===t.show_rain||t.show_rain,this.showWeatherIcons=void 0===t.show_weather_icons||t.show_weather_icons,this.showWind=void 0===t.show_wind||t.show_wind,this.denseWeatherIcons=void 0===t.dense_weather_icons||t.dense_weather_icons,this.meteogramHours=t.meteogram_hours||"48h",this.styles=t.styles||{},this.diagnostics=void 0!==t.diagnostics?t.diagnostics:r,this.entityId=t.entity_id||void 0,this.focussed=!!t.focussed;const s=this.entityId,o=t.entity_id||void 0,n=s!==o;this.entityId=o,n&&(null!=s&&this._weatherEntityApiInstance&&(this._weatherEntityApiInstance.destroy("entityId changed"),this._weatherEntityApiInstance=null),o&&this.hass&&(console.debug(`[${e}] setConfig Initializing WeatherEntityAPI for entity: ${this.entityId}`,this.hass),this._weatherEntityApiInstance=new vt(this.hass,o,"setConfig")))}static getConfigElement(){const t=document.createElement("meteogram-card-editor");return t.setConfig({show_cloud_cover:!0,show_pressure:!0,show_rain:!0,show_weather_icons:!0,show_wind:!0,dense_weather_icons:!0,meteogram_hours:"48h",diagnostics:r}),t}static getStubConfig(){return{title:"Weather Forecast",show_cloud_cover:!0,show_pressure:!0,show_rain:!0,show_weather_icons:!0,show_wind:!0,dense_weather_icons:!0,meteogram_hours:"48h",diagnostics:r}}getCardSize(){return 3}connectedCallback(){super.connectedCallback(),this._isInitialized=!1,this.updateComplete.then(()=>{this._setupResizeObserver(),this._setupVisibilityObserver(),this._setupMutationObserver(),document.addEventListener("visibilitychange",this._onVisibilityChange.bind(this)),window.addEventListener("location-changed",this._onLocationChanged.bind(this)),this.isConnected&&(this.chartLoaded?this._scheduleDrawMeteogram("connectedCallback"):this.loadD3AndDraw())})}disconnectedCallback(){this._teardownResizeObserver(),this._teardownVisibilityObserver(),this._teardownMutationObserver(),this._weatherEntityApiInstance&&(this._weatherEntityApiInstance.destroy("disconnectedCallback"),this._weatherEntityApiInstance=null),document.removeEventListener("visibilitychange",this._onVisibilityChange.bind(this)),window.removeEventListener("location-changed",this._onLocationChanged.bind(this)),this.cleanupChart(),this._weatherRetryTimeout&&(clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=null),this._weatherRefreshTimeout&&(clearTimeout(this._weatherRefreshTimeout),this._weatherRefreshTimeout=null),super.disconnectedCallback()}_isElementVisible(){if(!this.isConnected||!this.shadowRoot)return!1;if(document.hidden)return!1;const t=this.shadowRoot.host;if(!t)return!1;if(0===t.offsetWidth&&0===t.offsetHeight)return!1;const e=window.getComputedStyle(t);if("none"===e.display)return!1;if("hidden"===e.visibility)return!1;const i=t.getBoundingClientRect();return!(i.top+i.height<=0||i.left+i.width<=0||i.bottom>=window.innerHeight||i.right>=window.innerWidth)}_setupVisibilityObserver(){var t;this._intersectionObserver||(this._intersectionObserver=new IntersectionObserver(t=>{for(const e of t)if(e.isIntersecting){this._handleVisibilityChange();break}},{threshold:[.1]}),(null===(t=this.shadowRoot)||void 0===t?void 0:t.host)&&this._intersectionObserver.observe(this.shadowRoot.host))}_teardownVisibilityObserver(){this._intersectionObserver&&(this._intersectionObserver.disconnect(),this._intersectionObserver=null)}_setupMutationObserver(){var t;if(!this._mutationObserver){this._mutationObserver=new MutationObserver(t=>{for(const e of t){if(e.target instanceof HTMLElement&&("HA-TAB"===e.target.tagName||"HA-TABS"===e.target.tagName||e.target.classList.contains("content")||e.target.hasAttribute("active")))break;if("attributes"===e.type&&("style"===e.attributeName||"class"===e.attributeName||"hidden"===e.attributeName||"active"===e.attributeName))break}}),document.querySelectorAll("ha-tabs, ha-tab, ha-tab-container").forEach(t=>{t&&this._mutationObserver.observe(t,{attributes:!0,childList:!0,subtree:!0})});const e=(null===(t=this.shadowRoot)||void 0===t?void 0:t.host)||null;if(e instanceof HTMLElement){let t=e;for(;t&&t.parentElement;)this._mutationObserver.observe(t.parentElement,{attributes:!0,attributeFilter:["style","class","hidden","active"],childList:!1,subtree:!1}),t=t.parentElement}const i=document.querySelector("home-assistant, ha-panel-lovelace");i&&this._mutationObserver.observe(i,{childList:!0,subtree:!0})}}_teardownMutationObserver(){this._mutationObserver&&(this._mutationObserver.disconnect(),this._mutationObserver=null)}_handleVisibilityChange(){var t;if(this._isElementVisible()){const i=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector("#chart"),r=null==i?void 0:i.querySelector("svg"),a=i&&i.offsetWidth>0&&i.offsetHeight>0,s=!this.svg||!i||""===i.innerHTML||0===i.clientWidth||!r;if(!s&&r&&a)return void console.debug(`[${e}] _handleVisibilityChange: chart already rendered and visible, skipping redraw.`);s&&this.chartLoaded&&(this.cleanupChart(),this.requestUpdate(),this.updateComplete.then(()=>this._scheduleDrawMeteogram("_handleVisibilityChange")))}}_setupResizeObserver(){this._resizeObserver||(this._resizeObserver=new ResizeObserver(this._onResize.bind(this))),setTimeout(()=>{var t;const e=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector("#chart");e&&this._resizeObserver&&this._resizeObserver.observe(e)},100)}_onResize(t){var i;if(0===t.length)return;const r=t[0];if(Math.abs(r.contentRect.width-this._lastWidth)>.05*this._lastWidth||Math.abs(r.contentRect.height-this._lastHeight)>.1*this._lastHeight){this._lastWidth=r.contentRect.width,this._lastHeight=r.contentRect.height;const t=null===(i=this.shadowRoot)||void 0===i?void 0:i.querySelector("#chart"),a=null==t?void 0:t.querySelector("svg"),s=t&&t.offsetWidth>0&&t.offsetHeight>0;if(a&&s)return void console.debug(`[${e}] _onResize: chart already rendered and visible, skipping redraw.`);this._scheduleDrawMeteogram("_onResize")}}_teardownResizeObserver(){this._resizeObserver&&(this._resizeObserver.disconnect(),this._resizeObserver=null)}firstUpdated(t){setTimeout(()=>{this.loadD3AndDraw()},50),this._updateDarkMode()}updated(t){var i,r;const a=t.has("latitude")||t.has("longitude")||t.has("showCloudCover")||t.has("showPressure")||t.has("showRain")||t.has("showWeatherIcons")||t.has("showWind")||t.has("denseWeatherIcons")||t.has("meteogramHours");if(a&&console.debug(`[${e}] updated(): needsRedraw because:`,{latitude:t.has("latitude"),longitude:t.has("longitude"),showCloudCover:t.has("showCloudCover"),showPressure:t.has("showPressure"),showRain:t.has("showRain"),showWeatherIcons:t.has("showWeatherIcons"),showWind:t.has("showWind"),denseWeatherIcons:t.has("denseWeatherIcons"),meteogramHours:t.has("meteogramHours")}),a){if(console.debug(`[${e}] updated(): scheduling redraw, chartLoaded=${this.chartLoaded}`),this.chartLoaded&&a){const t=null===(i=this.shadowRoot)||void 0===i?void 0:i.querySelector("#chart");null==t||t.querySelector("svg"),t&&t.offsetWidth>0&&t.offsetHeight,this._scheduleDrawMeteogram("updated")}if(!this._isInitialized&&this.shadowRoot&&(this._isInitialized=!0,this.chartLoaded)){const t=null===(r=this.shadowRoot)||void 0===r?void 0:r.querySelector("#chart");t&&""===t.innerHTML&&this._scheduleDrawMeteogram("updated-forced")}this._updateDarkMode()}else console.debug(`[${e}] updated(): no redraw needed or chart render in progress, skipping.`)}static encodeCacheKey(t,e){const i=String(t)+String(e);return btoa(i)}getLocationKey(t,e){return yt.encodeCacheKey(Number(t.toFixed(4)),Number(e.toFixed(4)))}_saveDefaultLocationToStorage(t,i){try{const e={latitude:parseFloat(t.toFixed(4)),longitude:parseFloat(i.toFixed(4))};localStorage.setItem("meteogram-card-default-location",JSON.stringify(e))}catch(t){console.debug(`[${e}] Failed to save default location to localStorage:`,t)}}_loadDefaultLocationFromStorage(){try{const t=localStorage.getItem("meteogram-card-default-location");if(t)try{const e=JSON.parse(t),i=parseFloat(Number(e.latitude).toFixed(4)),r=parseFloat(Number(e.longitude).toFixed(4));if(!isNaN(i)&&!isNaN(r))return{latitude:i,longitude:r}}catch{}return null}catch(t){return console.debug(`[${e}] Failed to load default location from localStorage:`,t),null}}_checkAndUpdateLocation(){if(void 0!==this.latitude&&void 0!==this.longitude)return this.latitude=parseFloat(Number(this.latitude).toFixed(4)),this.longitude=parseFloat(Number(this.longitude).toFixed(4)),void(this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude||(this._weatherApiInstance=new bt(this.latitude,this.longitude)));if(this.hass&&(void 0===this.latitude||void 0===this.longitude)){const t=this.hass.config||{};if(void 0!==t.latitude&&void 0!==t.longitude){const i=parseFloat(Number(t.latitude).toFixed(4)),r=parseFloat(Number(t.longitude).toFixed(4)),a=this._loadDefaultLocationFromStorage();return a&&a.latitude===i&&a.longitude===r||this._saveDefaultLocationToStorage(i,r),this.latitude=i,this.longitude=r,this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude||(this._weatherApiInstance=new bt(this.latitude,this.longitude)),void console.debug(`[${e}] Using HA location: ${this.latitude}, ${this.longitude}`)}}if(void 0===this.latitude||void 0===this.longitude){const t=this._loadDefaultLocationFromStorage();t?(this.latitude=t.latitude,this.longitude=t.longitude,this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude||(this._weatherApiInstance=new bt(this.latitude,this.longitude)),console.debug(`[${e}] Using cached default-location: ${this.latitude}, ${this.longitude}`)):(this.latitude=51.5074,this.longitude=-.1278,this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude||(this._weatherApiInstance=new bt(this.latitude,this.longitude)),console.debug(`[${e}] Using default location: ${this.latitude}, ${this.longitude}`))}}async loadD3AndDraw(){var t;if(window.d3){this.chartLoaded=!0;const e=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector("#chart");return null==e||e.querySelector("svg"),e&&e.offsetWidth>0&&e.offsetHeight,void this._scheduleDrawMeteogram("loadD3AndDraw")}try{const t=document.createElement("script");t.src="https://d3js.org/d3.v7.min.js",t.async=!0;const e=new Promise((e,i)=>{t.onload=()=>{this.chartLoaded=!0,e()},t.onerror=()=>{i(new Error("Failed to load D3.js library"))}});if(document.head.appendChild(t),await e,!window.d3)throw new Error("D3.js not available after loading script");await this._scheduleDrawMeteogram("loadD3AndDraw-afterD3",!0)}catch(t){console.error("Error loading D3.js:",t),this.setError("Failed to load D3.js visualization library. Please refresh the page.")}}async fetchWeatherData(){if(this.entityId&&"none"!==this.entityId&&!this._weatherEntityApiInstance?this.hass&&(console.debug(`[${e}] Initializing WeatherEntityAPI for entity: ${this.entityId}`,this._weatherEntityApiInstance),this._weatherEntityApiInstance=new vt(this.hass,this.entityId,"fetchWeatherData")):this.entityId&&"none"==this.entityId&&this._weatherEntityApiInstance&&(this._weatherEntityApiInstance.destroy("fetchWeatherData"),this._weatherEntityApiInstance=null),this.entityId&&"none"!==this.entityId&&this._weatherEntityApiInstance){const t=this._weatherEntityApiInstance.getForecastData();if(!t||!t.time||0===t.time.length)throw new Error(`Weather entity ${this.entityId} is unavailable. Waiting for it to become available...`);return t}const t=void 0!==this.latitude?parseFloat(Number(this.latitude).toFixed(4)):void 0,i=void 0!==this.longitude?parseFloat(Number(this.longitude).toFixed(4)):void 0;if(console.debug(`[${e}] fetchWeatherData called with lat=${t}, lon=${i}`),!t||!i){this._checkAndUpdateLocation();const t=void 0!==this.latitude?parseFloat(Number(this.latitude).toFixed(4)):void 0,e=void 0!==this.longitude?parseFloat(Number(this.longitude).toFixed(4)):void 0;if(!t||!e)throw new Error("Could not determine location. Please check your card configuration or Home Assistant settings.")}this._weatherApiInstance&&this._weatherApiInstance.lat===t&&this._weatherApiInstance.lon===i||(this._weatherApiInstance=new bt(t,i));const r=this._weatherApiInstance;if(this.weatherDataPromise){if(this._weatherApiInstance&&this._weatherApiInstance._lastFetchTime){const t=this._weatherApiInstance._lastFetchTime;t&&(this._statusLastFetch=new Date(t).toISOString())}return console.debug(`[${e}] fetchWeatherData: returning existing in-progress promise.`),this.weatherDataPromise}return this.weatherDataPromise=(async()=>{let t=null;try{const e=await r.getForecastData();if(!e)throw new Error("No forecast data available from WeatherAPI.");t=e,this.apiExpiresAt=r.expiresAt,this._statusApiSuccess=!0,this._lastApiSuccess=!0;let i=48;if("8h"===this.meteogramHours?i=8:"12h"===this.meteogramHours?i=12:"24h"===this.meteogramHours?i=24:"48h"===this.meteogramHours?i=48:"54h"===this.meteogramHours?i=54:"max"===this.meteogramHours&&(i=t.time.length),i<t.time.length&&Object.keys(t).forEach(e=>{t[e]=t[e].slice(0,i)}),r&&r._lastFetchTime){const t=r._lastFetchTime;t&&(this._statusLastFetch=new Date(t).toISOString())}return t}catch(t){this._statusApiSuccess=!1;let e=r.getDiagnosticText();throw this.setError(e),new Error(`<br>Failed to get weather data: ${t.message}\n<br>Check your network connection, browser console, and API accessibility.\n\n${e}`)}})(),this.weatherDataPromise}cleanupChart(){try{if(this.svg&&"function"==typeof this.svg.remove&&(this.svg.remove(),this.svg=null),this.shadowRoot){const t=this.shadowRoot.querySelector("#chart");t&&(t.innerHTML="")}}catch(t){console.warn("Error cleaning up chart:",t)}}async _drawMeteogram(t="unknown"){var i,r;console.debug(`[${e}] _drawMeteogram called from: ${t}`);const a=Date.now();if(this.meteogramError&&a-this.lastErrorTime<6e4)return void this.errorCount++;if(this.meteogramError="",this._checkAndUpdateLocation(),!this.latitude||!this.longitude)return void this.setError("Location not available. Please check your card configuration or Home Assistant settings.");await this.updateComplete,this._logDomState();if(yt.lastD3RetryTime||(yt.lastD3RetryTime=0),!window.d3)try{return void await this.loadD3AndDraw()}catch(t){const e=Date.now();if(e-yt.lastD3RetryTime<1e4)return;return yt.lastD3RetryTime=e,void this.setError("D3.js library could not be loaded. Please refresh the page.")}this.cleanupChart(),await new Promise(t=>setTimeout(t,10));const s=null===(i=this.shadowRoot)||void 0===i?void 0:i.querySelector("#chart");if(s)this._renderChart(s,"_drawMeteogram");else if(console.error("Chart container not found in DOM"),this.isConnected){this.requestUpdate(),await this.updateComplete,await new Promise(t=>setTimeout(t,50));const t=null===(r=this.shadowRoot)||void 0===r?void 0:r.querySelector("#chart");if(!t){if(console.error("Chart container still not found after retry"),this.shadowRoot){const t=this.shadowRoot.querySelector(".card-content");if(t&&this.isConnected){t.innerHTML='<div id="chart"></div>';const e=this.shadowRoot.querySelector("#chart");if(e)return void this._renderChart(e,"_drawMeteogram-finalAttempt")}}return}this._renderChart(t,"_drawMeteogram-retry")}}_renderChart(t,i="unknown"){if(console.debug(`[${e}] _renderChart called from: ${i}`),this._chartRenderInProgress)return void console.debug(`[${e}] _renderChart: already in progress, skipping.`);this._chartRenderInProgress=!0,console.debug(`[${e}] _renderChart: starting render.`);const r=t.parentElement;let a=r?r.clientWidth:t.offsetWidth||350,s=r?r.clientHeight:t.offsetHeight||180,o=t.offsetWidth>0?t.offsetWidth:a,n=t.offsetHeight>0?t.offsetHeight:s;t.innerHTML="",this.fetchWeatherData().then(i=>{if(this.entityId&&"none"!==this.entityId&&this._weatherEntityApiInstance){if(!this._weatherEntityApiInstance.getForecastData())return void this.setError(`Weather entity ${this.entityId} is unavailable. Waiting for it to become available...`)}const r=this.showWind&&Array.isArray(i.windSpeed)&&i.windSpeed.length>0&&i.windSpeed.some(t=>"number"==typeof t),d=r?45:0;this._lastWidth=a,this._lastHeight=s,this.svg=window.d3.select(t).append("svg").attr("width","100%").attr("height","100%").attr("viewBox",`0 0 ${o+140} ${n}`).attr("preserveAspectRatio","none");let l=48;"8h"===this.meteogramHours?l=8:"12h"===this.meteogramHours?l=12:"24h"===this.meteogramHours?l=24:"48h"===this.meteogramHours?l=48:"54h"===this.meteogramHours?l=54:"max"===this.meteogramHours&&(l=i.time.length);const h=t=>t.slice(0,Math.min(l,t.length)+1),c={time:h(i.time),temperature:h(i.temperature),rain:h(i.rain),rainMin:h(i.rainMin),rainMax:h(i.rainMax),snow:h(i.snow),cloudCover:h(i.cloudCover),windSpeed:h(i.windSpeed),windDirection:h(i.windDirection),symbolCode:h(i.symbolCode),pressure:h(i.pressure)};if(this.renderMeteogram(this.svg,c,o,n,d,30),this.errorCount=0,this._weatherRetryTimeout&&(clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=null),this._setupResizeObserver(),this._setupVisibilityObserver(),this._setupMutationObserver(),this.apiExpiresAt){const t=Date.now(),i=Math.max(this.apiExpiresAt+6e4-t,0);this._weatherRefreshTimeout&&clearTimeout(this._weatherRefreshTimeout),console.debug(`[${e}] Setting scheduled-refresh-after-expiresAt in ${Math.round(i/1e3)}s (at ${new Date(this.apiExpiresAt+6e4).toISOString()})`),this._weatherRefreshTimeout=window.setTimeout(()=>{this._scheduleDrawMeteogram("scheduled-refresh-after-expiresAt",!0)},i)}}).catch(t=>{t.message&&t.message.includes("is unavailable. Waiting for it to become available")?(this.setError(`Weather entity ${this.entityId} is unavailable. Waiting for it to become available...`),this._weatherRetryTimeout&&clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=window.setTimeout(()=>{this.meteogramError="",this._drawMeteogram("retry-entity-unavailable")},500)):(this.setError("Weather data not available, retrying in 60 seconds"),this._weatherRetryTimeout&&clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=window.setTimeout(()=>{this.meteogramError="",this._drawMeteogram("retry-after-error")},6e4))}).finally(()=>{this._chartRenderInProgress=!1,this.weatherDataPromise=null,this._statusLastRender=(new Date).toISOString(),console.debug(`[${e}] _renderChart: finished render.`),this._pendingRender&&(this._pendingRender=!1,console.debug(`[${e}] _renderChart: running pending render.`),this._drawMeteogram("pending-after-render"))})}getHaLocale(){return this.hass&&this.hass.language?this.hass.language:"en"}renderMeteogram(t,i,r,a,s=0,o=24){const n=window.d3,{time:d,temperature:l,rain:h,rainMin:c,rainMax:u,snow:m,cloudCover:g,windSpeed:p,windDirection:_,symbolCode:f,pressure:w}=i,b=d.length,v=this.getSystemTemperatureUnit(),y=l.map(t=>this.convertTemperature(t)),$=this.showPressure&&w&&w.length>0,x=this.showWind&&_&&p.length>0&&_.length>0,A=this.showCloudCover&&g&&g.length>0,S=this.showRain&&m&&m.length>0,C=this.focussed?{top:20,left:40}:{top:70,left:70},k=this.focussed?a-s-o-10:a-s-o-50-10;let E;this.focussed?E=Math.min(r,Math.max(300,90*(b-1)))+60:(E=$?Math.min(r,Math.max(300,90*(b-1))):r,console.debug(`[${e}] pressure-available: ${$}, chartWidth calculated as: ${E}, width=${r}`));let I=E/(b-1);const M=n.scaleLinear().domain([0,b-1]).range([0,E]);I=M(1)-M(0);const D=C.top-30,T=[];for(let t=0;t<b;t++)0!==t&&d[t].getDate()===d[t-1].getDate()||T.push(t);const P=[];for(let t=0;t<T.length;++t){const e=T[t],i=t+1<T.length?T[t+1]:b;P.push({start:e,end:i})}t.selectAll(".day-bg").data(P).enter().append("rect").attr("class","day-bg").attr("x",t=>C.left+M(t.start)).attr("y",C.top-42).attr("width",t=>Math.min(M(Math.max(t.end-1,t.start))-M(t.start)+I,E-M(t.start))).attr("height",k+42).attr("opacity",(t,e)=>e%2==0?.16:0),t.selectAll(".day-tic").data(T).enter().append("line").attr("class","day-tic").attr("x1",t=>C.left+M(t)).attr("x2",t=>C.left+M(t)).attr("y1",D+22).attr("y2",D+42).attr("stroke","#1a237e").attr("stroke-width",3).attr("opacity",.6);const R=t.append("g").attr("transform",`translate(${C.left},${C.top})`),L=y.filter(t=>null!==t),O=n.scaleLinear().domain([Math.floor(n.min(L)-2),Math.ceil(n.max(L)+2)]).range([k,0]),z=n.scaleLinear().domain([0,Math.max(2,n.max([...u,...h,...m])+1)]).range([k,0]);let F;const H=this.showPressure&&Array.isArray(w)&&w.some(t=>null!==t&&"number"==typeof t&&!isNaN(t));if(H){const t=w.filter(t=>null!==t&&"number"==typeof t&&!isNaN(t)),e=n.extent(t),i=.1*(e[1]-e[0]);F=n.scaleLinear().domain([5*Math.floor((e[0]-i)/5),5*Math.ceil((e[1]+i)/5)]).range([k,0])}if(R.append("g").attr("class","xgrid").selectAll("line").data(n.range(b)).enter().append("line").attr("x1",t=>M(t)).attr("x2",t=>M(t)).attr("y1",0).attr("y2",k).attr("stroke","currentColor").attr("stroke-width",1),x){const e=C.top+k,i=t.append("g").attr("transform",`translate(${C.left},${e})`),r=[];for(let t=0;t<b;t++)d[t].getHours()%2==0&&r.push(t);i.selectAll(".wind-band-grid").data(r).enter().append("line").attr("class","wind-band-grid").attr("x1",t=>M(t)).attr("x2",t=>M(t)).attr("y1",0).attr("y2",s).attr("stroke","currentColor").attr("stroke-width",1),i.append("rect").attr("class","wind-band-outline").attr("x",0).attr("y",0).attr("width",E).attr("height",s).attr("stroke","currentColor").attr("stroke-width",2).attr("fill","none")}if(R.selectAll(".twentyfourh-line").data(T.slice(1)).enter().append("line").attr("class","twentyfourh-line").attr("x1",t=>M(t)).attr("x2",t=>M(t)).attr("y1",0).attr("y2",k).attr("stroke","var(--meteogram-grid-color, #b8c4d9)").attr("stroke-width",3).attr("stroke-dasharray","6,5").attr("opacity",.7),A){const t=.01*k,e=.2*k,i=[];for(let r=0;r<b;r++)i.push([M(r),t+e/2*(1-g[r]/100)]);for(let r=b-1;r>=0;r--)i.push([M(r),t+e/2*(1+g[r]/100)]);R.append("path").attr("class","cloud-area").attr("d",n.line().x(t=>t[0]).y(t=>t[1]).curve(n.curveLinearClosed)(i))}H&&F&&(R.append("g").attr("class","pressure-axis").attr("transform",`translate(${E}, 0)`).call(n.axisRight(F).tickFormat(t=>`${t}`)),this.focussed||(R.append("text").attr("class","axis-label").attr("text-anchor","middle").attr("transform",`translate(${E+50},${k/2}) rotate(90)`).text(ft(this.hass,"ui.card.meteogram.attributes.air_pressure","Pressure")+" (hPa)"),R.append("text").attr("class","legend legend-pressure").attr("x",340).attr("y",-45).text(ft(this.hass,"ui.card.meteogram.attributes.air_pressure","Pressure")+" (hPa)"))),R.append("g").attr("class","temperature-axis").call(window.d3.axisLeft(O).tickFormat(t=>`${t}`)),R.append("g").attr("class","grid").call(window.d3.axisLeft(O).tickSize(-E).tickFormat(()=>"")),R.append("line").attr("class","line").attr("x1",0).attr("x2",E).attr("y1",0).attr("y2",0).attr("stroke","var(--meteogram-grid-color, #e0e0e0)").attr("stroke-width",3),R.append("line").attr("class","line").attr("x1",0).attr("x2",E).attr("y1",k).attr("y2",k).attr("stroke","var(--meteogram-grid-color, #e0e0e0)"),R.append("line").attr("class","line").attr("x1",E).attr("x2",E).attr("y1",0).attr("y2",k).attr("stroke","var(--meteogram-grid-color, #e0e0e0)").attr("stroke-width",3),R.append("line").attr("class","line").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",k).attr("stroke","var(--meteogram-grid-color, #e0e0e0)").attr("stroke-width",3),this.focussed||(A&&R.append("text").attr("class","legend legend-cloud").attr("x",0).attr("y",-45).text(ft(this.hass,"ui.card.meteogram.attributes.cloud_coverage","Cloud Cover")+" (%)"),S&&R.append("text").attr("class","legend legend-snow").attr("x",630).attr("y",-45).text(ft(this.hass,"ui.card.meteogram.attributes.snow","Snow")+" (mm)"),R.append("text").attr("class","legend legend-temp").attr("x",200).attr("y",-45).text(ft(this.hass,"ui.card.meteogram.attributes.temperature","Temperature")+` (${v})`),R.append("text").attr("class","legend legend-rain").attr("x",480).attr("y",-45).text(ft(this.hass,"ui.card.meteogram.attributes.precipitation","Rain")+" (mm)"));const W=n.line().defined(t=>null!==t).x((t,e)=>M(e)).y((t,e)=>null!==y[e]?O(y[e]):0).curve(n.curveMonotoneX);if(R.append("path").datum(y).attr("class","temp-line").attr("d",W).attr("stroke","currentColor"),H&&F){const t=n.line().defined(t=>null!==t&&"number"==typeof t&&!isNaN(t)).x((t,e)=>M(e)).y(t=>F(t));R.append("path").datum(w).attr("class","pressure-line").attr("d",t).attr("stroke","currentColor")}if(this.showWeatherIcons){const t=this.denseWeatherIcons?1:2;R.selectAll(".weather-icon").data(f).enter().append("foreignObject").attr("class","weather-icon").attr("x",(t,e)=>M(e)-20).attr("y",(t,e)=>{const i=y[e];return null!==i?O(i)-40:-999}).attr("width",40).attr("height",40).attr("opacity",(e,i)=>null!==y[i]&&i%t===0?1:0).each((e,i,r)=>{if(i%t!==0)return;const a=r[i];if(!e)return;let s=e;var o;s=this.entityId&&"none"!==this.entityId&&this._weatherEntityApiInstance?{"clear-night":"clearsky_night",cloudy:"cloudy",fog:"fog",hail:"heavyrainshowers",lightning:"lightrainshowers","lightning-rainy":"lightrainshowers",partlycloudy:"partlycloudy_day",pouring:"heavyrain",rainy:"rain",snowy:"snow","snowy-rainy":"sleet",sunny:"clearsky_day",windy:"fair_day","windy-variant":"fair_day",exceptional:"clearsky_day"}[o=e]||o:e.replace(/^lightssleet/,"lightsleet").replace(/^lightssnow/,"lightsnow"),this.getIconSVG(s).then(t=>{if(t){const e=document.createElement("div");e.style.width="40px",e.style.height="40px",e.innerHTML=t,a.appendChild(e)}else console.warn(`Failed to load icon: ${s}`)}).catch(t=>{console.error(`Error loading icon ${s}:`,t)})})}const N=Math.min(26,.8*I);if(this.showRain&&(R.selectAll(".rain-max-bar").data(u.slice(0,b-1)).enter().append("rect").attr("class","rain-max-bar").attr("x",(t,e)=>M(e)+I/2-N/2).attr("y",t=>{const e=k-z(t),i=e<2&&t>0?2:.7*e;return z(0)-i}).attr("width",N).attr("height",t=>{const e=k-z(t);return e<2&&t>0?2:.7*e}).attr("fill","currentColor"),R.selectAll(".rain-bar").data(h.slice(0,b-1)).enter().append("rect").attr("class","rain-bar").attr("x",(t,e)=>M(e)+I/2-N/2).attr("y",t=>{const e=k-z(t),i=e<2&&t>0?2:.7*e;return z(0)-i}).attr("width",N).attr("height",t=>{const e=k-z(t);return e<2&&t>0?2:.7*e}).attr("fill","currentColor"),R.selectAll(".rain-label").data(h.slice(0,b-1)).enter().append("text").attr("class","rain-label").attr("x",(t,e)=>M(e)+I/2).attr("y",t=>{const e=k-z(t),i=e<2&&t>0?2:.7*e;return z(0)-i-4}).text(t=>t<=0?"":t<1?t.toFixed(1):t.toFixed(0)).attr("opacity",t=>t>0?1:0),R.selectAll(".rain-max-label").data(u.slice(0,b-1)).enter().append("text").attr("class","rain-max-label").attr("x",(t,e)=>M(e)+I/2).attr("y",t=>{const e=k-z(t),i=e<2&&t>0?2:.7*e;return z(0)-i-18}).text((t,e)=>t<=h[e]?"":t<1?t.toFixed(1):t.toFixed(0)).attr("opacity",(t,e)=>t>h[e]?1:0),S&&R.selectAll(".snow-bar").data(m.slice(0,b-1)).enter().append("rect").attr("class","snow-bar").attr("x",(t,e)=>M(e)+I/2-N/2).attr("y",(t,e)=>{const i=k-z(m[e]),r=i<2&&m[e]>0?2:.7*i;return z(0)-r}).attr("width",N).attr("height",t=>{const e=k-z(t);return e<2&&t>0?2:.7*e}).attr("fill","currentColor")),x){const e=C.top+k,i=t.append("g").attr("transform",`translate(${C.left},${e})`),a=s/2;i.append("rect").attr("class","wind-band-bg").attr("x",0).attr("y",0).attr("width",E).attr("height",s);const o=[];for(let t=0;t<b;t++)d[t].getHours()%2==0&&o.push(t);i.selectAll(".wind-band-grid").data(o).enter().append("line").attr("class","wind-band-grid").attr("x1",t=>M(t)).attr("x2",t=>M(t)).attr("y1",0).attr("y2",s).attr("stroke","currentColor").attr("stroke-width",1);const l=T.slice(1);i.selectAll(".twentyfourh-line-wind").data(l).enter().append("line").attr("class","twentyfourh-line-wind").attr("x1",t=>M(t)).attr("x2",t=>M(t)).attr("y1",0).attr("y2",s);const h=[];for(let t=0;t<b;t++)d[t].getHours()%2==0&&h.push(t);for(let t=0;t<h.length-1;t++){const e=h[t],s=h[t+1];if(r<400&&t%2!=0)continue;const o=(M(e)+M(s))/2,d=Math.floor((e+s)/2),l=p[d],c=_[d],u=r<400?18:23,m=r<400?30:38,g=n.scaleLinear().domain([0,Math.max(15,n.max(p)||20)]).range([u,m])(l);this.drawWindBarb(i,o,a,l,c,g,r<400?.7:.8)}i.append("rect").attr("class","wind-band-outline").attr("x",0).attr("y",0).attr("width",E).attr("height",s).attr("stroke","currentColor").attr("stroke-width",1).attr("fill","none")}const U=C.top+k+s+15;t.selectAll(".bottom-hour-label").data(i.time).enter().append("text").attr("class","bottom-hour-label").attr("x",(t,e)=>C.left+M(e)).attr("y",U).attr("text-anchor","middle").text((t,e)=>{const i=this.getHaLocale(),a=t.toLocaleTimeString(i,{hour:"2-digit",hour12:!1});return r<400?e%6==0?a:"":r>800?e%2==0?a:"":e%3==0?a:""}),this.focussed||(R.append("text").attr("class","axis-label").attr("text-anchor","middle").attr("transform",`translate(-50,${k/2}) rotate(-90)`).text(ft(this.hass,"ui.card.weather.attributes.temperature","Temperature")+` (${v})`),t.selectAll(".top-date-label").data(T).enter().append("text").attr("class","top-date-label").attr("x",(t,e)=>{const i=C.left+M(t);return e===T.length-1?Math.min(i,C.left+E-80):i}).attr("y",D).attr("text-anchor","start").attr("opacity",(t,e)=>{if(e===T.length-1)return 1;const i=C.left+M(t);return C.left+M(T[e+1])-i<100?0:1}).text(t=>{const e=d[t],i=this.getHaLocale();return e.toLocaleDateString(i,{weekday:"short",day:"2-digit",month:"short"})})),t.selectAll(".day-tic").data(T).enter().append("line").attr("class","day-tic").attr("x1",t=>C.left+M(t)).attr("x2",t=>C.left+M(t)).attr("y1",D+22).attr("y2",D+42).attr("stroke","#1a237e").attr("stroke-width",3).attr("opacity",.6)}drawWindBarb(t,e,i,r,a,s,o=.8){const n=t.append("g").attr("transform",`translate(${e},${i}) rotate(${a}) scale(${o})`),d=-s/2,l=+s/2;if(r<2)return void n.append("circle").attr("class","wind-barb-calm").attr("cx",0).attr("cy",0).attr("r",4);n.append("line").attr("class","wind-barb").attr("x1",0).attr("y1",d).attr("x2",0).attr("y2",l),n.append("circle").attr("class","wind-barb-dot").attr("cx",0).attr("cy",l).attr("r",4);let h=r,c=d,u=Math.floor(h/10);h-=10*u;let m=Math.floor(h/5);h-=5*m;for(let t=0;t<u;t++,c+=7)n.append("line").attr("class","wind-barb-feather").attr("x1",0).attr("y1",c).attr("x2",12).attr("y2",c+3);for(let t=0;t<m;t++,c+=7)n.append("line").attr("class","wind-barb-half").attr("x1",0).attr("y1",c).attr("x2",6).attr("y2",c+2)}render(){this._updateDarkMode();const t=Object.entries(this.styles||{}).map(([t,e])=>`${t}: ${e};`).join(" "),e=bt.METEOGRAM_CARD_API_CALL_COUNT>0?Math.round(100*bt.METEOGRAM_CARD_API_SUCCESS_COUNT/bt.METEOGRAM_CARD_API_CALL_COUNT):0,r=`API Success Rate: ${bt.METEOGRAM_CARD_API_SUCCESS_COUNT}/${bt.METEOGRAM_CARD_API_CALL_COUNT} (${e}%) since ${i.toISOString()}`;if(this.focussed)return q`
                <ha-card style="${t}">
                    <div class="card-content">
                        ${this.meteogramError?q`
                                <div class="error" style="white-space:normal;"
                                     .innerHTML=${this.meteogramError}></div>`:q`
                                <div id="chart"></div>
                            `}
                    </div>
                </ha-card>
            `;const a=!(this.entityId&&"none"!==this.entityId);return q`
                <ha-card style="${t}">
                    ${this.title?q`
                        <div class="card-header">${this.title}</div>`:""}
                    <div class="card-content">
                        ${a?q`
                        <div class="attribution">
                            ${ft(this.hass,"ui.card.meteogram.attribution","Data from")} <a href="https://met.no/"
                                                                                                  target="_blank"
                                                                                                  rel="noopener"
                                                                                                  style="color: inherit;">met.no</a>
                            <span
                                    style="margin-left:8px; vertical-align:middle;"
                                    title="${this._lastApiSuccess?ft(this.hass,"ui.card.meteogram.status.success","success")+` : ${r}`:null===this._statusApiSuccess?ft(this.hass,"ui.card.meteogram.status.cached","cached")+` : ${r}`:ft(this.hass,"ui.card.meteogram.status.failed","failed")+` : ${r}`}"
                            >${this._lastApiSuccess?"✅":null===this._statusApiSuccess?"❎":"❌"}</span>
                        </div>
                        `:""}
                        ${this.meteogramError?q`
                                <div class="error" style="white-space:normal;"
                                     .innerHTML=${this.meteogramError}></div>`:q`
                                <div id="chart"></div>
                                ${this.diagnostics?q`
                                    <div id="meteogram-status-panel"
                                         style="margin-top:12px; font-size:0.95em; background:#f5f5f5; border-radius:6px; padding:8px; color:#333;"
                                         xmlns="http://www.w3.org/1999/html">
                                        <b>${ft(this.hass,"ui.card.meteogram.status_panel","Status Panel")}</b>
                                        <div style="display:grid; grid-template-columns:1fr 1fr; gap:8px; margin-top:6px;">
                                            <div>
                                                <span>${ft(this.hass,"ui.card.meteogram.status.expires_at","Expires At")}
                                                    : ${this.apiExpiresAt?new Date(this.apiExpiresAt).toISOString():"unknown"}</span><br>
                                                <span>${ft(this.hass,"ui.card.meteogram.status.last_render","Last Render")}
                                                    : ${this._statusLastRender||"unknown"}</span><br>
                                                <span>${ft(this.hass,"ui.card.meteogram.status.last_data_fetch","Last Data Fetch")}
                                                    : ${this._statusLastFetch||"unknown"}</span>
                                            </div>
                                            <div>
                                                <span
                                                        title="${this._lastApiSuccess?ft(this.hass,"ui.card.meteogram.status.success","success")+` : ${r}`:null===this._statusApiSuccess?ft(this.hass,"ui.card.meteogram.status.cached","cached")+` : ${r}`:ft(this.hass,"ui.card.meteogram.status.failed","failed")+` : ${r}`}" >
                                                    ${ft(this.hass,"ui.card.meteogram.status.api_success","API Success")}
                                                        : ${this._lastApiSuccess?"✅":null===this._statusApiSuccess?"❎":"❌"}
                                                </span>
                                                <br>
                                                <span>Card version: <code>${yt.meteogramCardVersion}</code></span><br>
                                                <span>Client type: <code>${function(){const t=navigator.userAgent;return/Home Assistant/.test(t)?"HA Companion":/Edg/.test(t)?"Edge":/Chrome/.test(t)?"Chrome":/Android/.test(t)?"Android":/iPhone|iPad|iPod/.test(t)?"iOS":/Firefox/.test(t)?"Firefox":"Unknown"}()}</code></span><br>
                                                <span>${r}</span>

                                            </div>
                                        </div>
                                    </div>
                                `:""}
                            `}
                    </div>
                </ha-card>
            `}_logDomState(){if(this.errorCount>0){if(console.debug("DOM state check:"),console.debug("- shadowRoot exists:",!!this.shadowRoot),this.shadowRoot){const t=this.shadowRoot.querySelector("#chart");console.debug("- chart div exists:",!!t),t&&console.debug("- chart div size:",t.offsetWidth,"x",t.offsetHeight)}console.debug("- Is connected:",this.isConnected),console.debug("- Chart loaded:",this.chartLoaded)}}setError(t){const e=Date.now();this.meteogramError=t,this.lastErrorTime=e,this.errorCount=1,console.error("Meteogram error:",t),t===this.meteogramError?(this.errorCount++,e-this.lastErrorTime>1e4&&(this.meteogramError=`${t} (occurred ${this.errorCount} times)`,this.lastErrorTime=e)):(this.errorCount=1,this.meteogramError=t,this.lastErrorTime=e,console.error("Meteogram error:",t))}_updateDarkMode(){let t=!1;t=this.hass&&this.hass.themes&&"boolean"==typeof this.hass.themes.darkMode?this.hass.themes.darkMode:document.documentElement.classList.contains("dark-theme")||document.body.classList.contains("dark-theme"),t?this.setAttribute("dark",""):this.removeAttribute("dark")}getSystemTemperatureUnit(){if(this.hass&&this.hass.config&&this.hass.config.unit_system&&this.hass.config.unit_system.temperature){const t=this.hass.config.unit_system.temperature;if("°F"===t||"°C"===t)return t;if("F"===t)return"°F";if("C"===t)return"°C"}return"°C"}convertTemperature(t){if(null==t)return t;return"°F"===this.getSystemTemperatureUnit()?9*t/5+32:t}};$t.meteogramCardVersion=t,$t.lastD3RetryTime=0,$t.styles=((t,...e)=>{const i=1===t.length?t[0]:e.reduce((e,i,r)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[r+1],t[0]);return new l(i,t,n)})`
            :host {
                --meteogram-grid-color: #b8c4d9;
                --meteogram-grid-color-dark: #b8c4d9;
                --meteogram-temp-line-color: orange;
                --meteogram-temp-line-color-dark: orange;
                --meteogram-pressure-line-color: #90caf9;
                --meteogram-pressure-line-color-dark: #90caf9;
                --meteogram-rain-bar-color: deepskyblue;
                --meteogram-rain-bar-color-dark: deepskyblue;
                --meteogram-rain-max-bar-color: #7fdbff;
                --meteogram-rain-max-bar-color-dark: #7fdbff;
                --meteogram-rain-label-color: #0058a3;
                --meteogram-rain-label-color-dark: #a3d8ff;
                --meteogram-rain-max-label-color: #2693e6;
                --meteogram-rain-max-label-color-dark: #2693e6;
                --meteogram-cloud-color: #b0bec5;
                --meteogram-cloud-color-dark: #eceff1;
                --meteogram-wind-barb-color: #1976d2;
                --meteogram-wind-barb-color-dark: #1976d2;
                --meteogram-label-font-size: var(--mdc-typography-body2-font-size, 0.875rem);
                --meteogram-legend-font-size: var(--mdc-typography-body1-font-size, 1rem);
                --meteogram-tick-font-size: var(--mdc-typography-body2-font-size, 0.875rem);
                --meteogram-axis-label-color: #000;
                --meteogram-axis-label-color-dark: #fff;
                --meteogram-timescale-color: #ffb300;
                --meteogram-timescale-color-dark: #ffd54f;
                --meteogram-snow-bar-color: #b3e6ff;
                --meteogram-snow-bar-color-dark: #e0f7fa;
                display: block;
                box-sizing: border-box;
                height: 100%;
                width: 100%;
                max-width: 100%;
                max-height: 100%;
            }

            ha-card {
                display: flex;
                flex-direction: column;
                height: 100%;
                width: 100%;
                box-sizing: border-box;
                overflow: hidden;
                background: var(--card-background-color, #fff);
                color: var(--primary-text-color, #222);
            }

            .card-header {
                padding: 16px 16px 0 16px;
                font-size: 1.25em;
                font-weight: 500;
                line-height: 1.2;
                color: var(--primary-text-color, #222);
            }

            .card-content {
                position: relative;
                flex: 1 1 auto;
                display: flex;
                flex-direction: column;
                justify-content: flex-start;
                align-items: stretch;
                padding: 0 16px 16px 16px;
                box-sizing: border-box;
                min-height: 0;
                min-width: 0;
                overflow: hidden;
            }

            #chart {
                width: 100%;
                height: 100%;
                min-height: 180px;
                box-sizing: border-box;
                overflow: hidden;
                display: flex;
                align-items: stretch;
                justify-content: stretch;
            }

            .error {
                color: var(--error-color, #b71c1c);
                padding: 16px;
            }

            .temp-line {
                stroke: var(--meteogram-temp-line-color);
                stroke-width: 3;
                fill: none;
            }

            :host([dark]) .temp-line {
                stroke: var(--meteogram-temp-line-color-dark);
            }

            .pressure-line {
                stroke: var(--meteogram-pressure-line-color);
                stroke-width: 4;
                stroke-dasharray: 3, 3;
                fill: none;
            }

            :host([dark]) .pressure-line {
                stroke: var(--meteogram-pressure-line-color-dark);
            }

            .rain-bar {
                fill: var(--meteogram-rain-bar-color);
                opacity: 0.8;
            }

            :host([dark]) .rain-bar {
                fill: var(--meteogram-rain-bar-color-dark);
            }

            .rain-max-bar {
                fill: var(--meteogram-rain-max-bar-color);
                opacity: 0.5;
            }

            :host([dark]) .rain-max-bar {
                fill: var(--meteogram-rain-max-bar-color-dark);
            }

            .rain-label {
                font: var(--meteogram-label-font-size) sans-serif;
                text-anchor: middle;
                font-weight: bold;
                fill: var(--meteogram-rain-label-color);
            }

            :host([dark]) .rain-label {
                fill: var(--meteogram-rain-label-color-dark);
            }

            .rain-max-label {
                font: var(--meteogram-label-font-size) sans-serif;
                text-anchor: middle;
                font-weight: bold;
                fill: var(--meteogram-rain-max-label-color);
            }

            :host([dark]) .rain-max-label {
                fill: var(--meteogram-rain-max-label-color-dark);
            }

            .legend {
                font: var(--meteogram-legend-font-size) sans-serif;
                fill: var(--primary-text-color, #222);
            }

            :host([dark]) .legend {
                fill: var(--primary-text-color, #fff);
            }

            .legend-temp {
                fill: var(--meteogram-temp-line-color);
            }

            :host([dark]) .legend-temp {
                fill: var(--meteogram-temp-line-color-dark);
            }

            .legend-pressure {
                fill: var(--meteogram-pressure-line-color);
            }

            :host([dark]) .legend-pressure {
                fill: var(--meteogram-pressure-line-color-dark);
            }

            .legend-rain {
                fill: var(--meteogram-rain-bar-color);
            }

            :host([dark]) .legend-rain {
                fill: var(--meteogram-rain-bar-color-dark);
            }

            .legend-rain-max {
                fill: var(--meteogram-rain-max-bar-color);
            }

            :host([dark]) .legend-rain-max {
                fill: var(--meteogram-rain-max-bar-color-dark);
            }

            .legend-snow {
                fill: #b3e6ff;
            }

            .legend-cloud {
                fill: var(--meteogram-cloud-color);
            }

            :host([dark]) .legend-cloud {
                fill: var(--meteogram-cloud-color-dark);
            }

            .wind-barb {
                stroke: var(--meteogram-wind-barb-color);
                stroke-width: 2;
                fill: none;
            }

            .wind-barb-feather {
                stroke: var(--meteogram-wind-barb-color);
                stroke-width: 1.4;
            }

            .wind-barb-half {
                stroke: var(--meteogram-wind-barb-color);
                stroke-width: 0.8;
            }

            .wind-barb-calm {
                stroke: var(--meteogram-wind-barb-color);
                fill: none;
            }

            .wind-barb-dot {
                fill: var(--meteogram-wind-barb-color);
            }

            :host([dark]) .wind-barb,
            :host([dark]) .wind-barb-feather,
            :host([dark]) .wind-barb-half,
            :host([dark]) .wind-barb-calm {
                stroke: var(--meteogram-wind-barb-color-dark);
            }

            :host([dark]) .wind-barb-dot {
                fill: var(--meteogram-wind-barb-color-dark);
            }

            .top-date-label {
                font: var(--meteogram-label-font-size, 16px) sans-serif;
                fill: var(--primary-text-color, #222);
                font-weight: bold;
                dominant-baseline: hanging;
            }

            .bottom-hour-label {
                font: var(--meteogram-label-font-size) sans-serif;
                fill: var(--meteogram-timescale-color);
            }

            :host([dark]) .bottom-hour-label {
                fill: var(--meteogram-timescale-color-dark);
            }

            .day-bg {
                fill: transparent !important;
                opacity: 0;
                pointer-events: none;
            }

            .wind-band-bg {
                fill: transparent;
            }

            .attribution {
                position: absolute;
                top: 12px;
                right: 24px;
                font-size: 0.85em;
                color: var(--secondary-text-color);
                text-align: right;
                z-index: 2;
                background: rgba(255, 255, 255, 0.7);
                padding: 2px 8px;
                border-radius: 6px;
                pointer-events: auto;
            }

            /* Tick text font size for axes */

            .temperature-axis .tick text,
            .pressure-axis .tick text {
                font-size: var(--meteogram-tick-font-size);
                fill: var(--primary-text-color, #222);
            }

            .cloud-area {
                fill: var(--meteogram-cloud-color);
                opacity: 0.42;
            }

            :host([dark]) .cloud-area {
                fill: var(--meteogram-cloud-color-dark);
                opacity: 0.55;
            }

            .axis-label {
                font: var(--meteogram-label-font-size, 14px) sans-serif;
                fill: var(--meteogram-axis-label-color);
            }

            :host([dark]) .axis-label {
                fill: var(--meteogram-axis-label-color-dark);
            }

            .grid line,
            .xgrid line,
            .wind-band-grid,
            .twentyfourh-line,
            .twentyfourh-line-wind,
            .day-tic,
            .temperature-axis path,
            .pressure-axis path,
            .wind-band-outline {
                stroke: var(--meteogram-grid-color);
            }

            :host([dark]) .grid line,
            :host([dark]) .xgrid line,
            :host([dark]) .wind-band-grid,
            :host([dark]) .twentyfourh-line,
            :host([dark]) .twentyfourh-line-wind,
            :host([dark]) .day-tic,
            :host([dark]) .temperature-axis path,
            :host([dark]) .pressure-axis path,
            :host([dark]) .wind-band-outline {
                stroke: var(--meteogram-grid-color-dark);
            }

            /* Tick text font size for axes */

            .temperature-axis .tick text,
            .pressure-axis .tick text {
                font-size: var(--meteogram-tick-font-size);
                fill: var(--primary-text-color, #222);
            }

            .cloud-area {
                fill: var(--meteogram-cloud-color);
                opacity: 0.42;
            }

            :host([dark]) .cloud-area {
                fill: var(--meteogram-cloud-color-dark);
                opacity: 0.55;
            }

            .axis-label {
                font: var(--meteogram-label-font-size, 14px) sans-serif;
                fill: var(--meteogram-axis-label-color);
            }

            :host([dark]) .axis-label {
                fill: var(--meteogram-axis-label-color-dark);
            }

            .grid line {
                stroke: var(--meteogram-grid-color);
            }

            .xgrid line {
                stroke: var(--meteogram-grid-color);
            }

            .wind-band-grid {
                stroke: var(--meteogram-grid-color);
                stroke-width: 1;
            }

            .twentyfourh-line, .day-tic {
                stroke: var(--meteogram-grid-color);
                stroke-width: 3;
                stroke-dasharray: 6, 5;
                opacity: 0.7;
            }

            .twentyfourh-line-wind {
                stroke: var(--meteogram-grid-color);
                stroke-width: 2.5;
                stroke-dasharray: 6, 5;
                opacity: 0.5;
            }

            :host([dark]) .grid line,
            :host([dark]) .xgrid line,
            :host([dark]) .wind-band-grid,
            :host([dark]) .twentyfourh-line,
            :host([dark]) .twentyfourh-line-wind,
            :host([dark]) .day-tic {
                stroke: var(--meteogram-grid-color-dark);
            }

            .temperature-axis path,
            .pressure-axis path {
                stroke: var(--meteogram-grid-color);
            }

            :host([dark]) .temperature-axis path,
            :host([dark]) .pressure-axis path {
                stroke: var(--meteogram-grid-color-dark);
            }

            .wind-band-outline {
                stroke: var(--meteogram-grid-color);
                stroke-width: 2;
                fill: none;
            }

            :host([dark]) .wind-band-outline {
                stroke: var(--meteogram-grid-color-dark);
            }
        `,a([gt({type:String})],$t.prototype,"title",void 0),a([gt({type:Number})],$t.prototype,"latitude",void 0),a([gt({type:Number})],$t.prototype,"longitude",void 0),a([gt({attribute:!1})],$t.prototype,"hass",void 0),a([gt({type:Boolean})],$t.prototype,"showCloudCover",void 0),a([gt({type:Boolean})],$t.prototype,"showPressure",void 0),a([gt({type:Boolean})],$t.prototype,"showRain",void 0),a([gt({type:Boolean})],$t.prototype,"showWeatherIcons",void 0),a([gt({type:Boolean})],$t.prototype,"showWind",void 0),a([gt({type:Boolean})],$t.prototype,"denseWeatherIcons",void 0),a([gt({type:String})],$t.prototype,"meteogramHours",void 0),a([gt({type:Object})],$t.prototype,"styles",void 0),a([gt({type:Boolean})],$t.prototype,"diagnostics",void 0),a([gt({type:String})],$t.prototype,"entityId",void 0),a([gt({type:Boolean})],$t.prototype,"focussed",void 0),a([pt()],$t.prototype,"chartLoaded",void 0),a([pt()],$t.prototype,"meteogramError",void 0),a([pt()],$t.prototype,"errorCount",void 0),a([pt()],$t.prototype,"lastErrorTime",void 0),a([pt()],$t.prototype,"_statusExpiresAt",void 0),a([pt()],$t.prototype,"_statusLastRender",void 0),a([pt()],$t.prototype,"_statusLastFetch",void 0),a([pt()],$t.prototype,"_statusApiSuccess",void 0),$t=yt=a([ct("meteogram-card")],$t);console.info(`%c☀️ ${e} ${t} ⚡️🌦️`,"color: #1976d2; font-weight: bold; background: white"),window.customElements.get("meteogram-card")||customElements.define("meteogram-card",MeteogramCard),window.customCards=window.customCards||[],window.customCards.push({type:"meteogram-card",name:e,description:"A custom card showing a meteogram with wind barbs.",version:t,preview:"https://github.com/jm-cook/lovelace-meteogram-card/blob/main/images/meteogram-card.png",documentationURL:"https://github.com/jm-cook/lovelace-meteogram-card/blob/main/README.md"});
