var t="3.1.4-beta0";const e="Meteogram Card",i=new Date,a=t.includes("beta");function s(t,e,i,a){var s,r=arguments.length,o=r<3?e:null===a?a=Object.getOwnPropertyDescriptor(e,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)o=Reflect.decorate(t,e,i,a);else for(var n=t.length-1;n>=0;n--)(s=t[n])&&(o=(r<3?s(o):r>3?s(e,i,o):s(e,i))||o);return r>3&&o&&Object.defineProperty(e,i,o),o}"function"==typeof SuppressedError&&SuppressedError;const r=globalThis,o=r.ShadowRoot&&(void 0===r.ShadyCSS||r.ShadyCSS.nativeShadow)&&"adoptedStyleSheets"in Document.prototype&&"replace"in CSSStyleSheet.prototype,n=Symbol(),d=new WeakMap;let l=class{constructor(t,e,i){if(this._$cssResult$=!0,i!==n)throw Error("CSSResult is not constructable. Use `unsafeCSS` or `css` instead.");this.cssText=t,this.t=e}get styleSheet(){let t=this.o;const e=this.t;if(o&&void 0===t){const i=void 0!==e&&1===e.length;i&&(t=d.get(e)),void 0===t&&((this.o=t=new CSSStyleSheet).replaceSync(this.cssText),i&&d.set(e,t))}return t}toString(){return this.cssText}};const h=o?t=>t:t=>t instanceof CSSStyleSheet?(t=>{let e="";for(const i of t.cssRules)e+=i.cssText;return(t=>new l("string"==typeof t?t:t+"",void 0,n))(e)})(t):t,{is:c,defineProperty:u,getOwnPropertyDescriptor:m,getOwnPropertyNames:g,getOwnPropertySymbols:p,getPrototypeOf:_}=Object,f=globalThis,y=f.trustedTypes,v=y?y.emptyScript:"",w=f.reactiveElementPolyfillSupport,b=(t,e)=>t,A={toAttribute(t,e){switch(e){case Boolean:t=t?v:null;break;case Object:case Array:t=null==t?t:JSON.stringify(t)}return t},fromAttribute(t,e){let i=t;switch(e){case Boolean:i=null!==t;break;case Number:i=null===t?null:Number(t);break;case Object:case Array:try{i=JSON.parse(t)}catch(t){i=null}}return i}},$=(t,e)=>!c(t,e),x={attribute:!0,type:String,converter:A,reflect:!1,useDefault:!1,hasChanged:$};Symbol.metadata??=Symbol("metadata"),f.litPropertyMetadata??=new WeakMap;let I=class extends HTMLElement{static addInitializer(t){this._$Ei(),(this.l??=[]).push(t)}static get observedAttributes(){return this.finalize(),this._$Eh&&[...this._$Eh.keys()]}static createProperty(t,e=x){if(e.state&&(e.attribute=!1),this._$Ei(),this.prototype.hasOwnProperty(t)&&((e=Object.create(e)).wrapped=!0),this.elementProperties.set(t,e),!e.noAccessor){const i=Symbol(),a=this.getPropertyDescriptor(t,i,e);void 0!==a&&u(this.prototype,t,a)}}static getPropertyDescriptor(t,e,i){const{get:a,set:s}=m(this.prototype,t)??{get(){return this[e]},set(t){this[e]=t}};return{get:a,set(e){const r=a?.call(this);s?.call(this,e),this.requestUpdate(t,r,i)},configurable:!0,enumerable:!0}}static getPropertyOptions(t){return this.elementProperties.get(t)??x}static _$Ei(){if(this.hasOwnProperty(b("elementProperties")))return;const t=_(this);t.finalize(),void 0!==t.l&&(this.l=[...t.l]),this.elementProperties=new Map(t.elementProperties)}static finalize(){if(this.hasOwnProperty(b("finalized")))return;if(this.finalized=!0,this._$Ei(),this.hasOwnProperty(b("properties"))){const t=this.properties,e=[...g(t),...p(t)];for(const i of e)this.createProperty(i,t[i])}const t=this[Symbol.metadata];if(null!==t){const e=litPropertyMetadata.get(t);if(void 0!==e)for(const[t,i]of e)this.elementProperties.set(t,i)}this._$Eh=new Map;for(const[t,e]of this.elementProperties){const i=this._$Eu(t,e);void 0!==i&&this._$Eh.set(i,t)}this.elementStyles=this.finalizeStyles(this.styles)}static finalizeStyles(t){const e=[];if(Array.isArray(t)){const i=new Set(t.flat(1/0).reverse());for(const t of i)e.unshift(h(t))}else void 0!==t&&e.push(h(t));return e}static _$Eu(t,e){const i=e.attribute;return!1===i?void 0:"string"==typeof i?i:"string"==typeof t?t.toLowerCase():void 0}constructor(){super(),this._$Ep=void 0,this.isUpdatePending=!1,this.hasUpdated=!1,this._$Em=null,this._$Ev()}_$Ev(){this._$ES=new Promise(t=>this.enableUpdating=t),this._$AL=new Map,this._$E_(),this.requestUpdate(),this.constructor.l?.forEach(t=>t(this))}addController(t){(this._$EO??=new Set).add(t),void 0!==this.renderRoot&&this.isConnected&&t.hostConnected?.()}removeController(t){this._$EO?.delete(t)}_$E_(){const t=new Map,e=this.constructor.elementProperties;for(const i of e.keys())this.hasOwnProperty(i)&&(t.set(i,this[i]),delete this[i]);t.size>0&&(this._$Ep=t)}createRenderRoot(){const t=this.shadowRoot??this.attachShadow(this.constructor.shadowRootOptions);return((t,e)=>{if(o)t.adoptedStyleSheets=e.map(t=>t instanceof CSSStyleSheet?t:t.styleSheet);else for(const i of e){const e=document.createElement("style"),a=r.litNonce;void 0!==a&&e.setAttribute("nonce",a),e.textContent=i.cssText,t.appendChild(e)}})(t,this.constructor.elementStyles),t}connectedCallback(){this.renderRoot??=this.createRenderRoot(),this.enableUpdating(!0),this._$EO?.forEach(t=>t.hostConnected?.())}enableUpdating(t){}disconnectedCallback(){this._$EO?.forEach(t=>t.hostDisconnected?.())}attributeChangedCallback(t,e,i){this._$AK(t,i)}_$ET(t,e){const i=this.constructor.elementProperties.get(t),a=this.constructor._$Eu(t,i);if(void 0!==a&&!0===i.reflect){const s=(void 0!==i.converter?.toAttribute?i.converter:A).toAttribute(e,i.type);this._$Em=t,null==s?this.removeAttribute(a):this.setAttribute(a,s),this._$Em=null}}_$AK(t,e){const i=this.constructor,a=i._$Eh.get(t);if(void 0!==a&&this._$Em!==a){const t=i.getPropertyOptions(a),s="function"==typeof t.converter?{fromAttribute:t.converter}:void 0!==t.converter?.fromAttribute?t.converter:A;this._$Em=a;const r=s.fromAttribute(e,t.type);this[a]=r??this._$Ej?.get(a)??r,this._$Em=null}}requestUpdate(t,e,i){if(void 0!==t){const a=this.constructor,s=this[t];if(i??=a.getPropertyOptions(t),!((i.hasChanged??$)(s,e)||i.useDefault&&i.reflect&&s===this._$Ej?.get(t)&&!this.hasAttribute(a._$Eu(t,i))))return;this.C(t,e,i)}!1===this.isUpdatePending&&(this._$ES=this._$EP())}C(t,e,{useDefault:i,reflect:a,wrapped:s},r){i&&!(this._$Ej??=new Map).has(t)&&(this._$Ej.set(t,r??e??this[t]),!0!==s||void 0!==r)||(this._$AL.has(t)||(this.hasUpdated||i||(e=void 0),this._$AL.set(t,e)),!0===a&&this._$Em!==t&&(this._$Eq??=new Set).add(t))}async _$EP(){this.isUpdatePending=!0;try{await this._$ES}catch(t){Promise.reject(t)}const t=this.scheduleUpdate();return null!=t&&await t,!this.isUpdatePending}scheduleUpdate(){return this.performUpdate()}performUpdate(){if(!this.isUpdatePending)return;if(!this.hasUpdated){if(this.renderRoot??=this.createRenderRoot(),this._$Ep){for(const[t,e]of this._$Ep)this[t]=e;this._$Ep=void 0}const t=this.constructor.elementProperties;if(t.size>0)for(const[e,i]of t){const{wrapped:t}=i,a=this[e];!0!==t||this._$AL.has(e)||void 0===a||this.C(e,void 0,i,a)}}let t=!1;const e=this._$AL;try{t=this.shouldUpdate(e),t?(this.willUpdate(e),this._$EO?.forEach(t=>t.hostUpdate?.()),this.update(e)):this._$EM()}catch(e){throw t=!1,this._$EM(),e}t&&this._$AE(e)}willUpdate(t){}_$AE(t){this._$EO?.forEach(t=>t.hostUpdated?.()),this.hasUpdated||(this.hasUpdated=!0,this.firstUpdated(t)),this.updated(t)}_$EM(){this._$AL=new Map,this.isUpdatePending=!1}get updateComplete(){return this.getUpdateComplete()}getUpdateComplete(){return this._$ES}shouldUpdate(t){return!0}update(t){this._$Eq&&=this._$Eq.forEach(t=>this._$ET(t,this[t])),this._$EM()}updated(t){}firstUpdated(t){}};I.elementStyles=[],I.shadowRootOptions={mode:"open"},I[b("elementProperties")]=new Map,I[b("finalized")]=new Map,w?.({ReactiveElement:I}),(f.reactiveElementVersions??=[]).push("2.1.1");const E=globalThis,S=E.trustedTypes,D=S?S.createPolicy("lit-html",{createHTML:t=>t}):void 0,C="$lit$",M=`lit$${Math.random().toFixed(9).slice(2)}$`,k="?"+M,F=`<${k}>`,P=document,T=()=>P.createComment(""),L=t=>null===t||"object"!=typeof t&&"function"!=typeof t,R=Array.isArray,W="[ \t\n\f\r]",O=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,z=/-->/g,H=/>/g,N=RegExp(`>|${W}(?:([^\\s"'>=/]+)(${W}*=${W}*(?:[^ \t\n\f\r"'\`<>=]|("|')|))|$)`,"g"),U=/'/g,j=/"/g,V=/^(?:script|style|textarea|title)$/i,q=(t=>(e,...i)=>({_$litType$:t,strings:e,values:i}))(1),G=Symbol.for("lit-noChange"),B=Symbol.for("lit-nothing"),K=new WeakMap,J=P.createTreeWalker(P,129);function Z(t,e){if(!R(t)||!t.hasOwnProperty("raw"))throw Error("invalid template strings array");return void 0!==D?D.createHTML(e):e}const X=(t,e)=>{const i=t.length-1,a=[];let s,r=2===e?"<svg>":3===e?"<math>":"",o=O;for(let e=0;e<i;e++){const i=t[e];let n,d,l=-1,h=0;for(;h<i.length&&(o.lastIndex=h,d=o.exec(i),null!==d);)h=o.lastIndex,o===O?"!--"===d[1]?o=z:void 0!==d[1]?o=H:void 0!==d[2]?(V.test(d[2])&&(s=RegExp("</"+d[2],"g")),o=N):void 0!==d[3]&&(o=N):o===N?">"===d[0]?(o=s??O,l=-1):void 0===d[1]?l=-2:(l=o.lastIndex-d[2].length,n=d[1],o=void 0===d[3]?N:'"'===d[3]?j:U):o===j||o===U?o=N:o===z||o===H?o=O:(o=N,s=void 0);const c=o===N&&t[e+1].startsWith("/>")?" ":"";r+=o===O?i+F:l>=0?(a.push(n),i.slice(0,l)+C+i.slice(l)+M+c):i+M+(-2===l?e:c)}return[Z(t,r+(t[i]||"<?>")+(2===e?"</svg>":3===e?"</math>":"")),a]};class Y{constructor({strings:t,_$litType$:e},i){let a;this.parts=[];let s=0,r=0;const o=t.length-1,n=this.parts,[d,l]=X(t,e);if(this.el=Y.createElement(d,i),J.currentNode=this.el.content,2===e||3===e){const t=this.el.content.firstChild;t.replaceWith(...t.childNodes)}for(;null!==(a=J.nextNode())&&n.length<o;){if(1===a.nodeType){if(a.hasAttributes())for(const t of a.getAttributeNames())if(t.endsWith(C)){const e=l[r++],i=a.getAttribute(t).split(M),o=/([.?@])?(.*)/.exec(e);n.push({type:1,index:s,name:o[2],strings:i,ctor:"."===o[1]?at:"?"===o[1]?st:"@"===o[1]?rt:it}),a.removeAttribute(t)}else t.startsWith(M)&&(n.push({type:6,index:s}),a.removeAttribute(t));if(V.test(a.tagName)){const t=a.textContent.split(M),e=t.length-1;if(e>0){a.textContent=S?S.emptyScript:"";for(let i=0;i<e;i++)a.append(t[i],T()),J.nextNode(),n.push({type:2,index:++s});a.append(t[e],T())}}}else if(8===a.nodeType)if(a.data===k)n.push({type:2,index:s});else{let t=-1;for(;-1!==(t=a.data.indexOf(M,t+1));)n.push({type:7,index:s}),t+=M.length-1}s++}}static createElement(t,e){const i=P.createElement("template");return i.innerHTML=t,i}}function Q(t,e,i=t,a){if(e===G)return e;let s=void 0!==a?i._$Co?.[a]:i._$Cl;const r=L(e)?void 0:e._$litDirective$;return s?.constructor!==r&&(s?._$AO?.(!1),void 0===r?s=void 0:(s=new r(t),s._$AT(t,i,a)),void 0!==a?(i._$Co??=[])[a]=s:i._$Cl=s),void 0!==s&&(e=Q(t,s._$AS(t,e.values),s,a)),e}class tt{constructor(t,e){this._$AV=[],this._$AN=void 0,this._$AD=t,this._$AM=e}get parentNode(){return this._$AM.parentNode}get _$AU(){return this._$AM._$AU}u(t){const{el:{content:e},parts:i}=this._$AD,a=(t?.creationScope??P).importNode(e,!0);J.currentNode=a;let s=J.nextNode(),r=0,o=0,n=i[0];for(;void 0!==n;){if(r===n.index){let e;2===n.type?e=new et(s,s.nextSibling,this,t):1===n.type?e=new n.ctor(s,n.name,n.strings,this,t):6===n.type&&(e=new ot(s,this,t)),this._$AV.push(e),n=i[++o]}r!==n?.index&&(s=J.nextNode(),r++)}return J.currentNode=P,a}p(t){let e=0;for(const i of this._$AV)void 0!==i&&(void 0!==i.strings?(i._$AI(t,i,e),e+=i.strings.length-2):i._$AI(t[e])),e++}}class et{get _$AU(){return this._$AM?._$AU??this._$Cv}constructor(t,e,i,a){this.type=2,this._$AH=B,this._$AN=void 0,this._$AA=t,this._$AB=e,this._$AM=i,this.options=a,this._$Cv=a?.isConnected??!0}get parentNode(){let t=this._$AA.parentNode;const e=this._$AM;return void 0!==e&&11===t?.nodeType&&(t=e.parentNode),t}get startNode(){return this._$AA}get endNode(){return this._$AB}_$AI(t,e=this){t=Q(this,t,e),L(t)?t===B||null==t||""===t?(this._$AH!==B&&this._$AR(),this._$AH=B):t!==this._$AH&&t!==G&&this._(t):void 0!==t._$litType$?this.$(t):void 0!==t.nodeType?this.T(t):(t=>R(t)||"function"==typeof t?.[Symbol.iterator])(t)?this.k(t):this._(t)}O(t){return this._$AA.parentNode.insertBefore(t,this._$AB)}T(t){this._$AH!==t&&(this._$AR(),this._$AH=this.O(t))}_(t){this._$AH!==B&&L(this._$AH)?this._$AA.nextSibling.data=t:this.T(P.createTextNode(t)),this._$AH=t}$(t){const{values:e,_$litType$:i}=t,a="number"==typeof i?this._$AC(t):(void 0===i.el&&(i.el=Y.createElement(Z(i.h,i.h[0]),this.options)),i);if(this._$AH?._$AD===a)this._$AH.p(e);else{const t=new tt(a,this),i=t.u(this.options);t.p(e),this.T(i),this._$AH=t}}_$AC(t){let e=K.get(t.strings);return void 0===e&&K.set(t.strings,e=new Y(t)),e}k(t){R(this._$AH)||(this._$AH=[],this._$AR());const e=this._$AH;let i,a=0;for(const s of t)a===e.length?e.push(i=new et(this.O(T()),this.O(T()),this,this.options)):i=e[a],i._$AI(s),a++;a<e.length&&(this._$AR(i&&i._$AB.nextSibling,a),e.length=a)}_$AR(t=this._$AA.nextSibling,e){for(this._$AP?.(!1,!0,e);t!==this._$AB;){const e=t.nextSibling;t.remove(),t=e}}setConnected(t){void 0===this._$AM&&(this._$Cv=t,this._$AP?.(t))}}class it{get tagName(){return this.element.tagName}get _$AU(){return this._$AM._$AU}constructor(t,e,i,a,s){this.type=1,this._$AH=B,this._$AN=void 0,this.element=t,this.name=e,this._$AM=a,this.options=s,i.length>2||""!==i[0]||""!==i[1]?(this._$AH=Array(i.length-1).fill(new String),this.strings=i):this._$AH=B}_$AI(t,e=this,i,a){const s=this.strings;let r=!1;if(void 0===s)t=Q(this,t,e,0),r=!L(t)||t!==this._$AH&&t!==G,r&&(this._$AH=t);else{const a=t;let o,n;for(t=s[0],o=0;o<s.length-1;o++)n=Q(this,a[i+o],e,o),n===G&&(n=this._$AH[o]),r||=!L(n)||n!==this._$AH[o],n===B?t=B:t!==B&&(t+=(n??"")+s[o+1]),this._$AH[o]=n}r&&!a&&this.j(t)}j(t){t===B?this.element.removeAttribute(this.name):this.element.setAttribute(this.name,t??"")}}class at extends it{constructor(){super(...arguments),this.type=3}j(t){this.element[this.name]=t===B?void 0:t}}class st extends it{constructor(){super(...arguments),this.type=4}j(t){this.element.toggleAttribute(this.name,!!t&&t!==B)}}class rt extends it{constructor(t,e,i,a,s){super(t,e,i,a,s),this.type=5}_$AI(t,e=this){if((t=Q(this,t,e,0)??B)===G)return;const i=this._$AH,a=t===B&&i!==B||t.capture!==i.capture||t.once!==i.once||t.passive!==i.passive,s=t!==B&&(i===B||a);a&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,t),this._$AH=t}handleEvent(t){"function"==typeof this._$AH?this._$AH.call(this.options?.host??this.element,t):this._$AH.handleEvent(t)}}class ot{constructor(t,e,i){this.element=t,this.type=6,this._$AN=void 0,this._$AM=e,this.options=i}get _$AU(){return this._$AM._$AU}_$AI(t){Q(this,t)}}const nt=E.litHtmlPolyfillSupport;nt?.(Y,et),(E.litHtmlVersions??=[]).push("3.3.1");const dt=globalThis;class lt extends I{constructor(){super(...arguments),this.renderOptions={host:this},this._$Do=void 0}createRenderRoot(){const t=super.createRenderRoot();return this.renderOptions.renderBefore??=t.firstChild,t}update(t){const e=this.render();this.hasUpdated||(this.renderOptions.isConnected=this.isConnected),super.update(t),this._$Do=((t,e,i)=>{const a=i?.renderBefore??e;let s=a._$litPart$;if(void 0===s){const t=i?.renderBefore??null;a._$litPart$=s=new et(e.insertBefore(T(),t),t,void 0,i??{})}return s._$AI(t),s})(e,this.renderRoot,this.renderOptions)}connectedCallback(){super.connectedCallback(),this._$Do?.setConnected(!0)}disconnectedCallback(){super.disconnectedCallback(),this._$Do?.setConnected(!1)}render(){return G}}lt._$litElement$=!0,lt.finalized=!0,dt.litElementHydrateSupport?.({LitElement:lt});const ht=dt.litElementPolyfillSupport;ht?.({LitElement:lt}),(dt.litElementVersions??=[]).push("4.2.1");const ct=t=>(e,i)=>{void 0!==i?i.addInitializer(()=>{customElements.define(t,e)}):customElements.define(t,e)},ut={attribute:!0,type:String,converter:A,reflect:!1,hasChanged:$},mt=(t=ut,e,i)=>{const{kind:a,metadata:s}=i;let r=globalThis.litPropertyMetadata.get(s);if(void 0===r&&globalThis.litPropertyMetadata.set(s,r=new Map),"setter"===a&&((t=Object.create(t)).wrapped=!0),r.set(i.name,t),"accessor"===a){const{name:a}=i;return{set(i){const s=e.get.call(this);e.set.call(this,i),this.requestUpdate(a,s,t)},init(e){return void 0!==e&&this.C(a,void 0,t,e),e}}}if("setter"===a){const{name:a}=i;return function(i){const s=this[a];e.call(this,i),this.requestUpdate(a,s,t)}}throw Error("Unsupported decorator location: "+a)};function gt(t){return(e,i)=>"object"==typeof i?mt(t,e,i):((t,e,i)=>{const a=e.hasOwnProperty(i);return e.constructor.createProperty(i,t),a?Object.getOwnPropertyDescriptor(e,i):void 0})(t,e,i)}function pt(t){return gt({...t,state:!0,attribute:!1})}const _t=[{code:"en",data:{"ui.card.meteogram.attribution":"Data from","ui.card.meteogram.status.cached":"cached","ui.card.meteogram.status.success":"success","ui.card.meteogram.status.failed":"failed","ui.card.meteogram.status_panel":"Status Panel","ui.card.meteogram.status.expires_at":"Expires At","ui.card.meteogram.status.last_render":"Last Render","ui.card.meteogram.status.last_fingerprint_miss":"Last Fingerprint Miss","ui.card.meteogram.status.last_data_fetch":"Last Data Fetch","ui.card.meteogram.status.last_cached":"Last cached","ui.card.meteogram.status.api_success":"API Success","ui.card.meteogram.error":"Weather data not available","ui.card.meteogram.attributes.temperature":"Temperature","ui.card.meteogram.attributes.air_pressure":"Pressure","ui.card.meteogram.attributes.precipitation":"Precipitation","ui.card.meteogram.attributes.cloud_coverage":"Cloud Cover","ui.card.meteogram.attributes.weather_icons":"Show Weather Icons","ui.card.meteogram.attributes.wind":"Show Wind","ui.card.meteogram.attributes.dense_icons":"Dense Weather Icons (every hour)","ui.card.meteogram.attributes.fill_container":"Fill Container","ui.editor.meteogram.title":"Meteogram Card Settings","ui.editor.meteogram.title_label":"Title","ui.editor.meteogram.location_info":"Location coordinates will be used to fetch weather data directly from Met.no API.","ui.editor.meteogram.using_ha_location":"Using Home Assistant's location by default.","ui.editor.meteogram.latitude":"Latitude","ui.editor.meteogram.longitude":"Longitude","ui.editor.meteogram.default":"Default","ui.editor.meteogram.leave_empty":"Leave empty to use Home Assistant's configured location","ui.editor.meteogram.display_options":"Display Options","ui.editor.meteogram.meteogram_length":"Meteogram Length","ui.editor.meteogram.hours_8":"8 hours","ui.editor.meteogram.hours_12":"12 hours","ui.editor.meteogram.hours_24":"24 hours","ui.editor.meteogram.hours_48":"48 hours","ui.editor.meteogram.hours_54":"54 hours","ui.editor.meteogram.hours_max":"Max available","ui.editor.meteogram.choose_hours":"Choose how many hours to show in the meteogram","ui.editor.meteogram.attributes.cloud_coverage":"Show Cloud Cover","ui.editor.meteogram.attributes.air_pressure":"Show Pressure","ui.editor.meteogram.attributes.precipitation":"Show Precipitation","ui.editor.meteogram.attributes.weather_icons":"Show Weather Icons","ui.editor.meteogram.attributes.wind":"Show Wind","ui.editor.meteogram.attributes.dense_icons":"Dense Weather Icons (every hour)","ui.editor.meteogram.attributes.fill_container":"Fill Container"}},{code:"nb",data:{"ui.card.meteogram.attribution":"Data fra","ui.card.meteogram.status.cached":"bufret","ui.card.meteogram.status.success":"suksess","ui.card.meteogram.status.failed":"feilet","ui.card.meteogram.status_panel":"Statuspanel","ui.card.meteogram.status.expires_at":"Utløper","ui.card.meteogram.status.last_render":"Sist tegnet","ui.card.meteogram.status.last_fingerprint_miss":"Siste fingerprint-miss","ui.card.meteogram.status.last_data_fetch":"Siste datainnhenting","ui.card.meteogram.status.last_cached":"Sist bufret","ui.card.meteogram.status.api_success":"API-suksess","ui.card.meteogram.error":"Værdata ikke tilgjengelig","ui.card.meteogram.attributes.temperature":"Temperatur","ui.card.meteogram.attributes.air_pressure":"Lufttrykk","ui.card.meteogram.attributes.precipitation":"Nedbør","ui.card.meteogram.attributes.cloud_coverage":"Skydekke","ui.card.meteogram.attributes.weather_icons":"Vis værikoner","ui.card.meteogram.attributes.wind":"Vis vind","ui.card.meteogram.attributes.dense_icons":"Tette værikoner (hver time)","ui.card.meteogram.attributes.fill_container":"Fyll beholder","ui.editor.meteogram.title":"Meteogram-kortinnstillinger","ui.editor.meteogram.title_label":"Tittel","ui.editor.meteogram.location_info":"Lokasjonskoordinater brukes for å hente værdata direkte fra Met.no API.","ui.editor.meteogram.using_ha_location":"Bruker Home Assistants lokasjon som standard.","ui.editor.meteogram.latitude":"Breddegrad","ui.editor.meteogram.longitude":"Lengdegrad","ui.editor.meteogram.default":"Standard","ui.editor.meteogram.leave_empty":"La stå tomt for å bruke Home Assistants konfigurerte lokasjon","ui.editor.meteogram.display_options":"Visningsvalg","ui.editor.meteogram.meteogram_length":"Meteogramlengde","ui.editor.meteogram.hours_8":"8 timer","ui.editor.meteogram.hours_12":"12 timer","ui.editor.meteogram.hours_24":"24 timer","ui.editor.meteogram.hours_48":"48 timer","ui.editor.meteogram.hours_54":"54 timer","ui.editor.meteogram.hours_max":"Maks tilgjengelig","ui.editor.meteogram.choose_hours":"Velg hvor mange timer som skal vises i meteogrammet","ui.editor.meteogram.attributes.cloud_coverage":"Vis skydekke","ui.editor.meteogram.attributes.air_pressure":"Vis lufttrykk","ui.editor.meteogram.attributes.precipitation":"Vis nedbør","ui.editor.meteogram.attributes.weather_icons":"Vis værikoner","ui.editor.meteogram.attributes.wind":"Vis vind","ui.editor.meteogram.attributes.dense_icons":"Tette værikoner (hver time)","ui.editor.meteogram.attributes.fill_container":"Fyll beholder"}},{code:"es",data:{"ui.card.meteogram.attribution":"Datos de","ui.card.meteogram.status.cached":"en caché","ui.card.meteogram.status.success":"éxito","ui.card.meteogram.status.failed":"fallido","ui.card.meteogram.status_panel":"Panel de estado","ui.card.meteogram.status.expires_at":"Expira en","ui.card.meteogram.status.last_render":"Última representación","ui.card.meteogram.status.last_fingerprint_miss":"Última huella fallida","ui.card.meteogram.status.last_data_fetch":"Última obtención de datos","ui.card.meteogram.status.last_cached":"Último en caché","ui.card.meteogram.status.api_success":"Éxito de la API","ui.card.meteogram.error":"Datos meteorológicos no disponibles","ui.card.meteogram.attributes.temperature":"Temperatura","ui.card.meteogram.attributes.air_pressure":"Presión","ui.card.meteogram.attributes.precipitation":"Precipitación","ui.card.meteogram.attributes.cloud_coverage":"Cobertura de nubes","ui.card.meteogram.attributes.weather_icons":"Mostrar iconos meteorológicos","ui.card.meteogram.attributes.wind":"Mostrar viento","ui.card.meteogram.attributes.dense_icons":"Iconos meteorológicos densos (cada hora)","ui.card.meteogram.attributes.fill_container":"Rellenar el contenedor","ui.editor.meteogram.title":"Configuración de la tarjeta Meteograma","ui.editor.meteogram.title_label":"Título","ui.editor.meteogram.location_info":"Las coordenadas se utilizarán para obtener datos meteorológicos directamente de la API de Met.no.","ui.editor.meteogram.using_ha_location":"Usando la ubicación de Home Assistant por defecto.","ui.editor.meteogram.latitude":"Latitud","ui.editor.meteogram.longitude":"Longitud","ui.editor.meteogram.default":"Predeterminado","ui.editor.meteogram.leave_empty":"Dejar vacío para usar la ubicación configurada en Home Assistant","ui.editor.meteogram.display_options":"Opciones de visualización","ui.editor.meteogram.meteogram_length":"Duración del meteograma","ui.editor.meteogram.hours_8":"8 horas","ui.editor.meteogram.hours_12":"12 horas","ui.editor.meteogram.hours_24":"24 horas","ui.editor.meteogram.hours_48":"48 horas","ui.editor.meteogram.hours_54":"54 horas","ui.editor.meteogram.hours_max":"Máximo disponible","ui.editor.meteogram.choose_hours":"Elija cuántas horas mostrar en el meteograma","ui.editor.meteogram.attributes.cloud_coverage":"Mostrar cobertura de nubes","ui.editor.meteogram.attributes.air_pressure":"Mostrar presión","ui.editor.meteogram.attributes.precipitation":"Mostrar precipitación","ui.editor.meteogram.attributes.weather_icons":"Mostrar iconos meteorológicos","ui.editor.meteogram.attributes.wind":"Mostrar viento","ui.editor.meteogram.attributes.dense_icons":"Iconos meteorológicos densos (cada hora)","ui.editor.meteogram.attributes.fill_container":"Rellenar el contenedor"}},{code:"it",data:{"ui.card.meteogram.attribution":"Dati da","ui.card.meteogram.status.cached":"memorizzato","ui.card.meteogram.status.success":"successo","ui.card.meteogram.status.failed":"fallito","ui.card.meteogram.status_panel":"Pannello di stato","ui.card.meteogram.status.expires_at":"Scade il","ui.card.meteogram.status.last_render":"Ultima visualizzazione","ui.card.meteogram.status.last_fingerprint_miss":"Ultima impronta mancante","ui.card.meteogram.status.last_data_fetch":"Ultimo recupero dati","ui.card.meteogram.status.last_cached":"Ultimo memorizzato","ui.card.meteogram.status.api_success":"Successo API","ui.card.meteogram.error":"Dati meteorologici non disponibili","ui.card.meteogram.attributes.temperature":"Temperatura","ui.card.meteogram.attributes.air_pressure":"Pressione","ui.card.meteogram.attributes.precipitation":"Precipitazione","ui.card.meteogram.attributes.cloud_coverage":"Copertura nuvolosa","ui.card.meteogram.attributes.weather_icons":"Mostra icone meteo","ui.card.meteogram.attributes.wind":"Mostra vento","ui.card.meteogram.attributes.dense_icons":"Icone meteo dense (ogni ora)","ui.card.meteogram.attributes.fill_container":"Riempi contenitore","ui.editor.meteogram.title":"Impostazioni della scheda Meteogramma","ui.editor.meteogram.title_label":"Titolo","ui.editor.meteogram.location_info":"Le coordinate verranno utilizzate per ottenere i dati meteorologici direttamente dall'API Met.no.","ui.editor.meteogram.using_ha_location":"Utilizzo della posizione di Home Assistant come predefinita.","ui.editor.meteogram.latitude":"Latitudine","ui.editor.meteogram.longitude":"Longitudine","ui.editor.meteogram.default":"Predefinito","ui.editor.meteogram.leave_empty":"Lascia vuoto per usare la posizione configurata in Home Assistant","ui.editor.meteogram.display_options":"Opzioni di visualizzazione","ui.editor.meteogram.meteogram_length":"Durata meteogramma","ui.editor.meteogram.hours_8":"8 ore","ui.editor.meteogram.hours_12":"12 ore","ui.editor.meteogram.hours_24":"24 ore","ui.editor.meteogram.hours_48":"48 ore","ui.editor.meteogram.hours_54":"54 ore","ui.editor.meteogram.hours_max":"Massimo disponibile","ui.editor.meteogram.choose_hours":"Scegli quante ore mostrare nel meteogramma","ui.editor.meteogram.attributes.cloud_coverage":"Mostra copertura nuvolosa","ui.editor.meteogram.attributes.air_pressure":"Mostra pressione","ui.editor.meteogram.attributes.precipitation":"Mostra precipitazione","ui.editor.meteogram.attributes.weather_icons":"Mostra icone meteo","ui.editor.meteogram.attributes.wind":"Mostra vento","ui.editor.meteogram.attributes.dense_icons":"Icone meteo dense (ogni ora)","ui.editor.meteogram.attributes.fill_container":"Riempi contenitore"}},{code:"de",data:{"ui.card.meteogram.attribution":"Daten von","ui.card.meteogram.status.cached":"zwischengespeichert","ui.card.meteogram.status.success":"Erfolg","ui.card.meteogram.status.failed":"Fehler","ui.card.meteogram.status_panel":"Statuspanel","ui.card.meteogram.status.expires_at":"Ablaufdatum","ui.card.meteogram.status.last_render":"Letzte Darstellung","ui.card.meteogram.status.last_fingerprint_miss":"Letzter Fingerabdruck-Fehler","ui.card.meteogram.status.last_data_fetch":"Letzter Datenabruf","ui.card.meteogram.status.last_cached":"Zuletzt zwischengespeichert","ui.card.meteogram.status.api_success":"API-Erfolg","ui.card.meteogram.error":"Wetterdaten nicht verfügbar","ui.card.meteogram.attributes.temperature":"Temperatur","ui.card.meteogram.attributes.air_pressure":"Luftdruck","ui.card.meteogram.attributes.precipitation":"Niederschlag","ui.card.meteogram.attributes.cloud_coverage":"Wolkenbedeckung","ui.card.meteogram.attributes.weather_icons":"Wetter-Symbole anzeigen","ui.card.meteogram.attributes.wind":"Wind anzeigen","ui.card.meteogram.attributes.dense_icons":"Dichte Wettersymbole (jede Stunde)","ui.card.meteogram.attributes.fill_container":"Container ausfüllen","ui.editor.meteogram.title":"Meteogramm-Karteneinstellungen","ui.editor.meteogram.title_label":"Titel","ui.editor.meteogram.location_info":"Die Koordinaten werden verwendet, um Wetterdaten direkt von der Met.no API abzurufen.","ui.editor.meteogram.using_ha_location":"Standardmäßig wird der Standort von Home Assistant verwendet.","ui.editor.meteogram.latitude":"Breitengrad","ui.editor.meteogram.longitude":"Längengrad","ui.editor.meteogram.default":"Standard","ui.editor.meteogram.leave_empty":"Leer lassen, um die konfigurierte Position von Home Assistant zu verwenden","ui.editor.meteogram.display_options":"Anzeigeoptionen","ui.editor.meteogram.meteogram_length":"Meteogramm-Länge","ui.editor.meteogram.hours_8":"8 Stunden","ui.editor.meteogram.hours_12":"12 Stunden","ui.editor.meteogram.hours_24":"24 Stunden","ui.editor.meteogram.hours_48":"48 Stunden","ui.editor.meteogram.hours_54":"54 Stunden","ui.editor.meteogram.hours_max":"Maximal verfügbar","ui.editor.meteogram.choose_hours":"Wählen Sie, wie viele Stunden im Meteogramm angezeigt werden sollen","ui.editor.meteogram.attributes.cloud_coverage":"Wolkenbedeckung anzeigen","ui.editor.meteogram.attributes.air_pressure":"Luftdruck anzeigen","ui.editor.meteogram.attributes.precipitation":"Niederschlag anzeigen","ui.editor.meteogram.attributes.weather_icons":"Wetter-Symbole anzeigen","ui.editor.meteogram.attributes.wind":"Wind anzeigen","ui.editor.meteogram.attributes.dense_icons":"Dichte Wettersymbole (jede Stunde)","ui.editor.meteogram.attributes.fill_container":"Container ausfüllen"}},{code:"fr",data:{"ui.card.meteogram.attribution":"Données de","ui.card.meteogram.status.cached":"mis en cache","ui.card.meteogram.status.success":"succès","ui.card.meteogram.status.failed":"échec","ui.card.meteogram.status_panel":"Panneau d'état","ui.card.meteogram.status.expires_at":"Expire à","ui.card.meteogram.status.last_render":"Dernier rendu","ui.card.meteogram.status.last_fingerprint_miss":"Dernière empreinte manquée","ui.card.meteogram.status.last_data_fetch":"Dernière récupération de données","ui.card.meteogram.status.last_cached":"Dernière mise en cache","ui.card.meteogram.status.api_success":"Succès API","ui.card.meteogram.error":"Données météo non disponibles","ui.card.meteogram.attributes.temperature":"Température","ui.card.meteogram.attributes.air_pressure":"Pression","ui.card.meteogram.attributes.precipitation":"Précipitations","ui.card.meteogram.attributes.cloud_coverage":"Couverture nuageuse","ui.card.meteogram.attributes.weather_icons":"Afficher les icônes météo","ui.card.meteogram.attributes.wind":"Afficher le vent","ui.card.meteogram.attributes.dense_icons":"Icônes météo denses (chaque heure)","ui.card.meteogram.attributes.fill_container":"Remplir le conteneur","ui.editor.meteogram.title":"Paramètres de la carte Météogramme","ui.editor.meteogram.title_label":"Titre","ui.editor.meteogram.location_info":"Les coordonnées seront utilisées pour obtenir les données météo directement depuis l'API Met.no.","ui.editor.meteogram.using_ha_location":"Utilisation de la localisation Home Assistant par défaut.","ui.editor.meteogram.latitude":"Latitude","ui.editor.meteogram.longitude":"Longitude","ui.editor.meteogram.default":"Défaut","ui.editor.meteogram.leave_empty":"Laisser vide pour utiliser la localisation configurée dans Home Assistant","ui.editor.meteogram.display_options":"Options d'affichage","ui.editor.meteogram.meteogram_length":"Durée du météogramme","ui.editor.meteogram.hours_8":"8 heures","ui.editor.meteogram.hours_12":"12 heures","ui.editor.meteogram.hours_24":"24 heures","ui.editor.meteogram.hours_48":"48 heures","ui.editor.meteogram.hours_54":"54 heures","ui.editor.meteogram.hours_max":"Maximum disponible","ui.editor.meteogram.choose_hours":"Choisissez combien d'heures afficher dans le météogramme","ui.editor.meteogram.attributes.cloud_coverage":"Afficher la couverture nuageuse","ui.editor.meteogram.attributes.air_pressure":"Afficher la pression","ui.editor.meteogram.attributes.precipitation":"Afficher les précipitations","ui.editor.meteogram.attributes.weather_icons":"Afficher les icônes météo","ui.editor.meteogram.attributes.wind":"Afficher le vent","ui.editor.meteogram.attributes.dense_icons":"Icônes météo denses (chaque heure)","ui.editor.meteogram.attributes.fill_container":"Remplir le conteneur"}},{code:"hr",data:{"ui.card.meteogram.attribution":"Podaci od","ui.card.meteogram.status.cached":"pohranjeno","ui.card.meteogram.status.success":"uspjeh","ui.card.meteogram.status.failed":"neuspjeh","ui.card.meteogram.status_panel":"Panel statusa","ui.card.meteogram.status.expires_at":"Istječe","ui.card.meteogram.status.last_render":"Zadnje prikazivanje","ui.card.meteogram.status.last_fingerprint_miss":"Zadnji promašaj otiska","ui.card.meteogram.status.last_data_fetch":"Zadnje dohvaćanje podataka","ui.card.meteogram.status.last_cached":"Zadnje pohranjeno","ui.card.meteogram.status.api_success":"Uspjeh API-a","ui.card.meteogram.error":"Podaci o vremenu nisu dostupni","ui.card.meteogram.attributes.temperature":"Temperatura","ui.card.meteogram.attributes.air_pressure":"Tlak zraka","ui.card.meteogram.attributes.precipitation":"Oborine","ui.card.meteogram.attributes.cloud_coverage":"Naoblaka","ui.card.meteogram.attributes.weather_icons":"Prikaži ikone vremena","ui.card.meteogram.attributes.wind":"Prikaži vjetar","ui.card.meteogram.attributes.dense_icons":"Guste ikone vremena (svaki sat)","ui.card.meteogram.attributes.fill_container":"Ispuni spremnik","ui.editor.meteogram.title":"Postavke Meteogram kartice","ui.editor.meteogram.title_label":"Naslov","ui.editor.meteogram.location_info":"Koordinate lokacije koriste se za dohvaćanje podataka o vremenu izravno s Met.no API-a.","ui.editor.meteogram.using_ha_location":"Koristi se zadana lokacija Home Assistanta.","ui.editor.meteogram.latitude":"Geografska širina","ui.editor.meteogram.longitude":"Geografska dužina","ui.editor.meteogram.default":"Zadano","ui.editor.meteogram.leave_empty":"Ostavite prazno za korištenje zadane lokacije Home Assistanta","ui.editor.meteogram.display_options":"Opcije prikaza","ui.editor.meteogram.meteogram_length":"Duljina meteograma","ui.editor.meteogram.hours_8":"8 sati","ui.editor.meteogram.hours_12":"12 sati","ui.editor.meteogram.hours_24":"24 sata","ui.editor.meteogram.hours_48":"48 sati","ui.editor.meteogram.hours_54":"54 sata","ui.editor.meteogram.hours_max":"Maksimalno dostupno","ui.editor.meteogram.choose_hours":"Odaberite koliko sati prikazati u meteogramu","ui.editor.meteogram.attributes.cloud_coverage":"Prikaži naoblaku","ui.editor.meteogram.attributes.air_pressure":"Prikaži tlak zraka","ui.editor.meteogram.attributes.precipitation":"Prikaži oborine","ui.editor.meteogram.attributes.weather_icons":"Prikaži ikone vremena","ui.editor.meteogram.attributes.wind":"Prikaži vjetar","ui.editor.meteogram.attributes.dense_icons":"Guste ikone vremena (svaki sat)","ui.editor.meteogram.attributes.fill_container":"Ispuni spremnik"}}];function ft(t,e,i){var a;if(t&&"function"==typeof t.localize){const i=t.localize(e);if(i&&i!==e)return i}if(t&&t.resources&&"object"==typeof t.resources){const i=t.language||"en",s=null===(a=t.resources[i])||void 0===a?void 0:a[e];if(s)return s}const s=t&&t.language?t.language:"en",r=_t.find(t=>s.toLowerCase().startsWith(t.code))||_t[0],o=r.data[e];return o||(void 0!==i?i:e)}let yt=class extends lt{constructor(){super(...arguments),this._config={},this._initialized=!1,this._elements=new Map}setConfig(t){this._config=t||{},this._initialized?this._updateValues():this._initialize(),0===Object.keys(this._config).length||0===Object.keys(t).length?this._emitMinimalConfig():this.dispatchEvent(new CustomEvent("config-changed",{detail:{config:{...this._config}}}))}_emitMinimalConfig(){const t={title:"",latitude:void 0,longitude:void 0,altitude:void 0,show_cloud_cover:!0,show_pressure:!0,show_precipitation:!0,show_weather_icons:!0,show_wind:!0,dense_weather_icons:!0,meteogram_hours:"48h",styles:void 0,diagnostics:!1,entity_id:void 0,focussed:!1,display_mode:"full",aspect_ratio:"16:9",layout_mode:"sections"},e={};Object.keys(this._config).forEach(i=>{const a=this._config[i],s=t[i];void 0===s?void 0!==a&&(e[i]=a):a!==s&&(e[i]=a)}),this.dispatchEvent(new CustomEvent("config-changed",{detail:{config:e}}))}get config(){return this._config}connectedCallback(){this._initialized||this._initialize()}_initialize(){this.render(),this._initialized=!0,setTimeout(()=>this._updateValues(),0)}_updateValues(){var t,e,i,a,s,r;if(!this._initialized)return;const o=(t,e,i="value")=>{t&&t[i]!==e&&(t[i]=e)};o(this._elements.get("title"),this._config.title||""),o(this._elements.get("latitude"),void 0!==this._config.latitude?String(this._config.latitude):void 0!==(null===(e=null===(t=this.hass)||void 0===t?void 0:t.config)||void 0===e?void 0:e.latitude)?String(this.hass.config.latitude):""),o(this._elements.get("longitude"),void 0!==this._config.longitude?String(this._config.longitude):void 0!==(null===(a=null===(i=this.hass)||void 0===i?void 0:i.config)||void 0===a?void 0:a.longitude)?String(this.hass.config.longitude):""),o(this._elements.get("altitude"),void 0!==this._config.altitude?String(this._config.altitude):void 0!==(null===(r=null===(s=this.hass)||void 0===s?void 0:s.config)||void 0===r?void 0:r.altitude)?String(this.hass.config.altitude):"","value"),o(this._elements.get("show_cloud_cover"),void 0===this._config.show_cloud_cover||this._config.show_cloud_cover,"checked"),o(this._elements.get("show_pressure"),void 0===this._config.show_pressure||this._config.show_pressure,"checked"),o(this._elements.get("show_precipitation"),void 0===this._config.show_precipitation||this._config.show_precipitation,"checked"),o(this._elements.get("show_weather_icons"),void 0===this._config.show_weather_icons||this._config.show_weather_icons,"checked"),o(this._elements.get("show_wind"),void 0===this._config.show_wind||this._config.show_wind,"checked"),o(this._elements.get("dense_weather_icons"),void 0===this._config.dense_weather_icons||this._config.dense_weather_icons,"checked"),o(this._elements.get("meteogram_hours"),this._config.meteogram_hours||"48h"),o(this._elements.get("diagnostics"),void 0!==this._config.diagnostics&&this._config.diagnostics,"checked"),o(this._elements.get("entity_id"),this._config.entity_id||""),o(this._elements.get("focussed"),void 0!==this._config.focussed&&this._config.focussed,"checked"),o(this._elements.get("display_mode"),this._config.display_mode||"full"),o(this._elements.get("aspect_ratio"),this._config.aspect_ratio||"16:9")}render(){var e,i,a,s,r,o,n;const d=this.hass,l=this._config;if(!d||!l)return this.innerHTML='<ha-card><div style="padding:16px;">Loading Home Assistant context...</div></ha-card>',void setTimeout(()=>this.render(),300);const h=null!==(i=null===(e=null==d?void 0:d.config)||void 0===e?void 0:e.latitude)&&void 0!==i?i:"",c=null!==(s=null===(a=null==d?void 0:d.config)||void 0===a?void 0:a.longitude)&&void 0!==s?s:"",u=null!==(o=null===(r=null==d?void 0:d.config)||void 0===r?void 0:r.altitude)&&void 0!==o?o:"",m=void 0===this._config.show_cloud_cover||this._config.show_cloud_cover,g=void 0===this._config.show_pressure||this._config.show_pressure,p=void 0===this._config.show_weather_icons||this._config.show_weather_icons,_=void 0===this._config.show_wind||this._config.show_wind,f=void 0===this._config.dense_weather_icons||this._config.dense_weather_icons,y=this._config.meteogram_hours||"48h",v=void 0!==this._config.diagnostics&&this._config.diagnostics;void 0!==this._config.focussed&&this._config.focussed;const w=this._config.display_mode||"full",b=this._config.aspect_ratio||"16:9",A=document.createElement("div"),$=this._config.layout_mode||"sections",x=d&&d.states?Object.keys(d.states).filter(t=>t.startsWith("weather.")):[],I=null!==(n=this._config.entity_id)&&void 0!==n?n:"none",E=!(!I||"none"===I);A.innerHTML=`\n  <style>\n    ha-card {\n      padding: 16px;\n    }\n    .values {\n      padding-left: 16px;\n      margin: 8px 0;\n    }\n    .row {\n      display: flex;\n      margin-bottom: 12px;\n      align-items: center;\n    }\n    ha-textfield {\n      width: 100%;\n    }\n    .side-by-side {\n      display: flex;\n      gap: 12px;\n    }\n    .side-by-side > * {\n      flex: 1;\n    }\n    h3 {\n      font-size: 18px;\n      color: var(--primary-text-color);\n      font-weight: 500;\n      margin-bottom: 12px;\n      margin-top: 0;\n    }\n    .help-text {\n      color: var(--secondary-text-color);\n      font-size: 0.875rem;\n      margin-top: 4px;\n    }\n    .info-text {\n      color: var(--primary-text-color);\n      opacity: 0.8;\n      font-size: 0.9rem;\n      font-style: italic;\n      margin: 4px 0 16px 0;\n    }\n    .toggle-row {\n      display: flex;\n      justify-content: space-between;\n      align-items: center;\n      margin-bottom: 8px;\n    }\n    .toggle-label {\n      flex-grow: 1;\n    }\n    .toggle-section {\n      margin-top: 16px;\n      border-top: 1px solid var(--divider-color);\n      padding-top: 16px;\n    }\n  </style>\n  <ha-card>\n    <h3>${(null==d?void 0:d.localize)?d.localize("ui.editor.meteogram.title"):"Meteogram Card Settings"}</h3>\n    <div class="values">\n      <div class="row">\n        <ha-textfield\n          label="${(null==d?void 0:d.localize)?d.localize("ui.editor.meteogram.title_label"):"Title"}"\n          id="title-input"\n          .value="${this._config.title||""}"\n        ></ha-textfield>\n      </div>\n      <p class="help-text">${ft(d,"ui.editor.meteogram.title_description","Card title (optional, shown at the top of the card)")}</p>\n\n      <div class="row">\n        <label for="weather-entity-select" style="margin-right:8px;">${ft(d,"ui.editor.meteogram.weather_entity","Weather Entity")}</label>\n        <select id="weather-entity-select">\n          <option value="none" ${E?"":"selected"}>None</option>\n          ${x.map(t=>`<option value="${t}" ${I===t?"selected":""}>${t}</option>`).join("")}\n        </select>\n      </div>\n      <p class="help-text">${ft(d,"ui.editor.meteogram.choose_weather_entity","Choose a weather entity for Home Assistant integration, or select 'None' to use coordinates.")}</p>\n\n      <div class="info-text">\n        ${(null==d?void 0:d.localize)?d.localize("ui.editor.meteogram.location_info"):"Location coordinates will be used to fetch weather data directly from Met.no API."}\n        ${h?ft(d,"ui.editor.meteogram.using_ha_location","Using Home Assistant's location by default."):""}\n      </div>\n\n      <div class="side-by-side">\n        <ha-textfield\n          label="${ft(d,"ui.editor.meteogram.latitude","Latitude")}"\n          id="latitude-input"\n          type="number"\n          step="any"\n          .value="${void 0!==this._config.latitude?this._config.latitude:h}"\n          placeholder="${h?`${ft(d,"ui.editor.meteogram.default","Default")}: ${h}`:""}"\n          ${E?"disabled":""}\n        ></ha-textfield>\n\n        <ha-textfield\n          label="${ft(d,"ui.editor.meteogram.longitude","Longitude")}"\n          id="longitude-input"\n          type="number"\n          step="any"\n          .value="${void 0!==this._config.longitude?this._config.longitude:c}"\n          placeholder="${c?`${ft(d,"ui.editor.meteogram.default","Default")}: ${c}`:""}"\n          ${E?"disabled":""}\n        ></ha-textfield>\n\n        <ha-textfield\n          label="${ft(d,"ui.editor.meteogram.altitude","Altitude (meters)")}"\n          id="altitude-input"\n          type="number"\n          step="any"\n          .value="${void 0!==this._config.altitude?this._config.altitude:u}"\n          placeholder="${u?`${ft(d,"ui.editor.meteogram.default","Default")}: ${u}`:ft(d,"ui.editor.meteogram.optional","Optional")}" \n          ${E?"disabled":""}\n        ></ha-textfield>\n      </div>\n      <p class="help-text">${ft(d,"ui.editor.meteogram.leave_empty","Leave empty to use Home Assistant's configured location")}</p>\n\n      <div class="toggle-section">\n        <h3>${ft(d,"ui.editor.meteogram.display_options","Display Options")}</h3>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(d,"ui.editor.meteogram.attributes.cloud_coverage","Show Cloud Cover")}</div>\n          <ha-switch\n            id="show-cloud-cover"\n            .checked="${m}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(d,"ui.editor.meteogram.attributes.air_pressure","Show Pressure")}</div>\n          <ha-switch\n            id="show-pressure"\n            .checked="${g}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(d,"ui.editor.meteogram.attributes.precipitation","Show Precipitation (Rain & Snow)")}</div>\n          <ha-switch\n            id="show-precipitation"\n            .checked="${void 0===this._config.show_precipitation||this._config.show_precipitation}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(d,"ui.editor.meteogram.attributes.weather_icons","Show Weather Icons")}</div>\n          <ha-switch\n            id="show-weather-icons"\n            .checked="${p}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(d,"ui.editor.meteogram.attributes.wind","Show Wind")}</div>\n          <ha-switch\n            id="show-wind"\n            .checked="${_}"\n          ></ha-switch>\n        </div>\n\n        <div class="toggle-row">\n          <div class="toggle-label">${ft(d,"ui.editor.meteogram.attributes.dense_icons","Dense Weather Icons (every hour)")}</div>\n          <ha-switch\n            id="dense-weather-icons"\n            .checked="${f}"\n          ></ha-switch>\n        </div>\n      \n        <div class="toggle-row">\n          <div class="toggle-label">Display Mode</div>\n          <select id="display-mode-select">\n            <option value="full" ${"full"===w?"selected":""}>Full (all features)</option>\n            <option value="core" ${"core"===w?"selected":""}>Core (dates & numbers only)</option>\n            <option value="focussed" ${"focussed"===w?"selected":""}>Focussed (minimal)</option>\n          </select>\n        </div>\n      </div>\n\n      <div class="row">\n        <label for="meteogram-hours-select" style="margin-right:8px;">${ft(d,"ui.editor.meteogram.meteogram_length","Meteogram Length")}</label>\n        <select id="meteogram-hours-select">\n          <option value="8h" ${"8h"===y?"selected":""}>${ft(d,"ui.editor.meteogram.hours_8","8 hours")}</option>\n          <option value="12h" ${"12h"===y?"selected":""}>${ft(d,"ui.editor.meteogram.hours_12","12 hours")}</option>\n          <option value="24h" ${"24h"===y?"selected":""}>${ft(d,"ui.editor.meteogram.hours_24","24 hours")}</option>\n          <option value="48h" ${"48h"===y?"selected":""}>${ft(d,"ui.editor.meteogram.hours_48","48 hours")}</option>\n          <option value="54h" ${"54h"===y?"selected":""}>${ft(d,"ui.editor.meteogram.hours_54","54 hours")}</option>\n          <option value="max" ${"max"===y?"selected":""}>${ft(d,"ui.editor.meteogram.hours_max","Max available")}</option>\n        </select>\n      </div>\n      <p class="help-text">${ft(d,"ui.editor.meteogram.choose_hours","Choose how many hours to show in the meteogram")}</p>\n\n      ${["panel","grid"].includes($)?`\n      <div class="row">\n        <label for="aspect-ratio-select" style="margin-right:8px;">Aspect Ratio</label>\n        <select id="aspect-ratio-select">\n          <option value="16:9" ${"16:9"===b?"selected":""}>16:9 (Widescreen)</option>\n          <option value="4:3" ${"4:3"===b?"selected":""}>4:3 (Classic)</option>\n          <option value="1:1" ${"1:1"===b?"selected":""}>1:1 (Square)</option>\n          <option value="21:9" ${"21:9"===b?"selected":""}>21:9 (Ultra-wide)</option>\n          <option value="3:2" ${"3:2"===b?"selected":""}>3:2</option>\n          <option value="custom" ${["16:9","4:3","1:1","21:9","3:2"].includes(b)?"":"selected"}>Custom</option>\n        </select>\n        <input id="aspect-ratio-custom" type="text" placeholder="e.g. 1.6 or 5:3" style="margin-left:8px; width:90px;" value="${["16:9","4:3","1:1","21:9","3:2"].includes(b)?"":b}" ${["16:9","4:3","1:1","21:9","3:2"].includes(b)?"disabled":""}>\n      </div>\n      <p class="help-text">Set the aspect ratio for the chart area. Use a ratio like 16:9, 4:3, 1:1, or a custom value (e.g. 1.6 or 5:3).</p>\n      `:""}\n\n      ${t.includes("beta")?`\n      <div class="toggle-section"></div>\n        <div class="toggle-row">\n          <div class="toggle-label">Diagnostics (debug logging)</div>\n          <ha-switch\n            id="diagnostics"\n            .checked="${v}"\n          ></ha-switch>\n        </div>\n      `:""}\n      </div>\n    </div>\n  </ha-card>\n`,this.innerHTML="",this.appendChild(A),setTimeout(()=>{const t=this.querySelector("#title-input");t&&(t.configValue="title",t.addEventListener("input",this._valueChanged.bind(this)),this._elements.set("title",t));const e=this.querySelector("#latitude-input");e&&(e.configValue="latitude",e.addEventListener("input",this._valueChanged.bind(this)),this._elements.set("latitude",e));const i=this.querySelector("#longitude-input");i&&(i.configValue="longitude",i.addEventListener("input",this._valueChanged.bind(this)),this._elements.set("longitude",i));const a=this.querySelector("#altitude-input");a&&(a.configValue="altitude",a.addEventListener("input",this._valueChanged.bind(this)),this._elements.set("altitude",a));const s=this.querySelector("#show-cloud-cover");s&&(s.configValue="show_cloud_cover",s.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_cloud_cover",s));const r=this.querySelector("#show-pressure");r&&(r.configValue="show_pressure",r.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_pressure",r));const o=this.querySelector("#show-precipitation");o&&(o.configValue="show_precipitation",o.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_precipitation",o));const n=this.querySelector("#show-weather-icons");n&&(n.configValue="show_weather_icons",n.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_weather_icons",n));const d=this.querySelector("#show-wind");d&&(d.configValue="show_wind",d.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("show_wind",d));const l=this.querySelector("#dense-weather-icons");l&&(l.configValue="dense_weather_icons",l.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("dense_weather_icons",l));const h=this.querySelector("#meteogram-hours-select");h&&(h.configValue="meteogram_hours",h.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("meteogram_hours",h));const c=this.querySelector("#diagnostics");c&&(c.configValue="diagnostics",c.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("diagnostics",c));const u=this.querySelector("#weather-entity-select");u&&(u.configValue="entity_id",u.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("entity_id",u));const m=this.querySelector("#display-mode-select");m&&(m.configValue="display_mode",m.addEventListener("change",this._valueChanged.bind(this)),this._elements.set("display_mode",m));const g=this.querySelector("#aspect-ratio-select"),p=this.querySelector("#aspect-ratio-custom");g&&(g.configValue="aspect_ratio",g.addEventListener("change",()=>{"custom"===g.value?(p.disabled=!1,p.focus()):(p.disabled=!0,this._config={...this._config,aspect_ratio:String(g.value)},this.dispatchEvent(new CustomEvent("config-changed",{detail:{config:this._config}})))}),this._elements.set("aspect_ratio",g)),p&&(p.configValue="aspect_ratio",p.addEventListener("input",()=>{"custom"===g.value&&(this._config={...this._config,aspect_ratio:String(p.value)},this.dispatchEvent(new CustomEvent("config-changed",{detail:{config:this._config}})))}),this._elements.set("aspect_ratio_custom",p)),e&&(e.disabled=E),i&&(i.disabled=E),a&&(a.disabled=E),this._updateValues()},0)}_valueChanged(t){var e;const i=t.target;if(!this._config||!i||!i.configValue)return;let a=i.value;const s=["show_cloud_cover","show_pressure","show_precipitation","show_weather_icons","show_wind","dense_weather_icons","diagnostics","focussed"];if("HA-SWITCH"===i.tagName)a=i.checked;else if("number"===i.type)if(""===a)a=void 0;else{const t=parseFloat(null!==(e=null==a?void 0:a.toString())&&void 0!==e?e:"");isNaN(t)||(a=t)}else""===a&&(a=void 0);if(s.includes(i.configValue)&&(""===a?a=void 0:"boolean"!=typeof a&&void 0!==a&&(a=Boolean(a))),"entity_id"===i.configValue&&("none"===a&&(a=void 0),setTimeout(()=>{const t=this.querySelector("#latitude-input"),e=this.querySelector("#longitude-input"),i=this.querySelector("#altitude-input"),s=!(!a||"none"===a);t&&(t.disabled=s),e&&(e.disabled=s),i&&(i.disabled=s)},0)),"display_mode"===i.configValue){const t=["full","core","focussed"].includes(i.value)?i.value:void 0;this._config={...this._config,display_mode:t}}else{let t;if(t=s.includes(i.configValue)?void 0===a?void 0:Boolean(a):a,"show_precipitation"===i.configValue)if(!1===t)this._config={...this._config,show_precipitation:!1};else{const{show_precipitation:t,...e}=this._config;this._config={...e}}else this._config={...this._config,[i.configValue]:t}}this.dispatchEvent(new CustomEvent("config-changed",{detail:{config:{...this._config}}}))}_updateConfig(t,e){this._config={...this._config,[t]:e},this.dispatchEvent(new CustomEvent("config-changed",{detail:{config:this._config}}))}};s([gt({type:Object})],yt.prototype,"_config",void 0),s([gt({type:Object})],yt.prototype,"hass",void 0),s([pt()],yt.prototype,"_initialized",void 0),yt=s([ct("meteogram-card-editor")],yt);class vt{constructor(t,e,i,a=!1){this.lastError=null,this.lastStatusCode=null,this._forecastData=null,this._expiresAt=null,this._fetchPromise=null,this._lastFetchTime=null,this.lat=t,this.lon=e,this.debug=a,Number.isFinite(i)&&(this.altitude=i)}_debugLog(...t){this.debug&&console.debug(...t)}async getForecastData(){if(this._debugLog(`[weather-api] getForecastData called for lat=${this.lat}, lon=${this.lon}`),this._forecastData||this.loadCacheFromStorage(),this._forecastData&&this._expiresAt&&Date.now()<this._expiresAt)return this._forecastData;const t=Date.now();if(this._lastFetchTime&&t-this._lastFetchTime<6e4){if(this._fetchPromise)return await this._fetchPromise,this._forecastData;if(this._forecastData)return this._debugLog("[weather-api] Using expired cached data during throttle period"),this._forecastData}this._fetchPromise||(this._fetchPromise=this._fetchWeatherDataFromAPI());try{await this._fetchPromise}finally{this._fetchPromise=null}if(!this._forecastData)throw new Error("Weather data fetch completed but no valid data was obtained");return this._forecastData}get expiresAt(){return this._expiresAt}getDiagnosticText(){var e;let i="<br><b>Weather API Error</b><br>";return this.lastError instanceof Error?i+=`Error: <code>${this.lastError.message}</code><br>`:void 0!==this.lastError&&null!==this.lastError&&(i+=`Error: <code>${String(this.lastError)}</code><br>`),i+=`Status: <code>${null!==(e=this.lastStatusCode)&&void 0!==e?e:""}</code><br>`,i+=`Card version: <code>${t}</code><br>`,i+=`Client type: <code>${navigator.userAgent}</code><br>`,i}getDiagnosticInfo(){var t,e;return{apiType:"MET.no Weather API",hasData:!!this._forecastData,dataTimeLength:(null===(e=null===(t=this._forecastData)||void 0===t?void 0:t.time)||void 0===e?void 0:e.length)||0,lastFetchTime:this._lastFetchTime?new Date(this._lastFetchTime).toISOString():"never",lastFetchFormatted:this._lastFetchTime?new Date(this._lastFetchTime).toLocaleString():"not yet fetched",dataAgeMinutes:this._lastFetchTime?Math.round((Date.now()-this._lastFetchTime)/6e4):"n/a",expiresAt:this._expiresAt,expiresAtFormatted:this._expiresAt?new Date(this._expiresAt).toLocaleString():"not set",isExpired:!!this._expiresAt&&Date.now()>this._expiresAt,location:{lat:this.lat,lon:this.lon,altitude:this.altitude}}}static encodeCacheKey(t,e,i){let a=String(t)+","+String(e);return"number"!=typeof i||isNaN(i)||(a+=","+String(i)),btoa(a)}static cleanupOldCacheEntries(){try{const t=localStorage.getItem("metno-weather-cache");if(!t)return;const e=JSON.parse(t);if(!e["forecast-data"])return;const i=Date.now(),a=864e5,s=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windGust","windDirection","symbolCode","pressure"];let r=0,o=0;for(const[t,n]of Object.entries(e["forecast-data"])){const d=n;let l=!1;if(i-d.expiresAt>a)l=!0,r++;else if(d.data&&"object"==typeof d.data){s.filter(t=>!Array.isArray(d.data[t])).length>0&&(l=!0,o++)}else l=!0,o++;l&&delete e["forecast-data"][t]}(r>0||o>0)&&(localStorage.setItem("metno-weather-cache",JSON.stringify(e)),console.debug&&console.debug(`[WeatherAPI] Cleaned up ${r} old and ${o} invalid cache entries from metno-weather-cache`))}catch(t){console.warn("[WeatherAPI] Failed to cleanup cache entries, clearing entire cache:",t);try{localStorage.removeItem("metno-weather-cache"),console.debug&&console.debug("[WeatherAPI] Cleared corrupted metno-weather-cache")}catch(t){console.error("[WeatherAPI] Failed to clear corrupted cache:",t)}}}saveCacheToStorage(){if(!this._forecastData||!this._expiresAt)return;vt.cleanupOldCacheEntries();const t=vt.encodeCacheKey(Number(this.lat.toFixed(4)),Number(this.lon.toFixed(4)),void 0!==this.altitude?Number(this.altitude.toFixed(2)):void 0);let e={};const i=localStorage.getItem("metno-weather-cache");if(i)try{e=JSON.parse(i)}catch{e={}}e["forecast-data"]||(e["forecast-data"]={}),e["forecast-data"][t]={expiresAt:this._expiresAt,data:this._forecastData},localStorage.setItem("metno-weather-cache",JSON.stringify(e))}loadCacheFromStorage(){var t;const e=vt.encodeCacheKey(Number(this.lat.toFixed(4)),Number(this.lon.toFixed(4)),void 0!==this.altitude?Number(this.altitude.toFixed(2)):void 0);let i=!1;try{const a=localStorage.getItem("metno-weather-cache");if(a){let s={};try{s=JSON.parse(a)}catch{return console.warn("[WeatherAPI] Corrupted cache JSON, clearing metno-weather-cache"),localStorage.removeItem("metno-weather-cache"),this._expiresAt=null,void(this._forecastData=null)}const r=null===(t=s["forecast-data"])||void 0===t?void 0:t[e];if(r&&r.expiresAt&&r.data){const t=864e5,a=Date.now();if(a-r.expiresAt>t)this._debugLog(`[WeatherAPI] Cached data for ${e} is too old (${Math.round((a-r.expiresAt)/36e5)}h past expiry), removing from cache`),s["forecast-data"]||(s["forecast-data"]={}),delete s["forecast-data"][e],i=!0,this._expiresAt=null,this._forecastData=null;else{const t=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windGust","windDirection","symbolCode","pressure"].filter(t=>!Array.isArray(r.data[t]));t.length>0?(console.warn(`[WeatherAPI] Cached data for ${e} is missing required arrays: ${t.join(", ")}, removing from cache`),s["forecast-data"]||(s["forecast-data"]={}),delete s["forecast-data"][e],i=!0,this._expiresAt=null,this._forecastData=null):(this._expiresAt=r.expiresAt,Array.isArray(r.data.time)&&(r.data.time=r.data.time.map(t=>"string"==typeof t?new Date(t):t)),this._forecastData=r.data)}i&&(localStorage.setItem("metno-weather-cache",JSON.stringify(s)),this._debugLog(`[WeatherAPI] Updated cache structure for ${e}`))}else this._expiresAt=null,this._forecastData=null}else this._expiresAt=null,this._forecastData=null}catch(t){console.warn("[WeatherAPI] Failed to load cache:",t);try{localStorage.removeItem("metno-weather-cache"),console.warn("[WeatherAPI] Cleared corrupted metno-weather-cache due to error")}catch(t){console.error("[WeatherAPI] Failed to clear corrupted cache:",t)}this._expiresAt=null,this._forecastData=null}}async _fetchWeatherDataFromAPI(){const t=Date.now();if(this._lastFetchTime&&t-this._lastFetchTime<6e4)return;this._lastFetchTime=t;let e=`https://aa015h6buqvih86i1.api.met.no/weatherapi/locationforecast/2.0/complete?lat=${this.lat}&lon=${this.lon}`;Number.isFinite(this.altitude)&&(e+=`&altitude=${this.altitude}`);let i=e,a={};this.lastStatusCode=null,this.lastError=null;try{a={Origin:window.location.origin,Accept:"application/json"},this._debugLog(`[weather-api] Fetching weather data from ${i} with Origin ${a.Origin}`),vt.METEOGRAM_CARD_API_CALL_COUNT++;const t=await fetch(i,{headers:a,mode:"cors",method:"GET"});this.lastStatusCode=t.status;const e=t.headers.get("Expires");let s=null;if(e){const t=new Date(e);isNaN(t.getTime())||(s=t)}if(429===this.lastStatusCode){const t=s?s.toLocaleTimeString():"later";throw new Error(`Weather API throttling: Too many requests. Please wait until ${t} before retrying.`)}if(304===this.lastStatusCode)throw new Error("API returned 304 but no cached data is available.");if(!t.ok){const e=await t.text();throw new Error(`Weather API returned ${t.status}: ${t.statusText}\n${e}`)}const r=await t.json();vt.METEOGRAM_CARD_API_SUCCESS_COUNT++,this.assignMeteogramDataFromRaw(r),this._expiresAt=s?s.getTime():null,this.saveCacheToStorage()}catch(t){this.lastError=t,this._lastFetchTime=null;const e=this.getDiagnosticText()+`API URL: <code>${i}</code><br>`+`Origin header: <code>${a.Origin}</code><br>`;throw new Error(`<br>Failed to get weather data: ${t.message}\n<br>Check your network connection, browser console, and API accessibility.\n\n${e}`)}}assignMeteogramDataFromRaw(t){try{if(!t||!t.properties||!Array.isArray(t.properties.timeseries))throw new Error("Invalid raw data format from weather API");const e=t.properties.timeseries.filter(t=>0===new Date(t.time).getMinutes()),i={time:[],temperature:[],rain:[],rainMin:[],rainMax:[],cloudCover:[],windSpeed:[],windGust:[],windDirection:[],symbolCode:[],pressure:[],units:void 0};if(i.fetchTimestamp=(new Date).toISOString(),e.forEach(t=>{var e,a,s,r,o,n,d,l,h,c,u,m;const g=new Date(t.time),p=t.data.instant.details,_=null===(e=t.data.next_1_hours)||void 0===e?void 0:e.details,f=null===(a=t.data.next_6_hours)||void 0===a?void 0:a.details,y=null===(s=t.data.next_6_hours)||void 0===s?void 0:s.summary;if(i.time.push(g),i.temperature.push(null!==(r=p.air_temperature)&&void 0!==r?r:null),i.cloudCover.push(null!==(o=p.cloud_area_fraction)&&void 0!==o?o:null),i.windSpeed.push(null!==(n=p.wind_speed)&&void 0!==n?n:null),i.windGust.push(null!==(d=p.wind_speed_of_gust)&&void 0!==d?d:null),i.windDirection.push(null!==(l=p.wind_from_direction)&&void 0!==l?l:null),i.pressure.push(null!==(h=p.air_pressure_at_sea_level)&&void 0!==h?h:null),_){const e=void 0!==_.precipitation_amount_max?_.precipitation_amount_max:null,a=void 0!==_.precipitation_amount_min?_.precipitation_amount_min:null;i.rainMin.push(a),i.rainMax.push(e),i.rain.push(null!==(c=_.precipitation_amount)&&void 0!==c?c:null),(null===(m=null===(u=t.data.next_1_hours)||void 0===u?void 0:u.summary)||void 0===m?void 0:m.symbol_code)?i.symbolCode.push(t.data.next_1_hours.summary.symbol_code):i.symbolCode.push("")}else if(f){const t=f.precipitation_amount,e=void 0!==t?t/6:null;i.rain.push(e),i.rainMin.push(null),i.rainMax.push(null),(null==y?void 0:y.symbol_code)?i.symbolCode.push(y.symbol_code):i.symbolCode.push("")}else i.rain.push(null),i.rainMin.push(null),i.rainMax.push(null),i.symbolCode.push("")}),t.properties&&t.properties.meta&&t.properties.meta.units){const e=t.properties.meta.units;i.units={temperature:e.air_temperature,pressure:e.air_pressure_at_sea_level,windSpeed:e.wind_speed,precipitation:e.precipitation_amount,cloudCover:e.cloud_area_fraction}}this._forecastData=i}catch(t){throw new Error("Failed to parse weather data: "+(t instanceof Error?t.message:String(t)))}}}vt.METEOGRAM_CARD_API_CALL_COUNT=0,vt.METEOGRAM_CARD_API_SUCCESS_COUNT=0;class wt{constructor(t,e,i,a,s=!1){var r,o;this._forecastData=null,this._lastDataFetch=null,this._unsubForecast=null,this._lastPauseTime=null,this._lastResumeTime=null,this._lastForecastFetch=null,this._debug=!1,this._debug=s,this._debugLog(`[WeatherEntityAPI] from ${a} Constructor called for entityId: ${e}`),this.hass=t,this.entityId=e,this._cardInstance=i,(null===(o=null===(r=this.hass)||void 0===r?void 0:r.states)||void 0===o?void 0:o[this.entityId])?this.hass&&this.entityId&&(this._debugLog(`[WeatherEntityAPI] Setting up forecast subscription for ${this.entityId} (modern HA method)`),this.subscribeForecast(t=>{this._forecastData=this._parseForecastArray(t),this._lastDataFetch=Date.now(),this._lastForecastFetch=Date.now(),this._cardInstance&&"function"==typeof this._cardInstance._scheduleDrawMeteogram&&this._cardInstance._scheduleDrawMeteogram("WeatherEntityAPI-forecast-update",!0)}).then(t=>{this._unsubForecast=t,this._debugLog(`[WeatherEntityAPI] ✅ Forecast subscription established successfully for ${this.entityId}`)}).catch(t=>{console.error(`[WeatherEntityAPI] ❌ Forecast subscription failed for ${this.entityId}:`,t),this._debugLog("[WeatherEntityAPI] This may indicate an unsupported entity or HA version issue")})):console.warn(`[WeatherEntityAPI] ❌ Weather entity ${this.entityId} not found in hass.states`)}_debugLog(...t){this._debug&&console.debug(...t)}static cleanupOldEntityCacheEntries(t){const e=Date.now();let i=0,a=0;const s=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windGust","windDirection","symbolCode","pressure"];for(const[r,o]of Object.entries(t)){let n=!1;if(e-o.timestamp>864e5)n=!0,i++;else if(o.data&&"object"==typeof o.data){const t=s.filter(t=>!Array.isArray(o.data[t]));t.length>0&&(n=!0,a++,"true"===localStorage.getItem("meteogram-debug")&&console.debug(`[WeatherEntityAPI] Removing cache entry for ${r}: missing arrays ${t.join(", ")}`))}else n=!0,a++,"true"===localStorage.getItem("meteogram-debug")&&console.debug(`[WeatherEntityAPI] Removing cache entry for ${r}: invalid data structure`);n&&delete t[r]}(i>0||a>0)&&"true"===localStorage.getItem("meteogram-debug")&&console.debug(`[WeatherEntityAPI] Cleaned up ${i} old and ${a} invalid entity cache entries`)}getDiagnosticInfo(){var t,e,i,a,s,r,o,n,d,l,h,c,u;const m=(null===(t=this._cardInstance)||void 0===t?void 0:t.hass)||this.hass,g=null===(e=null==m?void 0:m.states)||void 0===e?void 0:e[this.entityId],p=this._lastDataFetch?this._lastDataFetch+36e5:null,_=Date.now(),f=(null===(i=this._forecastData)||void 0===i?void 0:i.time)?{firstForecastTime:(null===(a=this._forecastData.time[0])||void 0===a?void 0:a.toISOString())||"none",lastForecastTime:(null===(s=this._forecastData.time[this._forecastData.time.length-1])||void 0===s?void 0:s.toISOString())||"none",firstForecastAge:this._forecastData.time[0]?Math.round((_-this._forecastData.time[0].getTime())/6e4)+" minutes ago":"unknown",forecastSpanHours:this._forecastData.time.length>1?Math.round((this._forecastData.time[this._forecastData.time.length-1].getTime()-this._forecastData.time[0].getTime())/36e5)+" hours":"0 hours",hourlyIntervals:this._forecastData.time.length>1?this._forecastData.time.slice(1,3).map((t,e)=>Math.round((t.getTime()-this._forecastData.time[e].getTime())/6e4)+" min"):[]}:null;return{entityId:this.entityId,entityExists:!!g,entityState:null==g?void 0:g.state,entityLastChanged:null==g?void 0:g.last_changed,entityLastUpdated:null==g?void 0:g.last_updated,entityTimingAnalysis:g?{lastChangedFormatted:g.last_changed?new Date(g.last_changed).toLocaleString():"never",lastUpdatedFormatted:g.last_updated?new Date(g.last_updated).toLocaleString():"never",lastChangedAge:g.last_changed?Math.round((_-new Date(g.last_changed).getTime())/6e4)+" minutes ago":"unknown",lastUpdatedAge:g.last_updated?Math.round((_-new Date(g.last_updated).getTime())/6e4)+" minutes ago":"unknown",entityVsForecastAge:this._lastDataFetch&&g.last_updated?Math.round((new Date(g.last_updated).getTime()-this._lastDataFetch)/6e4)+" minutes difference":"unknown"}:null,hourlyForecastData:{processedLength:(null===(o=null===(r=this._forecastData)||void 0===r?void 0:r.time)||void 0===o?void 0:o.length)||0,status:(null===(d=null===(n=this._forecastData)||void 0===n?void 0:n.time)||void 0===d?void 0:d.length)?`${this._forecastData.time.length} processed entries`:"waiting for subscription data",forecastTiming:f},hasSubscription:!!this._unsubForecast,subscriptionStatus:this._unsubForecast?"active":"paused/inactive",lastPauseTime:this._lastPauseTime?new Date(this._lastPauseTime).toLocaleString():"never",lastResumeTime:this._lastResumeTime?new Date(this._lastResumeTime).toLocaleString():"never",lastForecastFetch:this._lastForecastFetch?new Date(this._lastForecastFetch).toLocaleString():"never",lastForecastFetchAge:this._lastForecastFetch?Math.round((_-this._lastForecastFetch)/6e4)+" minutes ago":"never",hasConnection:!!(null===(l=this.hass)||void 0===l?void 0:l.connection),inMemoryData:{hasData:!!this._forecastData,dataTimeLength:(null===(c=null===(h=this._forecastData)||void 0===h?void 0:h.time)||void 0===c?void 0:c.length)||0,lastFetchTime:this._lastDataFetch?new Date(this._lastDataFetch).toISOString():"never",lastFetchFormatted:this._lastDataFetch?new Date(this._lastDataFetch).toLocaleString():"not yet fetched",dataAgeMinutes:this._lastDataFetch?Math.round((Date.now()-this._lastDataFetch)/6e4):"n/a",expiresAt:p,expiresAtFormatted:p?new Date(p).toLocaleString():"not set",isExpired:!!p&&Date.now()>p,fetchTimestamp:(null===(u=this._forecastData)||void 0===u?void 0:u.fetchTimestamp)||"none"}}}_parseForecastArray(t){var e;let i;const a=(null===(e=this._cardInstance)||void 0===e?void 0:e.hass)||this.hass;if(a&&this.entityId&&a.states&&a.states[this.entityId]){const t=a.states[this.entityId].attributes||{};i={temperature:t.temperature_unit,pressure:t.pressure_unit,windSpeed:t.wind_speed_unit,precipitation:t.precipitation_unit||t.precipitation_unit||t.rain_unit,cloudCover:t.cloud_coverage_unit||"%"}}const s={time:[],temperature:[],rain:[],rainMin:[],rainMax:[],cloudCover:[],windSpeed:[],windDirection:[],windGust:[],symbolCode:[],pressure:[],fetchTimestamp:(new Date).toISOString(),units:i};t.forEach(t=>{var e,i,a;s.time.push(new Date(t.datetime||t.time)),s.temperature.push(null!==(e=t.temperature)&&void 0!==e?e:null),s.rain.push(null!==(i=t.precipitation)&&void 0!==i?i:null),s.rainMin.push("precipitation_min"in t&&"number"==typeof t.precipitation_min?t.precipitation_min:null),s.rainMax.push("precipitation_max"in t&&"number"==typeof t.precipitation_max?t.precipitation_max:null),s.cloudCover.push("cloud_coverage"in t&&"number"==typeof t.cloud_coverage?t.cloud_coverage:null),s.windSpeed.push("wind_speed"in t&&"number"==typeof t.wind_speed?t.wind_speed:null),s.windDirection.push("wind_bearing"in t&&"number"==typeof t.wind_bearing?t.wind_bearing:null),"wind_gust"in t&&"number"==typeof t.wind_gust?s.windGust.push(t.wind_gust):"wind_gust_speed"in t&&"number"==typeof t.wind_gust_speed?s.windGust.push(t.wind_gust_speed):"wind_speed_gust"in t&&"number"==typeof t.wind_speed_gust?s.windGust.push(t.wind_speed_gust):"gust_speed"in t&&"number"==typeof t.gust_speed?s.windGust.push(t.gust_speed):s.windGust.push(null),s.symbolCode.push(null!==(a=t.condition)&&void 0!==a?a:""),"pressure"in t&&"number"==typeof t.pressure?s.pressure.push(t.pressure):"pressure_mbar"in t&&"number"==typeof t.pressure_mbar?s.pressure.push(t.pressure_mbar):"pressure_hpa"in t&&"number"==typeof t.pressure_hpa?s.pressure.push(t.pressure_hpa):s.pressure.push(null)});try{const t="meteogram-card-entity-weather-cache";let e={};const i=localStorage.getItem(t);if(i)try{const t=JSON.parse(i);for(const[i,a]of Object.entries(t))e[i]=a&&"object"==typeof a&&"timestamp"in a&&"data"in a?a:{timestamp:Date.now(),data:a}}catch(t){console.warn("[WeatherEntityAPI] Failed to parse existing cache, starting fresh:",t),e={}}wt.cleanupOldEntityCacheEntries(e),e[this.entityId]={timestamp:Date.now(),data:s},localStorage.setItem(t,JSON.stringify(e))}catch(t){console.warn(`[WeatherEntityAPI] Failed to store forecast for ${this.entityId} in localStorage:`,t)}return s}getForecast(){return this._forecastData}subscribeForecast(t){var e;if(this._debugLog(`[WeatherEntityAPI] 📡 Setting up subscription for entityId=${this.entityId}`),!(null===(e=this.hass)||void 0===e?void 0:e.connection))return console.warn(`[WeatherEntityAPI] ❌ Cannot subscribe: hass.connection not available for ${this.entityId}`),Promise.resolve(()=>{});this._debugLog(`[WeatherEntityAPI] ✅ hass.connection available, creating subscription for ${this.entityId}`);return this.hass.connection.subscribeMessage(e=>{Array.isArray(e.forecast)?t(e.forecast):console.warn(`[WeatherEntityAPI] ❌ Invalid forecast data for ${this.entityId}:`,e)},{type:"weather/subscribe_forecast",entity_id:this.entityId,forecast_type:"hourly"})}getForecastData(){this._debugLog(`[WeatherEntityAPI] getForecastData() called for ${this.entityId}`);const t=Date.now();if(this._forecastData&&this._lastDataFetch&&t-this._lastDataFetch<36e5)return this._forecastData;if(this._lastDataFetch){const e=Math.round((t-this._lastDataFetch)/6e4);this._debugLog(`[WeatherEntityAPI] Data is stale for ${this.entityId} (${e} min old), clearing and waiting for subscription update`)}else this._debugLog(`[WeatherEntityAPI] No data for ${this.entityId}, waiting for subscription update`);this._forecastData=null;let e=!1;try{const t="meteogram-card-entity-weather-cache",i=localStorage.getItem(t);if(i){const a=JSON.parse(i),s=a[this.entityId];if(s){let i;if(s&&"object"==typeof s&&"timestamp"in s&&"data"in s){const t=864e5;Date.now()-s.timestamp>t?(this._debugLog(`[WeatherEntityAPI] Cached data for ${this.entityId} is too old (${Math.round((Date.now()-s.timestamp)/36e5)}h), removing from cache`),e=!0,delete a[this.entityId]):i=s.data}else s&&"object"==typeof s?(i=s,this._debugLog(`[WeatherEntityAPI] Converting old format cache entry for ${this.entityId} to new format`),e=!0,a[this.entityId]={timestamp:Date.now()-432e5,data:i}):(console.warn(`[WeatherEntityAPI] Corrupted cache entry for ${this.entityId}, removing from cache`),e=!0,delete a[this.entityId]);if(i){const s=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windGust","windDirection","symbolCode","pressure"].filter(t=>!Array.isArray(i[t]));if(!(s.length>0))return Array.isArray(i.time)&&(i.time=i.time.map(t=>"string"==typeof t?new Date(t):t)),this._forecastData=i,e&&(localStorage.setItem(t,JSON.stringify(a)),this._debugLog(`[WeatherEntityAPI] Updated cache structure for ${this.entityId}`)),this._forecastData;console.warn(`[WeatherEntityAPI] Cached data for ${this.entityId} is missing required arrays: ${s.join(", ")}, removing from cache`),e=!0,delete a[this.entityId]}e&&(localStorage.setItem(t,JSON.stringify(a)),this._debugLog(`[WeatherEntityAPI] Cleaned up cache for ${this.entityId}`))}}}catch(t){console.warn(`[WeatherEntityAPI] Failed to load forecast for ${this.entityId} from localStorage cache:`,t);try{const t="meteogram-card-entity-weather-cache";localStorage.removeItem(t),console.warn("[WeatherEntityAPI] Cleared corrupted cache due to parse error")}catch(t){console.error("[WeatherEntityAPI] Failed to clear corrupted cache:",t)}}return null}pause(t){if(this._unsubForecast)try{this._debugLog(`[WeatherEntityAPI] from ${t} Pausing subscription for ${this.entityId}`),this._unsubForecast(),this._unsubForecast=null,this._lastPauseTime=Date.now()}catch(e){console.warn(`[WeatherEntityAPI] from ${t} Error pausing subscription for ${this.entityId}:`,e)}}async resume(t){if(this._debugLog(`[WeatherEntityAPI] from ${t} Resuming subscription for ${this.entityId}`),await this._checkAndUpdateFromHassState(),this.hass&&this.entityId&&!this._unsubForecast)try{const t=this.subscribeForecast(t=>{this._forecastData=this._parseForecastArray(t),this._lastDataFetch=Date.now(),this._lastForecastFetch=Date.now(),this._cardInstance&&"function"==typeof this._cardInstance._scheduleDrawMeteogram&&this._cardInstance._scheduleDrawMeteogram("WeatherEntityAPI-resume-update",!0)});this._unsubForecast=await t,this._lastResumeTime=Date.now(),this._debugLog(`[WeatherEntityAPI] ✅ Subscription resumed successfully for ${this.entityId}`)}catch(t){console.error(`[WeatherEntityAPI] ❌ Failed to resume subscription for ${this.entityId}:`,t)}}async _checkAndUpdateFromHassState(){var t,e,i,a,s,r,o,n,d,l;this._debugLog(`[WeatherEntityAPI] 🔍 _checkAndUpdateFromHassState called for ${this.entityId}`);const h=(null===(t=this._cardInstance)||void 0===t?void 0:t.hass)||this.hass;if(!(null===(e=null==h?void 0:h.states)||void 0===e?void 0:e[this.entityId]))return void this._debugLog(`[WeatherEntityAPI] ❌ Entity ${this.entityId} not found in current hass.states during resume check`);const c=h.states[this.entityId];c.last_updated&&new Date(c.last_updated).getTime(),c.last_changed&&new Date(c.last_changed).getTime(),this._lastDataFetch,this._debugLog(`[WeatherEntityAPI] 🚀 Calling get_forecasts service for ${this.entityId} to check forecast freshness...`);try{Date.now();const t=await h.connection.sendMessagePromise({type:"call_service",domain:"weather",service:"get_forecasts",service_data:{entity_id:this.entityId,type:"hourly"},return_response:!0}),e=(null==t?void 0:t.response)||t;if((null===(i=null==e?void 0:e[this.entityId])||void 0===i?void 0:i.forecast)&&Array.isArray(e[this.entityId].forecast)){const t=e[this.entityId].forecast;(null===(a=t[0])||void 0===a?void 0:a.datetime)||(null===(s=t[0])||void 0===s||s.time),(null===(r=t[t.length-1])||void 0===r?void 0:r.datetime)||(null===(o=t[t.length-1])||void 0===o||o.time);this._forecastData=this._parseForecastArray(t),this._lastDataFetch=Date.now(),this._lastForecastFetch=Date.now(),this._cardInstance&&"function"==typeof this._cardInstance._scheduleDrawMeteogram?this._cardInstance._scheduleDrawMeteogram("WeatherEntityAPI-fresh-service-data",!0):console.warn("[WeatherEntityAPI] ⚠️ Could not trigger chart update - card instance not found or missing _scheduleDrawMeteogram method")}else{const e=(null==t?void 0:t.response)||t;console.warn(`[WeatherEntityAPI] ❌ Service call succeeded but no valid forecast data returned for ${this.entityId}:`,{resultStructure:t,responseStructure:e,hasEntityData:!!(null==e?void 0:e[this.entityId]),entityData:null==e?void 0:e[this.entityId]})}}catch(t){console.error(`[WeatherEntityAPI] ❌ get_forecasts service call failed for ${this.entityId}:`,{error:t,errorMessage:t instanceof Error?t.message:String(t),errorStack:t instanceof Error?t.stack:void 0,hassConnectionState:!!(null===(n=this.hass)||void 0===n?void 0:n.connection),entityExists:!!(null===(l=null===(d=this.hass)||void 0===d?void 0:d.states)||void 0===l?void 0:l[this.entityId])})}}isSubscriptionActive(){return!!this._unsubForecast}getFreshnessSummary(){var t,e;const i=this.getDiagnosticInfo();let a="\n=== METEOGRAM FORECAST FRESHNESS SUMMARY ===\n";if(a+=`Entity: ${this.entityId}\n`,a+=`Status: ${i.entityExists?"✅ Found":"❌ Missing"}\n`,a+=`Subscription: ${"active"===i.subscriptionStatus?"🟢 Active":"🔴 Paused/Inactive"}\n`,i.entityTimingAnalysis&&(a+="\n📅 ENTITY TIMING:\n",a+=`• Last Updated: ${i.entityTimingAnalysis.lastUpdatedFormatted} (${i.entityTimingAnalysis.lastUpdatedAge})\n`,a+=`• Last Changed: ${i.entityTimingAnalysis.lastChangedFormatted} (${i.entityTimingAnalysis.lastChangedAge})\n`),null===(t=i.hourlyForecastData)||void 0===t?void 0:t.forecastTiming){const t=i.hourlyForecastData.forecastTiming;a+="\n📊 FORECAST DATA:\n",a+=`• First Forecast: ${t.firstForecastTime} (${t.firstForecastAge})\n`,a+=`• Last Forecast: ${t.lastForecastTime}\n`,a+=`• Data Span: ${t.forecastSpanHours}\n`,a+=`• Total Entries: ${i.hourlyForecastData.processedLength}\n`,a+=`• Hourly Intervals: ${t.hourlyIntervals.join(", ")}\n`}else a+=`\n📊 FORECAST DATA: ${i.hourlyForecastData.status}\n`;return a+="\n⏰ FRESHNESS:\n",a+=`• Last Forecast Fetched: ${i.lastForecastFetch||"never"} ${i.lastForecastFetchAge?`(${i.lastForecastFetchAge})`:""}\n`,a+=`• Our Last Fetch: ${i.inMemoryData.lastFetchFormatted}\n`,a+=`• Data Age: ${i.inMemoryData.dataAgeMinutes} minutes\n`,a+=`• Expires At: ${i.inMemoryData.expiresAtFormatted}\n`,a+=`• Is Expired: ${i.inMemoryData.isExpired?"❌ YES":"✅ NO"}\n`,(null===(e=i.entityTimingAnalysis)||void 0===e?void 0:e.entityVsForecastAge)&&(a+=`• Entity vs Forecast Age Diff: ${i.entityTimingAnalysis.entityVsForecastAge}\n`),a+="\n🔧 ACTIONS:\n",a+="• Test get_forecasts: weatherEntityAPI.testGetForecastsService()\n",a+="• Force resume: weatherEntityAPI.resume('manual-test')\n",a+="• Full diagnostics: weatherEntityAPI.getDiagnosticInfo()\n",a+="===============================================\n",console.log(a),a}async testGetForecastsService(){var t,e,i,a,s,r,o,n,d,l,h,c,u,m,g,p,_,f,y,v,w,b,A,$,x,I;console.log(`[WeatherEntityAPI] 🧪 Manual test of get_forecasts service for ${this.entityId}`);const E=(null===(t=this._cardInstance)||void 0===t?void 0:t.hass)||this.hass;if(!(null==E?void 0:E.connection))return console.error("[WeatherEntityAPI] ❌ No hass connection available"),null;try{const t=Date.now(),w=await E.connection.sendMessagePromise({type:"call_service",domain:"weather",service:"get_forecasts",service_data:{entity_id:this.entityId,type:"hourly"},return_response:!0}),b={serviceCallDurationMs:Date.now()-t,serviceCallTime:(new Date).toISOString(),resultKeys:Object.keys(w||{}),hasEntityData:!!(null==w?void 0:w[this.entityId]),fullResult:w},A=(null==w?void 0:w.response)||w;if((null===(e=null==A?void 0:A[this.entityId])||void 0===e?void 0:e.forecast)&&Array.isArray(A[this.entityId].forecast)){const t=A[this.entityId].forecast;Date.now();b.forecastAnalysis={forecastLength:t.length,firstItem:t[0],lastItem:t[t.length-1],firstForecastTime:(null===(i=t[0])||void 0===i?void 0:i.datetime)||(null===(a=t[0])||void 0===a?void 0:a.time),lastForecastTime:(null===(s=t[t.length-1])||void 0===s?void 0:s.datetime)||(null===(r=t[t.length-1])||void 0===r?void 0:r.time),sampleItems:t.slice(0,3),timeSpread:t.length>1?{totalHours:Math.round((new Date(t[t.length-1].datetime||t[t.length-1].time).getTime()-new Date(t[0].datetime||t[0].time).getTime())/36e5),intervalBetweenFirst2:t.length>1?Math.round((new Date(t[1].datetime||t[1].time).getTime()-new Date(t[0].datetime||t[0].time).getTime())/6e4)+" minutes":"n/a"}:null},b.comparisonWithCurrentData={currentDataLength:(null===(n=null===(o=this._forecastData)||void 0===o?void 0:o.time)||void 0===n?void 0:n.length)||0,currentFirstTime:(null===(h=null===(l=null===(d=this._forecastData)||void 0===d?void 0:d.time)||void 0===l?void 0:l[0])||void 0===h?void 0:h.toISOString())||"none",newFirstTime:(null===(c=t[0])||void 0===c?void 0:c.datetime)||(null===(u=t[0])||void 0===u?void 0:u.time)||"none",dataMismatch:((null===(g=null===(m=this._forecastData)||void 0===m?void 0:m.time)||void 0===g?void 0:g.length)||0)!==t.length||((null===(f=null===(_=null===(p=this._forecastData)||void 0===p?void 0:p.time)||void 0===_?void 0:_[0])||void 0===f?void 0:f.toISOString())||"")!==((null===(y=t[0])||void 0===y?void 0:y.datetime)||(null===(v=t[0])||void 0===v?void 0:v.time)||""),lastFetchAge:this._lastDataFetch?Math.round((Date.now()-this._lastDataFetch)/6e4)+" minutes ago":"never"}}else b.error="No valid forecast array in response";return console.log("[WeatherEntityAPI] 🧪 get_forecasts test results:",b),b}catch(t){const e={error:t,errorMessage:t instanceof Error?t.message:String(t),errorStack:t instanceof Error?t.stack:void 0,errorDetails:{name:null==t?void 0:t.name,code:null==t?void 0:t.code,type:typeof t,constructor:null===(w=null==t?void 0:t.constructor)||void 0===w?void 0:w.name,keys:t?Object.keys(t):[]},hassState:{hasConnection:!!(null==E?void 0:E.connection),entityExists:!!(null===(b=null==E?void 0:E.states)||void 0===b?void 0:b[this.entityId]),entityState:null===($=null===(A=null==E?void 0:E.states)||void 0===A?void 0:A[this.entityId])||void 0===$?void 0:$.state,entityAttributes:(null===(I=null===(x=null==E?void 0:E.states)||void 0===x?void 0:x[this.entityId])||void 0===I?void 0:I.attributes)?Object.keys(E.states[this.entityId].attributes):[]}};console.error("[WeatherEntityAPI] 🧪 get_forecasts test failed:",e),console.error("[WeatherEntityAPI] 🧪 Raw error object:",t);try{console.error("[WeatherEntityAPI] 🧪 Error JSON:",JSON.stringify(t,Object.getOwnPropertyNames(t)))}catch(t){console.error("[WeatherEntityAPI] 🧪 Could not stringify error:",t)}return e}}destroy(t){if(this._unsubForecast)try{this._unsubForecast(),this._unsubForecast=null,this._debugLog(`[WeatherEntityAPI] from ${t} Destroyed subscription for ${this.entityId}`)}catch(e){console.warn(`[WeatherEntityAPI] from ${t} Error during unsubscribe for ${this.entityId}:`,e)}}}function bt(t,e,i){return e===i?t:"m/s"===e&&"km/h"===i?3.6*t:"km/h"===e&&"m/s"===i?t/3.6:"m/s"===e&&"mph"===i?2.2369362920544*t:"mph"===e&&"m/s"===i?t/2.2369362920544:"km/h"===e&&"mph"===i?.62137119223733*t:"mph"===e&&"km/h"===i?t/.62137119223733:"m/s"===e&&"kt"===i?1.9438444924574*t:"kt"===e&&"m/s"===i?t/1.9438444924574:"km/h"===e&&"kt"===i?.5399568034557*t:"kt"===e&&"km/h"===i?t/.5399568034557:"mph"===e&&"kt"===i?.8689762419006*t:"kt"===e&&"mph"===i?t/.8689762419006:(console.warn(`[meteogram-card] Wind speed conversion from ${e} to ${i} not implemented.`),t)}const At=((t,...e)=>{const i=1===t.length?t[0]:e.reduce((e,i,a)=>e+(t=>{if(!0===t._$cssResult$)return t.cssText;if("number"==typeof t)return t;throw Error("Value passed to 'css' function must be a 'css' function result: "+t+". Use 'unsafeCSS' to pass non-literal values, but take care to ensure page security.")})(i)+t[a+1],t[0]);return new l(i,t,n)})`
    :host {
        display: block;
        box-sizing: border-box;
        height: 100%;
        width: 100%;
        max-width: 100%;
        max-height: 100%;
    }

    ha-card {
        display: flex;
        flex-direction: column;
        height: 100%;
        width: 100%;
        box-sizing: border-box;
        overflow: hidden;
        background: var(--card-background-color, #fff);
        color: var(--primary-text-color, #222);
    }

    .card-header {
        padding: 16px 16px 0 16px;
        font-size: 1.25em;
        font-weight: 500;
        line-height: 1.2;
        color: var(--primary-text-color, #222);
    }

    .card-content {
        position: relative;
        flex: 1 1 auto;
        display: flex;
        flex-direction: column;
        justify-content: flex-start;
        align-items: stretch;
        padding: 0 16px 16px 16px;
        box-sizing: border-box;
        min-height: 0;
        min-width: 0;
        overflow: hidden;
    }

    #chart {
        width: 100%;
        height: 100%;
        min-height: 180px;
        box-sizing: border-box;
        overflow: hidden;
        display: flex;
        align-items: stretch;
        justify-content: stretch;
    }

    .error {
        color: var(--error-color, #b71c1c);
        padding: 16px;
    }

    .temp-line {
        stroke: var(--meteogram-temp-line-color, orange);
        stroke-width: 3;
        fill: none;
    }
    :host([dark]) .temp-line {
        stroke: var(--meteogram-temp-line-color, orange);
    }
    
    .pressure-line {
        /* Uses theme variable, fallback is blue for debug */
        stroke: var(--meteogram-pressure-line-color, blue);
        stroke-width: 4;
        stroke-dasharray: 3, 3;
        fill: none;
    }
    :host([dark]) .pressure-line {
        stroke: var(--meteogram-pressure-line-color, #90caf9);
    }

    .rain-bar {
        fill: var(--meteogram-rain-bar-color, deepskyblue);
        opacity: 0.8;
    }
    :host([dark]) .rain-bar {
        fill: var(--meteogram-rain-bar-color, deepskyblue);
    }

    .rain-max-bar {
        fill: var(--meteogram-rain-max-bar-color, #7fdbff);
        opacity: 0.5;
    }
    :host([dark]) .rain-max-bar {
        fill: var(--meteogram-rain-max-bar-color, #7fdbff);
    }

    .rain-label {
        font: var(--meteogram-label-font-size, 0.875rem) sans-serif;
        text-anchor: middle;
        font-weight: bold;
        fill: var(--meteogram-rain-label-color, #0058a3);
    }
    :host([dark]) .rain-label {
        fill: var(--meteogram-rain-label-color, #a3d8ff);
    }

    .rain-max-label {
        font: var(--meteogram-label-font-size, 0.875rem) sans-serif;
        text-anchor: middle;
        font-weight: bold;
        fill: var(--meteogram-rain-max-bar-color, #2693e6);
    }
    :host([dark]) .rain-max-label {
        fill: var(--meteogram-rain-max-bar-color, #2693e6);
    }

    .legend {
        font: var(--meteogram-legend-font-size) sans-serif;
        fill: var(--primary-text-color, #222);
    }
    :host([dark]) .legend {
        fill: var(--primary-text-color, #fff);
    }

    .legend-temp {
        fill: var(--meteogram-temp-line-color, orange);
    }
    :host([dark]) .legend-temp {
        fill: var(--meteogram-temp-line-color, orange);
    }

    .legend-pressure {
        fill: var(--meteogram-pressure-line-color, #90caf9);
    }
    :host([dark]) .legend-pressure {
        fill: var(--meteogram-pressure-line-color, #90caf9);
    }

    .legend-rain {
        fill: var(--meteogram-rain-bar-color, deepskyblue);
    }
    :host([dark]) .legend-rain {
        fill: var(--meteogram-rain-bar-color, deepskyblue);
    }

    .legend-cloud {
        fill: var(--meteogram-cloud-color, #b0bec5);
    }
    :host([dark]) .legend-cloud {
        fill: var(--meteogram-cloud-color, #eceff1);
    }
    .wind-barb {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
        stroke-width: 2;
        fill: none;
    }
    :host([dark]) .wind-barb {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
    }

    .wind-barb-feather {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
        stroke-width: 2;
    }
    :host([dark]) .wind-barb-feather {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
    }

    .wind-barb-half {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
        stroke-width: 2;
    }
    :host([dark]) .wind-barb-half {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
    }

    .wind-barb-calm {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
        fill: none;
    }
    :host([dark]) .wind-barb-calm {
        stroke: var(--meteogram-wind-barb-color, #1976d2);
    }

    .wind-barb-dot {
        fill: var(--meteogram-wind-barb-color, #1976d2);
    }
    :host([dark]) .wind-barb-dot {
        fill: var(--meteogram-wind-barb-color, #1976d2);
    }

    .top-date-label {
        font: var(--meteogram-label-font-size, 16px) sans-serif;
        fill: var(--primary-text-color, #222);
        font-weight: bold;
        dominant-baseline: hanging;
    }
    :host([dark]) .top-date-label {
        fill: var(--primary-text-color, #fff);
    }

    .bottom-hour-label {
        font: var(--meteogram-label-font-size, 0.875rem) sans-serif;
        fill: var(--meteogram-timescale-color, #ffb300);
    }
    :host([dark]) .bottom-hour-label {
        fill: var(--meteogram-timescale-color, #ffd54f);
    }

    .day-bg {
        fill: transparent !important;
        opacity: 0;
        pointer-events: none;
    }

    .wind-band-bg {
        fill: transparent;
    }

    /* .attribution is not used, move its styles to .attribution-icon-wrapper for correct layout */
    .attribution-icon-wrapper {
        position: absolute;
        top: 12px;
        right: 24px;
        z-index: 3;
        display: flex;
        align-items: center;
        justify-content: flex-end;
        height: 32px;
        width: 32px;
        font-size: 0.85em;
        color: var(--secondary-text-color);
        text-align: right;
        background: rgba(255, 255, 255, 0.7);
        padding: 2px 8px;
        border-radius: 6px;
        pointer-events: auto;
    }
    :host([dark]) .attribution-icon-wrapper {
        background: transparent;
    }

    /* Tick text font size for axes */

    .temperature-axis .tick text,
    .pressure-axis .tick text {
        font-size: var(--meteogram-tick-font-size);
        fill: var(--primary-text-color, #222);
    }

    .cloud-area {
        fill: var(--meteogram-cloud-color, #b0bec5);
        opacity: 0.42;
    }
    :host([dark]) .cloud-area {
        fill: var(--meteogram-cloud-color, #eceff1);
        opacity: 0.55;
    }

    .axis-label {
        font: var(--meteogram-label-font-size, 14px) sans-serif;
        fill: var(--meteogram-axis-label-color, #000);
    }
    :host([dark]) .axis-label {
        fill: var(--meteogram-axis-label-color, #fff);
    }

    .grid line,
    .xgrid line,
    .wind-band-grid,
    .twentyfourh-line,
    .twentyfourh-line-wind,
    .day-tic,
    .temperature-axis path,
    .pressure-axis path,
    .wind-band-outline {
        stroke: var(--meteogram-grid-color, #b8c4d9);
    }
    :host([dark]) .grid line,
    :host([dark]) .xgrid line,
    :host([dark]) .wind-band-grid,
    :host([dark]) .twentyfourh-line,
    :host([dark]) .twentyfourh-line-wind,
    :host([dark]) .day-tic,
    :host([dark]) .temperature-axis path,
    :host([dark]) .pressure-axis path,
    :host([dark]) .wind-band-outline {
        stroke: var(--meteogram-grid-color, #444);
    }
    .wind-band-grid {
        stroke-width: 1;
    }
    .twentyfourh-line, .day-tic {
        stroke-width: 3;
        stroke-dasharray: 6, 5;
        opacity: 0.7;
    }
    .twentyfourh-line-wind {
        stroke-width: 2.5;
        stroke-dasharray: 6, 5;
        opacity: 0.5;
    }


    .attribution-icon-wrapper {
        position: absolute;
        top: 12px;
        right: 24px;
        z-index: 3;
        display: flex;
        align-items: center;
        justify-content: flex-end;
        height: 32px;
        width: 32px;
    }
    .attribution-icon {
        cursor: pointer;
        position: relative;
        display: inline-block;
        outline: none;
    }
    .attribution-tooltip {
        display: none;
        position: absolute;
        top: 120%;
        right: 0;
        background: rgba(255,255,255,0.98);
        color: #222;
        border: 1px solid #bbb;
        border-radius: 8px;
        box-shadow: 0 2px 8px rgba(0,0,0,0.12);
        padding: 8px 12px;
        min-width: 220px;
        max-width: 340px;
        font-size: 0.97em;
        z-index: 10;
        white-space: normal;
        pointer-events: none;
    }
    .attribution-icon:focus .attribution-tooltip,
    .attribution-icon:hover .attribution-tooltip,
    .attribution-tooltip.open {
        display: block;
        pointer-events: auto;
    }
`;"undefined"!=typeof window&&(window.mapHaConditionToMetnoSymbol=function(t,e,i){let a=i;if(void 0===a&&e instanceof Date){const t=e.getHours();a=t>=6&&t<18}const s=new Set(["clearsky","partlycloudy","fair","rainshowers","heavyrainshowers","lightrainshowers","snowshowers","heavysnowshowers","lightsnowshowers","sleetshowers","heavysleetshowers","lightsleetshowers","rainshowersandthunder","heavyrainshowersandthunder","lightrainshowersandthunder","snowshowersandthunder","heavysnowshowersandthunder","lightsnowshowersandthunder","sleetshowersandthunder","heavysleetshowersandthunder","lightsleetshowersandthunder","hailshowers","hailshowersandthunder","rainshowerspolartwilight","snowshowerspolartwilight","sleetshowerspolartwilight","hailshowerspolartwilight","rainshowersandthunderpolartwilight","snowshowersandthunderpolartwilight","sleetshowersandthunderpolartwilight","hailshowersandthunderpolartwilight","clearsky_polartwilight","partlycloudy_polartwilight","fair_polartwilight"]),r=t=>s.has(t)&&void 0!==a?t+(a?"_day":"_night"):t,o={"clear-night":()=>"clearsky_night","clear-day":()=>"clearsky_day",sunny:()=>"clearsky_day",cloudy:()=>"cloudy",overcast:()=>"cloudy",mostlycloudy:()=>"cloudy",partlycloudy:()=>r("partlycloudy"),"partly-sunny":()=>r("partlycloudy"),"partly-cloudy-night":()=>"partlycloudy_night",fog:()=>"fog",hail:()=>"hail",lightning:()=>"thunderstorm","lightning-rainy":()=>r("rainshowersandthunder"),pouring:()=>"heavyrain",rainy:()=>"rain",drizzle:()=>"lightrain","freezing-rain":()=>"sleet",snowy:()=>"snow","snowy-rainy":()=>"sleet",windy:()=>r("fair"),"windy-variant":()=>r("fair"),exceptional:()=>"clearsky_day",hot:()=>"clearsky_day",cold:()=>!1===a?"clearsky_night":"clearsky_day",fair:()=>r("fair"),rainshowers:()=>r("rainshowers"),heavyrainshowers:()=>r("heavyrainshowers"),lightrainshowers:()=>r("lightrainshowers"),snowshowers:()=>r("snowshowers"),heavysnowshowers:()=>r("heavysnowshowers"),lightsnowshowers:()=>r("lightsnowshowers"),sleetshowers:()=>r("sleetshowers"),heavysleetshowers:()=>r("heavysleetshowers"),lightsleetshowers:()=>r("lightsleetshowers"),rainshowersandthunder:()=>r("rainshowersandthunder"),heavyrainshowersandthunder:()=>r("heavyrainshowersandthunder"),lightrainshowersandthunder:()=>r("lightrainshowersandthunder"),snowshowersandthunder:()=>r("snowshowersandthunder"),heavysnowshowersandthunder:()=>r("heavysnowshowersandthunder"),lightsnowshowersandthunder:()=>r("lightsnowshowersandthunder"),sleetshowersandthunder:()=>r("sleetshowersandthunder"),heavysleetshowersandthunder:()=>r("heavysleetshowersandthunder"),lightsleetshowersandthunder:()=>r("lightsleetshowersandthunder"),hailshowers:()=>r("hailshowers"),hailshowersandthunder:()=>r("hailshowersandthunder"),rain:()=>"rain",heavyrain:()=>"heavyrain",lightrain:()=>"lightrain",snow:()=>"snow",heavysnow:()=>"heavysnow",lightsnow:()=>"lightsnow",sleet:()=>"sleet",heavysleet:()=>"heavysleet",lightsleet:()=>"lightsleet",thunderstorm:()=>"thunderstorm",clearsky:()=>r("clearsky")},n=t?t.toLowerCase():"",d=o[n];return"function"==typeof d?d(e,a):"string"==typeof d?d:n.endsWith("-night")?n.replace("-night","_night"):n.endsWith("-day")||n.endsWith("-daytime")?n.replace(/-day(time)?$/,"_day"):!1===a?"clearsky_night":"clearsky_day"});class $t{drawWeatherIcons(t,e,i,a,s,r,o){const n=this.card._chartWidth||400,d=Math.floor(n/44),l=this.card.denseWeatherIcons?1:Math.max(1,Math.ceil(o/d));t.selectAll(".weather-icon").data(e).enter().append("foreignObject").attr("class","weather-icon").attr("x",(t,e)=>a(e)-20).attr("y",(t,e)=>{const a=i[e];return null!==a?s(a)-40:-999}).attr("width",40).attr("height",40).attr("opacity",(t,e)=>null!==i[e]&&e%l===0?1:0).each((t,e,i)=>{if(e%l!==0)return;const a=i[e];if(!t)return;let s=t;if(this.card.entityId&&"none"!==this.card.entityId&&this.card._weatherEntityApiInstance){const i=r.time[e],a=this.card.isDaytimeAt(i);s=window.mapHaConditionToMetnoSymbol?window.mapHaConditionToMetnoSymbol(t,i,a):t}s=s.replace(/^lightssleet/,"lightsleet").replace(/^lightssnow/,"lightsnow").replace(/^lightrainshowers$/,"lightrainshowersday").replace(/^rainshowers$/,"rainshowersday").replace(/^heavyrainshowers$/,"heavyrainshowersday"),this.card.getIconSVG&&this.card.getIconSVG(s).then(t=>{if(t){const e=document.createElement("div");e.style.width="40px",e.style.height="40px",e.innerHTML=t,a.appendChild(e)}})})}constructor(t){this.card=t}async ensureD3Loaded(){window.d3||(window._meteogramD3LoadingPromise||(window._meteogramD3LoadingPromise=new Promise((t,e)=>{const i=document.createElement("script");i.src="https://d3js.org/d3.v7.min.js",i.async=!0,i.onload=()=>{t()},i.onerror=()=>{e(new Error("Failed to load D3.js library"))},document.head.appendChild(i)})),await window._meteogramD3LoadingPromise)}drawGridOutline(t){t.append("line").attr("class","line").attr("x1",0).attr("x2",this.card._chartWidth).attr("y1",0).attr("y2",0).attr("stroke","var(--meteogram-grid-color, #e0e0e0)").attr("stroke-width",3),t.append("line").attr("class","line").attr("x1",0).attr("x2",this.card._chartWidth).attr("y1",this.card._chartHeight).attr("y2",this.card._chartHeight).attr("stroke","var(--meteogram-grid-color, #e0e0e0)"),t.append("line").attr("class","line").attr("x1",this.card._chartWidth).attr("x2",this.card._chartWidth).attr("y1",0).attr("y2",this.card._chartHeight).attr("stroke","var(--meteogram-grid-color, #e0e0e0)").attr("stroke-width",3),t.append("line").attr("class","line").attr("x1",0).attr("x2",0).attr("y1",0).attr("y2",this.card._chartHeight).attr("stroke","var(--meteogram-grid-color, #e0e0e0)").attr("stroke-width",3)}drawBottomHourLabels(t,e,i,a,s,r){const o=i.top+this.card._chartHeight+s+15;t.selectAll(".bottom-hour-label").data(e).enter().append("text").attr("class","bottom-hour-label").attr("x",(t,e)=>i.left+a(e)).attr("y",o).attr("text-anchor","middle").text((t,e)=>{const i=this.card.getHaLocale(),a=t.toLocaleTimeString(i,{hour:"2-digit",hour12:!1});return r<400?e%6==0?a:"":r>800?e%2==0?a:"":e%3==0?a:""})}drawTemperatureLine(t,e,i,a,s,r){const o=window.d3,n=o.line().defined(t=>null!==t).x((t,e)=>i(e)).y((t,i)=>null!==e[i]?a(e[i]):0).curve(o.curveMonotoneX);t.append("path").datum(e).attr("class","temp-line").attr("d",n).attr("stroke","currentColor"),this.card.focussed||"core"===this.card.displayMode||t.append("text").attr("class","axis-label").attr("text-anchor","middle").attr("transform",`translate(${20-this.card._margin.left},${a.range()[0]/2}) rotate(-90)`).text(ft(this.card.hass,"ui.card.meteogram.attributes.temperature","Temperature")+" ("+this.card._tempUnit+")"),void 0!==s&&void 0!==r&&t.append("text").attr("class","legend legend-temp").attr("x",s).attr("y",r).attr("text-anchor","start").text(ft(this.card.hass,"ui.card.meteogram.attributes.temperature","Temperature")+" ("+this.card._tempUnit+")")}drawChartGrid(t,e,i,a,s,r,o,n){t.selectAll(".day-tic").data(n).enter().append("line").attr("class","day-tic").attr("x1",t=>o.left+a(t)).attr("x2",t=>o.left+a(t)).attr("y1",o.top-12).attr("y2",this.card._chartHeight+o.top).attr("stroke","#1a237e").attr("stroke-width",3).attr("opacity",.6),e.append("g").attr("class","temperature-axis").call(window.d3.axisLeft(s).tickFormat(t=>`${t}`)),e.append("g").attr("class","grid").call(window.d3.axisLeft(s).tickSize(-this.card._chartWidth).tickFormat(()=>"")),e.append("g").attr("class","xgrid").selectAll("line").data(i.range(r)).enter().append("line").attr("x1",t=>a(t)).attr("x2",t=>a(t)).attr("y1",0).attr("y2",this.card._chartHeight).attr("stroke","currentColor").attr("stroke-width",1)}drawRainBars(t,e,i,a,s,r,o,n,d){const l=.8*o;if(this.card._dataAvailability.precipitationMinMax){const e=i.slice(0,a-1).map((t,e)=>({value:t,index:e})).filter(t=>null!==t.value&&t.value>0);t.selectAll(".rain-max-bar").data(e).enter().append("rect").attr("class","rain-max-bar").attr("x",t=>s(t.index)+o/2-l/2).attr("y",t=>{const e=this.card._chartHeight-r(t.value),i=e<2&&t.value>0?2:.7*e;return r(0)-i}).attr("width",l).attr("height",t=>{const e=this.card._chartHeight-r(t.value);return e<2&&t.value>0?2:.7*e}).attr("fill","currentColor")}const h=e.slice(0,a-1).map((t,e)=>({value:t,index:e})).filter(t=>null!==t.value&&t.value>0);t.selectAll(".rain-bar").data(h).enter().append("rect").attr("class","rain-bar").attr("x",t=>s(t.index)+o/2-l/2).attr("y",t=>{const e=this.card._chartHeight-r(t.value),i=e<2&&t.value>0?2:.7*e;return r(0)-i}).attr("width",l).attr("height",t=>{const e=this.card._chartHeight-r(t.value);return e<2&&t.value>0?2:.7*e}).attr("fill","currentColor");const c=e.slice(0,a-1).map((t,e)=>({value:t,index:e})).filter(t=>null!==t.value&&t.value>0);if(t.selectAll(".rain-label").data(c).enter().append("text").attr("class","rain-label").attr("x",t=>s(t.index)+o/2).attr("y",t=>{const e=this.card._chartHeight-r(t.value),i=e<2&&t.value>0?2:.7*e;return r(0)-i-4}).text(t=>t.value<=0?"":t.value<1?t.value.toFixed(1):t.value.toFixed(0)).attr("opacity",t=>t.value>0?1:0),this.card._dataAvailability.precipitationMinMax){const n=i.slice(0,a-1).map((t,e)=>({value:t,index:e})).filter(t=>null!==t.value);t.selectAll(".rain-max-label").data(n).enter().append("text").attr("class","rain-max-label").attr("x",t=>s(t.index)+o/2).attr("y",t=>{const e=this.card._chartHeight-r(t.value),i=e<2&&t.value>0?2:.7*e;return r(0)-i-18}).text(t=>{var i;const a=null!==(i=null==e?void 0:e[t.index])&&void 0!==i?i:0;return t.value<=a?"":t.value<1?t.value.toFixed(1):t.value.toFixed(0)}).attr("opacity",t=>{var i;const a=null!==(i=null==e?void 0:e[t.index])&&void 0!==i?i:0;return t.value>a?1:0})}if(void 0!==n&&void 0!==d){const e=this.card.getSystemPrecipitationUnit();t.append("text").attr("class","legend legend-rain").attr("x",n).attr("y",d).attr("text-anchor","start").text(ft(this.card.hass,"ui.card.meteogram.attributes.precipitation","Precipitation")+` (${e})`)}}drawDateLabels(t,e,i,a,s,r,o){this.card.focussed||t.selectAll(".top-date-label").data(i).enter().append("text").attr("class","top-date-label").attr("x",(t,e)=>{const o=a.left+s(t);return e===i.length-1?Math.min(o,a.left+r-80):o}).attr("y",o).attr("text-anchor","start").attr("opacity",(t,e)=>{if(e===i.length-1)return 1;const r=a.left+s(t);return a.left+s(i[e+1])-r<100?0:1}).text(t=>{const i=e[t],a=this.card.getHaLocale();return i.toLocaleDateString(a,{weekday:"short",day:"2-digit",month:"short"})})}drawCloudBand(t,e,i,a,s,r){const o=window.d3,n=e.map(t=>null!=t?t:0),d=.01*this.card._chartHeight,l=.2*this.card._chartHeight,h=[];for(let t=0;t<i;t++)h.push([a(t),d+l/2*(1-n[t]/100)]);for(let t=i-1;t>=0;t--)h.push([a(t),d+l/2*(1+n[t]/100)]);t.append("path").attr("class","cloud-area").attr("d",o.line().x(t=>t[0]).y(t=>t[1]).curve(o.curveLinearClosed)(h)),void 0!==s&&void 0!==r&&t.append("text").attr("class","legend legend-cloud").attr("x",s).attr("y",r).attr("text-anchor","start").text(ft(this.card.hass,"ui.card.meteogram.attributes.cloud_coverage","Cloud Cover")+" (%)")}drawPressureLine(t,e,i,a,s,r){const o=window.d3,n=o.line().defined(t=>null!==t&&"number"==typeof t&&!isNaN(t)).x((t,e)=>i(e)).y(t=>a(t));t.append("path").datum(e).attr("class","pressure-line").attr("d",n).attr("fill","none");const d=a.domain(),l=10*Math.ceil(d[0]/10),h=10*Math.floor(d[1]/10),c=[];for(let t=l;t<=h;t+=10)c.push(t);t.append("g").attr("class","pressure-axis").attr("transform",`translate(${this.card._chartWidth}, 0)`).call(o.axisRight(a).tickValues(c).tickFormat(o.format("d"))),this.card.focussed||"core"===this.card.displayMode||t.append("text").attr("class","axis-label").attr("text-anchor","middle").attr("transform",`translate(${this.card._chartWidth+this.card._margin.right-20},${a.range()[0]/2}) rotate(90)`).text(ft(this.card.hass,"ui.card.meteogram.attributes.air_pressure","Pressure")+" ("+this.card._pressureUnit+")"),void 0!==s&&void 0!==r&&t.append("text").attr("class","legend legend-pressure").attr("x",s).attr("y",r).attr("text-anchor","start").text(ft(this.card.hass,"ui.card.meteogram.attributes.air_pressure","Pressure")+" ("+this.card._pressureUnit+")")}drawWindBand(t,e,i,a,s,r,o,n,d,l,h){const c=window.d3,u=a.top+this.card._chartHeight,m=t.append("g").attr("transform",`translate(${a.left},${u})`),g=[];for(let t=0;t<r;t++)o[t].getHours()%2==0&&g.push(t);m.selectAll(".wind-band-grid").data(g).enter().append("line").attr("class","wind-band-grid").attr("x1",t=>e(t)).attr("x2",t=>e(t)).attr("y1",0).attr("y2",i).attr("stroke","currentColor").attr("stroke-width",1),m.append("rect").attr("class","wind-band-outline").attr("x",0).attr("y",0).attr("width",this.card._chartWidth).attr("height",i).attr("stroke","currentColor").attr("stroke-width",2).attr("fill","none"),m.append("rect").attr("class","wind-band-bg").attr("x",0).attr("y",0).attr("width",this.card._chartWidth).attr("height",i);const p=[];for(let t=1;t<r;t++)o[t].getDate()!==o[t-1].getDate()&&p.push(t);m.selectAll(".twentyfourh-line-wind").data(p).enter().append("line").attr("class","twentyfourh-line-wind").attr("x1",t=>e(t)).attr("x2",t=>e(t)).attr("y1",0).attr("y2",i);const _=[];for(let t=0;t<r;t++)o[t].getHours()%2==0&&_.push(t);const f=i/2;for(let t=0;t<_.length-1;t++){const i=_[t],a=_[t+1];if(s<400&&t%2!=0)continue;const r=(e(i)+e(a))/2,o=Math.floor((i+a)/2),u=n[o],g=d[o],p=l[o];if("number"!=typeof u||"number"!=typeof p||isNaN(u)||isNaN(p))continue;const y=bt(u,h,"kt"),v="number"!=typeof g||isNaN(g)?null:bt(g,h,"kt"),w=s<400?18:23,b=s<400?30:38,A=c.scaleLinear().domain([0,Math.max(15,c.max(n.filter(t=>"number"==typeof t&&!isNaN(t)))||20)]).range([w,b]),$=A(u);this.drawWindBarb(m,r,f,y,v,p,$,s<400?.7:.8)}}drawWindBarb(t,e,i,a,s,r,o,n=.8){const d=t.append("g").attr("transform",`translate(${e},${i}) rotate(${r%360}) scale(${n})`),l=-o/2,h=+o/2;if(a<2)return void d.append("circle").attr("class","wind-barb-calm").attr("cx",0).attr("cy",0).attr("r",4);d.append("line").attr("class","wind-barb").attr("x1",0).attr("y1",l).attr("x2",0).attr("y2",h),d.append("circle").attr("class","wind-barb-dot").attr("cx",0).attr("cy",h).attr("r",4);let c=a,u=l,m=Math.floor(c/50);c-=50*m;let g=Math.floor(c/10);c-=10*g;let p=Math.floor(c/5);c-=5*p;for(let t=0;t<m;t++,u+=10.5){const t=10,e=12;d.append("polygon").attr("class","wind-barb-pennant").attr("points",`0,${u} ${e},${u+3} 0,${u+t}`).attr("fill","currentColor").attr("stroke","currentColor").attr("stroke-width",1)}for(let t=0;t<g;t++,u+=7)d.append("line").attr("class","wind-barb-feather").attr("x1",0).attr("y1",u).attr("x2",12).attr("y2",u+3).attr("stroke-width",2);for(let t=0;t<p;t++,u+=7)d.append("line").attr("class","wind-barb-half").attr("x1",0).attr("y1",u).attr("x2",6).attr("y2",u+2).attr("stroke-width",2);if("number"==typeof s&&!isNaN(s)&&s>a){let t=l,e=s;const i=7;let a=Math.floor(e/50);e-=50*a;let r=Math.floor(e/10);e-=10*r;let o=Math.floor(e/5);for(let e=0;e<a;e++,t+=1.5*i){const e=10,i=-12;d.append("polygon").attr("class","wind-barb-gust-pennant").attr("points",`0,${t} ${i},${t+3} 0,${t+e}`).attr("fill","#FF8C00").attr("stroke","#FF8C00").attr("stroke-width",1)}for(let e=0;e<r;e++,t+=i)d.append("line").attr("class","wind-barb-gust-feather").attr("x1",0).attr("y1",t).attr("x2",-12).attr("y2",t+3).attr("stroke","#FF8C00").attr("stroke-width",2);for(let e=0;e<o;e++,t+=i)d.append("line").attr("class","wind-barb-gust-half").attr("x1",0).attr("y1",t).attr("x2",-6).attr("y2",t+2).attr("stroke","#FFA500").attr("stroke-width",2)}}}var xt;let It=xt=class extends lt{get showPrecipitation(){return void 0===this.show_precipitation||this.show_precipitation}constructor(){super(),this._chartRenderer=null,this._missingForecastKeys=[],this._availableHours="unknown",this.title="",this.showCloudCover=!0,this.showPressure=!0,this.showWeatherIcons=!0,this.showWind=!0,this.denseWeatherIcons=!0,this.meteogramHours="48h",this.styles={},this.diagnostics=a,this.debug=!1,this.focussed=!1,this.displayMode="full",this.aspectRatio="16:9",this.layoutMode=void 0,this.chartLoaded=!1,this.meteogramError="",this.errorCount=0,this.lastErrorTime=0,this._drawCallIndex=0,this._weatherRetryTimeout=0,this._weatherRefreshTimeout=0,this._chartRenderInProgress=!1,this._pendingRender=!1,this._lastApiSuccess=!1,this._margin={top:32,right:48,bottom:32,left:48},this._chartWidth=0,this._chartHeight=0,this.iconCache=new Map,this.iconBasePath="https://raw.githubusercontent.com/metno/weathericons/refs/heads/main/weather/svg/",this.svg=null,this._resizeObserver=null,this._lastWidth=0,this._lastHeight=0,this._lastResizeTime=0,this._resizeEndTimer=null,this._lastRenderedWidth=0,this._lastRenderedHeight=0,this._intersectionObserver=null,this._mutationObserver=null,this._isInitialized=!1,this._lastRenderedData=null,this.apiExpiresAt=null,this.apiLastModified=null,this.weatherDataPromise=null,this._weatherApiInstance=null,this._weatherEntityApiInstance=null,this._redrawScheduled=!1,this._lastDrawScheduleTime=0,this._drawThrottleMs=200,this._lastWeatherData=null,this._currentUnits={},this._dataAvailability={wind:!1,pressure:!1,cloudCover:!1,precipitation:!1,precipitationMinMax:!1,temperature:!1,windGust:!1},this._tempUnit="°C",this._pressureUnit="hPa",this._windSpeedUnit="m/s",this._precipUnit="mm",this._statusExpiresAt="",this._statusLastRender="",this._statusLastFetch="",this._statusApiSuccess=null,this.attributionTooltipOpen=!1,this.entityAttribution=null,this._onAttributionIconClick=t=>{t.stopPropagation(),this.attributionTooltipOpen=!this.attributionTooltipOpen},this._onDocumentClick=t=>{var e;if(!this.attributionTooltipOpen)return;const i=t.composedPath?t.composedPath():t.path||[],a=null===(e=this.shadowRoot)||void 0===e?void 0:e.querySelector(".attribution-icon");a&&i.includes(a)||(this.attributionTooltipOpen=!1)},this._onVisibilityChange=()=>{document.hidden?this._pauseWeatherSubscription("tab hidden"):this.isConnected&&this._resumeWeatherSubscription("tab visible").then(()=>{this._handleVisibilityChange()})},this._onLocationChanged=()=>{setTimeout(()=>{this.isConnected&&this._isElementVisible()&&this._handleVisibilityChange()},100)},this._onOrientationChange=()=>{this._scheduleDrawMeteogram("orientationchange",!0)},this.schedulePeriodicCacheCleanup(),this.title="",this.latitude=void 0,this.longitude=void 0,this.showCloudCover=!0,this.showPressure=!0,this.showWeatherIcons=!0,this.showWind=!0,this.denseWeatherIcons=!0,this.meteogramHours="48h",this.styles={},this.diagnostics=a,this.debug=!1,this.chartLoaded=!1,this.meteogramError="",this.errorCount=0,this.lastErrorTime=0,this._statusExpiresAt="",this._statusLastRender="",this._statusLastFetch="",this._statusApiSuccess=null}get weatherEntityAPI(){return this._weatherEntityApiInstance}debugMeteogram(){return console.log("=== METEOGRAM CARD DEBUG ==="),console.log("Entity ID:",this.entityId),console.log("Weather Entity API Instance:",!!this._weatherEntityApiInstance),console.log("Weather API Instance:",!!this._weatherApiInstance),console.log("Card Configuration:",{entityId:this.entityId,latitude:this.latitude,longitude:this.longitude,diagnostics:this.diagnostics,usingEntity:!!this.entityId&&"none"!==this.entityId,usingDirectAPI:!(!this.latitude||!this.longitude)}),this._weatherEntityApiInstance?(console.log("Weather Entity API available - use: card.weatherEntityAPI.getFreshnessSummary()"),this._weatherEntityApiInstance.getFreshnessSummary()):this._weatherApiInstance?(console.log("Using Met.no API directly - Entity API not available"),console.log("API Instance:",this._weatherApiInstance),"Using Met.no API directly - no entity debugging available"):(console.log("No weather instances available - card may not be initialized"),"Card not fully initialized")}_debugLog(...t){this.debug&&console.debug(...t)}async getIconSVG(t){if(this.iconCache.has(t))return this.iconCache.get(t);try{const e=`${this.iconBasePath}${t}.svg`,i=await fetch(e);if(!i.ok){if(t.endsWith("_day")||t.endsWith("_night")){const e=t.replace(/_(day|night)$/,""),i=`${this.iconBasePath}${e}.svg`,a=await fetch(i);if(a.ok){const t=await a.text();if(t.includes("<svg")&&t.length>20)return this.iconCache.set(e,t),t}}return console.warn(`Failed to load icon: ${t}, status: ${i.status}`),""}const a=await i.text();return!a.includes("<svg")||a.length<20?(console.warn(`Invalid SVG content for ${t}`),""):(this.iconCache.set(t,a),a)}catch(e){return console.error(`Error loading icon ${t}:`,e),""}}_scheduleDrawMeteogram(t="unknown",i=!1){const a=Date.now();this._drawCallIndex++;const s=`${t}#${this._drawCallIndex}`;this._debugLog(`[${e}] _scheduleDrawMeteogram called from: ${s}`),i||!(this._redrawScheduled||a-this._lastDrawScheduleTime<this._drawThrottleMs)?(this._redrawScheduled=!0,this._lastDrawScheduleTime=a,setTimeout(()=>{this._redrawScheduled=!1,this._lastDrawScheduleTime=Date.now(),this._drawMeteogram(s)},50)):this._debugLog(`[${e}] _scheduleDrawMeteogram: redraw already scheduled or throttled, skipping.`)}setConfig(t){var i;let s="full";"string"==typeof t.display_mode?s=t.display_mode:"boolean"==typeof t.focussed&&(s=t.focussed?"focussed":"full");const r=void 0!==t.latitude?parseFloat(Number(t.latitude).toFixed(4)):void 0,o=void 0!==t.longitude?parseFloat(Number(t.longitude).toFixed(4)):void 0;void 0!==this.latitude&&parseFloat(Number(this.latitude).toFixed(4)),void 0!==this.longitude&&parseFloat(Number(this.longitude).toFixed(4)),t.title&&(this.title=t.title),void 0!==t.latitude&&(this.latitude=r),void 0!==t.longitude&&(this.longitude=o),Number.isFinite(t.altitude)?this.altitude=t.altitude:this.altitude=void 0,this.showCloudCover=void 0===t.show_cloud_cover||t.show_cloud_cover,this.showPressure=void 0===t.show_pressure||t.show_pressure,this.showWeatherIcons=void 0===t.show_weather_icons||t.show_weather_icons,this.showWind=void 0===t.show_wind||t.show_wind,this.denseWeatherIcons=void 0===t.dense_weather_icons||t.dense_weather_icons,this.meteogramHours=t.meteogram_hours||"48h",this.styles=t.styles||{},this.diagnostics=void 0!==t.diagnostics?t.diagnostics:a,this.debug=void 0!==t.debug&&t.debug,this.entityId=t.entity_id||void 0,this.focussed="focussed"===s,this.displayMode=s,this.aspectRatio=t.aspect_ratio||"16:9",this.layoutMode=null!==(i=t.layout_mode)&&void 0!==i?i:"sections",this.hass&&this._initializeUnits();const n=this.entityId,d=t.entity_id||void 0,l=n!==d;this.entityId=d,l&&(null!=n&&this._weatherEntityApiInstance&&(this._weatherEntityApiInstance.destroy("entityId changed"),this._weatherEntityApiInstance=null),d&&this.hass&&(this._debugLog(`[${e}] setConfig Initializing WeatherEntityAPI for entity: ${this.entityId}`,this.hass),this._weatherEntityApiInstance=new wt(this.hass,d,this,"setConfig",this.debug)))}static getConfigElement(){const t=document.createElement("meteogram-card-editor");return t.setConfig({show_cloud_cover:!0,show_pressure:!0,show_precipitation:!0,show_weather_icons:!0,show_wind:!0,dense_weather_icons:!0,meteogram_hours:"48h",diagnostics:a,debug:!1}),t}static getStubConfig(){return{title:"Weather Forecast",show_cloud_cover:!0,show_pressure:!0,show_precipitation:!0,show_weather_icons:!0,show_wind:!0,dense_weather_icons:!0,meteogram_hours:"48h",diagnostics:a,debug:!1,altitude:void 0}}getCardSize(){return 9}getGridOptions(){return{rows:8,columns:"full",min_rows:4,max_rows:8}}connectedCallback(){super.connectedCallback(),this._isInitialized=!1,this.updateComplete.then(()=>{this._setupResizeObserver(),this._setupVisibilityObserver(),this._setupMutationObserver(),document.addEventListener("visibilitychange",this._onVisibilityChange.bind(this)),window.addEventListener("location-changed",this._onLocationChanged.bind(this)),window.addEventListener("orientationchange",this._onOrientationChange.bind(this)),this.isConnected&&(this.chartLoaded?this._scheduleDrawMeteogram("connectedCallback"):this.loadD3AndDraw())}),document.addEventListener("click",this._onDocumentClick,!0)}disconnectedCallback(){this._teardownResizeObserver(),this._teardownVisibilityObserver(),this._teardownMutationObserver(),this._weatherEntityApiInstance&&(this._weatherEntityApiInstance.destroy("disconnectedCallback"),this._weatherEntityApiInstance=null),document.removeEventListener("visibilitychange",this._onVisibilityChange.bind(this)),window.removeEventListener("location-changed",this._onLocationChanged.bind(this)),window.removeEventListener("orientationchange",this._onOrientationChange.bind(this)),document.removeEventListener("click",this._onDocumentClick,!0),this.cleanupChart(),this._weatherRetryTimeout&&(clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=null),this._weatherRefreshTimeout&&(clearTimeout(this._weatherRefreshTimeout),this._weatherRefreshTimeout=null),super.disconnectedCallback()}_isElementVisible(){if(!this.isConnected||!this.shadowRoot)return!1;if(document.hidden)return!1;const t=this.shadowRoot.host;if(!t)return!1;if(0===t.offsetWidth&&0===t.offsetHeight)return!1;const e=window.getComputedStyle(t);if("none"===e.display)return!1;if("hidden"===e.visibility)return!1;const i=t.getBoundingClientRect();return!(i.top+i.height<=0||i.left+i.width<=0||i.bottom>=window.innerHeight||i.right>=window.innerWidth)}_setupVisibilityObserver(){var t;this._intersectionObserver||(this._intersectionObserver=new IntersectionObserver(t=>{for(const e of t)if(e.isIntersecting){this._handleVisibilityChange();break}},{threshold:[.1]}),(null===(t=this.shadowRoot)||void 0===t?void 0:t.host)&&this._intersectionObserver.observe(this.shadowRoot.host))}_teardownVisibilityObserver(){this._intersectionObserver&&(this._intersectionObserver.disconnect(),this._intersectionObserver=null)}_setupMutationObserver(){var t;if(!this._mutationObserver){this._mutationObserver=new MutationObserver(t=>{for(const e of t){if(e.target instanceof HTMLElement&&("HA-TAB"===e.target.tagName||"HA-TABS"===e.target.tagName||e.target.classList.contains("content")||e.target.hasAttribute("active")))break;if("attributes"===e.type&&("style"===e.attributeName||"class"===e.attributeName||"hidden"===e.attributeName||"active"===e.attributeName))break}}),document.querySelectorAll("ha-tabs, ha-tab, ha-tab-container").forEach(t=>{t&&this._mutationObserver.observe(t,{attributes:!0,childList:!0,subtree:!0})});const e=(null===(t=this.shadowRoot)||void 0===t?void 0:t.host)||null;if(e instanceof HTMLElement){let t=e;for(;t&&t.parentElement;)this._mutationObserver.observe(t.parentElement,{attributes:!0,attributeFilter:["style","class","hidden","active"],childList:!1,subtree:!1}),t=t.parentElement}const i=document.querySelector("home-assistant, ha-panel-lovelace");i&&this._mutationObserver.observe(i,{childList:!0,subtree:!0})}}_teardownMutationObserver(){this._mutationObserver&&(this._mutationObserver.disconnect(),this._mutationObserver=null)}_handleVisibilityChange(){var t;if(this._isElementVisible()){this._weatherEntityApiInstance&&!this._weatherEntityApiInstance.isSubscriptionActive()&&(this._debugLog(`[${e}] Element became visible, resuming subscription`),this._resumeWeatherSubscription("element visible"));const i=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector("#chart"),a=null==i?void 0:i.querySelector("svg"),s=i&&i.offsetWidth>0&&i.offsetHeight>0,r=!this.svg||!i||""===i.innerHTML||0===i.clientWidth||!a;if(!r&&a&&s)return void this._debugLog(`[${e}] _handleVisibilityChange: chart already rendered and visible, skipping redraw.`);r&&this.chartLoaded&&(this.cleanupChart(),this.requestUpdate(),this.updateComplete.then(()=>this._scheduleDrawMeteogram("_handleVisibilityChange")))}else this._pauseWeatherSubscription("element hidden")}_setupResizeObserver(){this._resizeObserver||(this._resizeObserver=new ResizeObserver(this._onResize.bind(this))),setTimeout(()=>{var t;const e=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector("#chart");e&&this._resizeObserver&&this._resizeObserver.observe(e)},100)}_teardownResizeObserver(){this._resizeObserver&&(this._resizeObserver.disconnect(),this._resizeObserver=null)}_onResize(t){var i;if(0===t.length)return;const a=t[0],s=Date.now();this._lastResizeTime||(this._lastResizeTime=0);const r=Math.abs(a.contentRect.width-this._lastWidth)>2,o=Math.abs(a.contentRect.height-this._lastHeight)>2,n=r||o;if(n&&this._chartRenderInProgress)return this._pendingRender=!0,this._debugLog(`[${e}] _onResize: chart render in progress, queuing redraw after render.`),void this._scheduleResizeEndTimer();if(n&&s-this._lastResizeTime>350)return this._lastWidth=a.contentRect.width,this._lastHeight=a.contentRect.height,this._lastResizeTime=s,this._scheduleDrawMeteogram("_onResize-significant"),void this._scheduleResizeEndTimer();const d=null===(i=this.shadowRoot)||void 0===i?void 0:i.querySelector("#chart");d&&d.querySelector("svg")||this._scheduleDrawMeteogram("_onResize-fallback"),this._scheduleResizeEndTimer()}_scheduleResizeEndTimer(){this._resizeEndTimer&&clearTimeout(this._resizeEndTimer),this._resizeEndTimer=window.setTimeout(()=>{this._onResizeEnd()},400)}_onResizeEnd(){var t;this._resizeEndTimer=null;const i=null===(t=this.shadowRoot)||void 0===t?void 0:t.querySelector("#chart");if(!i)return;const a=i.offsetWidth,s=i.offsetHeight;Math.abs(a-this._lastRenderedWidth)>2||Math.abs(s-this._lastRenderedHeight)>2?(this._debugLog(`[${e}] _onResizeEnd: detected final size change, scheduling redraw.`),this._scheduleDrawMeteogram("_onResizeEnd-final")):this._debugLog(`[${e}] _onResizeEnd: no significant size change since last render, skipping redraw.`)}_pauseWeatherSubscription(t){this._weatherEntityApiInstance&&this._weatherEntityApiInstance.isSubscriptionActive()&&(this._debugLog(`[${e}] Pausing weather subscription from: ${t}`),this._weatherEntityApiInstance.pause(t))}async _resumeWeatherSubscription(t){if(this._weatherEntityApiInstance&&!this._weatherEntityApiInstance.isSubscriptionActive()){this._debugLog(`[${e}] Resuming weather subscription from: ${t}`);try{await this._weatherEntityApiInstance.resume(t),this._debugLog(`[${e}] Weather subscription resumed successfully from: ${t}`)}catch(i){console.error(`[${e}] Failed to resume weather subscription from: ${t}:`,i)}}}firstUpdated(t){var e;const i=(null===(e=this.constructor.styles)||void 0===e?void 0:e.cssText)||"",a=this.shadowRoot;if(a&&!a.querySelector("style[data-meteogram-card]")){const t=document.createElement("style");t.setAttribute("data-meteogram-card",""),t.textContent=i,a.prepend(t)}if(!this.querySelector("style[data-meteogram-card]")){const t=document.createElement("style");t.setAttribute("data-meteogram-card",""),t.textContent=i,this.prepend(t)}setTimeout(()=>{this.loadD3AndDraw()},50),this._updateDarkMode()}updated(t){var i,a;t.has("hass")&&this.hass&&this._initializeUnits();const s=t.has("latitude")||t.has("longitude")||t.has("showCloudCover")||t.has("showPressure")||t.has("show_precipitation")||t.has("showWeatherIcons")||t.has("showWind")||t.has("denseWeatherIcons")||t.has("meteogramHours");if(s){if(this._debugLog(`[${e}] updated(): scheduling redraw, chartLoaded=${this.chartLoaded}`),this.chartLoaded&&s){const t=null===(i=this.shadowRoot)||void 0===i?void 0:i.querySelector("#chart");null==t||t.querySelector("svg"),t&&t.offsetWidth>0&&t.offsetHeight,this._scheduleDrawMeteogram("updated")}if(!this._isInitialized&&this.shadowRoot&&(this._isInitialized=!0,this.chartLoaded)){const t=null===(a=this.shadowRoot)||void 0===a?void 0:a.querySelector("#chart");t&&""===t.innerHTML&&this._scheduleDrawMeteogram("updated-forced")}this._updateDarkMode()}else this._debugLog(`[${e}] updated(): no redraw needed or chart render in progress, skipping.`)}static encodeCacheKey(t,e){const i=String(t)+String(e);return btoa(i)}getLocationKey(t,e){return xt.encodeCacheKey(Number(t.toFixed(4)),Number(e.toFixed(4)))}_saveDefaultLocationToStorage(t,i){try{const e={latitude:parseFloat(t.toFixed(4)),longitude:parseFloat(i.toFixed(4))};localStorage.setItem("meteogram-card-default-location",JSON.stringify(e))}catch(t){this._debugLog(`[${e}] Failed to save default location to localStorage:`,t)}}_loadDefaultLocationFromStorage(){try{const t=localStorage.getItem("meteogram-card-default-location");if(t)try{const e=JSON.parse(t),i=parseFloat(Number(e.latitude).toFixed(4)),a=parseFloat(Number(e.longitude).toFixed(4));if(!isNaN(i)&&!isNaN(a))return{latitude:i,longitude:a}}catch{}return null}catch(t){return this._debugLog(`[${e}] Failed to load default location from localStorage:`,t),null}}_checkAndUpdateLocation(){if(void 0!==this.latitude&&void 0!==this.longitude)return this.latitude=parseFloat(Number(this.latitude).toFixed(4)),this.longitude=parseFloat(Number(this.longitude).toFixed(4)),void(this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude&&this._weatherApiInstance.altitude===this.altitude||(this._weatherApiInstance=new vt(this.latitude,this.longitude,this.altitude,this.debug)));if(this.hass&&(void 0===this.latitude||void 0===this.longitude)){const t=this.hass.config||{};if(void 0!==t.latitude&&void 0!==t.longitude){const i=parseFloat(Number(t.latitude).toFixed(4)),a=parseFloat(Number(t.longitude).toFixed(4)),s=this._loadDefaultLocationFromStorage();return s&&s.latitude===i&&s.longitude===a||this._saveDefaultLocationToStorage(i,a),this.latitude=i,this.longitude=a,this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude&&this._weatherApiInstance.altitude===this.altitude||(this._weatherApiInstance=new vt(this.latitude,this.longitude,this.altitude,this.debug)),void this._debugLog(`[${e}] Using HA location: ${this.latitude}, ${this.longitude}`)}}if(void 0===this.latitude||void 0===this.longitude){const t=this._loadDefaultLocationFromStorage();t?(this.latitude=t.latitude,this.longitude=t.longitude,this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude&&this._weatherApiInstance.altitude===this.altitude||(this._weatherApiInstance=new vt(this.latitude,this.longitude,this.altitude,this.debug)),this._debugLog(`[${e}] Using cached default-location: ${this.latitude}, ${this.longitude}`)):(this.latitude=51.5074,this.longitude=-.1278,this._weatherApiInstance&&this._weatherApiInstance.lat===this.latitude&&this._weatherApiInstance.lon===this.longitude&&this._weatherApiInstance.altitude===this.altitude||(this._weatherApiInstance=new vt(this.latitude,this.longitude,this.altitude,this.debug)),this._debugLog(`[${e}] Using default location: ${this.latitude}, ${this.longitude}`))}}async loadD3AndDraw(){this._chartRenderer||(this._chartRenderer=new $t(this));try{await this._chartRenderer.ensureD3Loaded(),this.chartLoaded=!0,this._scheduleDrawMeteogram("loadD3AndDraw")}catch(t){console.error("Error loading D3.js:",t),this.setError("Failed to load D3.js visualization library. Please refresh the page.")}}async fetchWeatherData(){var t;if(this.logMethodEntry("fetchWeatherData",{entityId:this.entityId,lat:this.latitude,lon:this.longitude}),this.entityId&&"none"!==this.entityId&&!this._weatherEntityApiInstance?this.hass&&(this._debugLog(`[${e}] Initializing WeatherEntityAPI for entity: ${this.entityId}`,this._weatherEntityApiInstance),this._weatherEntityApiInstance=new wt(this.hass,this.entityId,this,"fetchWeatherData",this.debug)):this.entityId&&"none"==this.entityId&&this._weatherEntityApiInstance&&(this._weatherEntityApiInstance.destroy("fetchWeatherData"),this._weatherEntityApiInstance=null),this.entityId&&"none"!==this.entityId&&this._weatherEntityApiInstance){const e=this._weatherEntityApiInstance.getForecastData(),i=this._weatherEntityApiInstance.getDiagnosticInfo();"not yet fetched"!==i.inMemoryData.lastFetchFormatted&&(this._statusLastFetch=i.inMemoryData.lastFetchFormatted),i.inMemoryData.expiresAt&&(this._statusExpiresAt=new Date(i.inMemoryData.expiresAt).toISOString(),this.apiExpiresAt=i.inMemoryData.expiresAt);let a=null;if(this.hass&&this.entityId&&this.hass.states&&this.hass.states[this.entityId]&&(a=(null===(t=this.hass.states[this.entityId].attributes)||void 0===t?void 0:t.attribution)||null),this.entityAttribution=a,!e||!e.time||0===e.time.length)throw new Error(`Weather entity ${this.entityId} is unavailable. Waiting for it to become available...`);return this._currentUnits=e&&e.units?e.units:{},this.updateDataAvailability(e),this.checkMissingForecastKeys(e),e}const i=void 0!==this.latitude?parseFloat(Number(this.latitude).toFixed(4)):void 0,a=void 0!==this.longitude?parseFloat(Number(this.longitude).toFixed(4)):void 0;if(this._debugLog(`[${e}] fetchWeatherData called with lat=${i}, lon=${a}`),!i||!a){this._checkAndUpdateLocation();const t=void 0!==this.latitude?parseFloat(Number(this.latitude).toFixed(4)):void 0,e=void 0!==this.longitude?parseFloat(Number(this.longitude).toFixed(4)):void 0;if(!t||!e)throw new Error("Could not determine location. Please check your card configuration or Home Assistant settings.")}this._weatherApiInstance&&this._weatherApiInstance.lat===i&&this._weatherApiInstance.lon===a&&this._weatherApiInstance.altitude===this.altitude||(this._weatherApiInstance=new vt(i,a,this.altitude,this.debug));const s=this._weatherApiInstance;if(this.weatherDataPromise){if(this._weatherApiInstance&&this._weatherApiInstance._lastFetchTime){const t=this._weatherApiInstance._lastFetchTime;t&&(this._statusLastFetch=new Date(t).toISOString())}return this._debugLog(`[${e}] fetchWeatherData: returning existing in-progress promise.`),this.weatherDataPromise}return this.weatherDataPromise=(async()=>{let t=null;try{const e=await s.getForecastData();if(!e)throw new Error("No forecast data available from WeatherAPI.");t=e,this.updateDataAvailability(t),this.checkMissingForecastKeys(t),this.apiExpiresAt=s.expiresAt,this._statusApiSuccess=!0,this._lastApiSuccess=!0,this._currentUnits=t&&t.units?t.units:{};let i=48;"8h"===this.meteogramHours?i=8:"12h"===this.meteogramHours?i=12:"24h"===this.meteogramHours?i=24:"48h"===this.meteogramHours?i=48:"54h"===this.meteogramHours?i=54:"max"===this.meteogramHours&&(i=t.time.length);if(["pressure","time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windDirection","symbolCode"].forEach(e=>{Array.isArray(t[e])&&(t[e]=t[e].slice(0,i))}),s&&s._lastFetchTime){const t=s._lastFetchTime;t&&(this._statusLastFetch=new Date(t).toISOString())}return t}catch(t){console.error(`[${e}] ERROR in fetchWeatherData:`,{error:t,errorMessage:null==t?void 0:t.message,errorStack:null==t?void 0:t.stack,weatherApiLastError:s.lastError,weatherApiStatusCode:s.lastStatusCode,weatherApiExpiresAt:s.expiresAt}),this._statusApiSuccess=!1;let i=s.getDiagnosticText();throw this._debugLog(`[${e}] WeatherAPI diagnostic:`,i),this.setError(i),this.logErrorContext("fetchWeatherData",t),new Error(`<br>Failed to get weather data: ${t.message}\n<br>Check your network connection, browser console, and API accessibility.\n\n${i}`)}})(),this.weatherDataPromise}cleanupChart(){try{if(this.svg&&"function"==typeof this.svg.remove&&(this.svg.remove(),this.svg=null),this.shadowRoot){const t=this.shadowRoot.querySelector("#chart");t&&(t.innerHTML="")}}catch(t){console.warn("Error cleaning up chart:",t)}}updateDataAvailability(t){this._dataAvailability.temperature=Array.isArray(t.temperature)&&t.temperature.some(t=>null!==t&&"number"==typeof t),this._dataAvailability.wind=Array.isArray(t.windSpeed)&&t.windSpeed.some(t=>null!==t&&"number"==typeof t),this._dataAvailability.pressure=Array.isArray(t.pressure)&&t.pressure.some(t=>null!==t&&"number"==typeof t),this._dataAvailability.cloudCover=Array.isArray(t.cloudCover)&&t.cloudCover.some(t=>null!==t&&"number"==typeof t),this._dataAvailability.precipitation=Array.isArray(t.rain)&&t.rain.some(t=>null!==t&&"number"==typeof t),this._dataAvailability.precipitationMinMax=Array.isArray(t.rainMin)&&t.rainMin.some(t=>null!==t&&"number"==typeof t)||Array.isArray(t.rainMax)&&t.rainMax.some(t=>null!==t&&"number"==typeof t),this._dataAvailability.windGust=Array.isArray(t.windGust)&&t.windGust.some(t=>null!==t&&"number"==typeof t)}checkMissingForecastKeys(t){const e=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windDirection","windGust","symbolCode","pressure"];if(!t||"object"!=typeof t)return this._missingForecastKeys=e,void(this._availableHours="unknown");const i=e.filter(e=>!(e in t)||!Array.isArray(t[e])||0===t[e].length||t[e].every(t=>null==t));if(this._missingForecastKeys=i,Array.isArray(t.time)&&t.time.length>1){const e=t.time,i=e[0],a=e[e.length-1];if(i instanceof Date&&a instanceof Date){const t=a.getTime()-i.getTime();this._availableHours=Math.round(t/36e5)+1}else if("string"==typeof i&&"string"==typeof a){const t=new Date(a).getTime()-new Date(i).getTime();this._availableHours=Math.round(t/36e5)+1}else this._availableHours=e.length}else this._availableHours="unknown"}async _drawMeteogram(t="unknown"){var i,a;this.logMethodEntry("_drawMeteogram",{caller:t}),this._debugLog(`[${e}] _drawMeteogram called from: ${t}`);const s=Date.now();if(this.meteogramError&&s-this.lastErrorTime<6e4)return void this.errorCount++;if(this.meteogramError="",this._checkAndUpdateLocation(),!this.latitude||!this.longitude)return void this.setError("Location not available. Please check your card configuration or Home Assistant settings.");await this.updateComplete,this._logDomState();if(xt.lastD3RetryTime||(xt.lastD3RetryTime=0),!window.d3)try{return void await this.loadD3AndDraw()}catch(t){const e=Date.now();if(e-xt.lastD3RetryTime<1e4)return;return xt.lastD3RetryTime=e,void this.setError("D3.js library could not be loaded. Please refresh the page.")}this.cleanupChart(),await new Promise(t=>setTimeout(t,10));const r=null===(i=this.shadowRoot)||void 0===i?void 0:i.querySelector("#chart");if(r)this._renderChart(r,"_drawMeteogram");else if(console.error("Chart container not found in DOM"),this.isConnected){this.requestUpdate(),await this.updateComplete,await new Promise(t=>setTimeout(t,50));const t=null===(a=this.shadowRoot)||void 0===a?void 0:a.querySelector("#chart");if(!t){if(console.error("Chart container still not found after retry"),this.shadowRoot){const t=this.shadowRoot.querySelector(".card-content");if(t&&this.isConnected){t.innerHTML='<div id="chart"></div>';const e=this.shadowRoot.querySelector("#chart");if(e)return void this._renderChart(e,"_drawMeteogram-finalAttempt")}}return}this._renderChart(t,"_drawMeteogram-retry")}}_renderChart(t,i="unknown"){if(this.logMethodEntry("_renderChart",{source:i}),this._debugLog(`[${e}] _renderChart called from: ${i}`),this._chartRenderInProgress)return;this._chartRenderInProgress=!0;const a=t.parentElement;let s,r,o=a?a.clientWidth:t.offsetWidth||350,n=a?a.clientHeight:t.offsetHeight||180,d=this.aspectRatio&&"sections"!==this.layoutMode;if(d&&"string"==typeof this.aspectRatio){const[e,i]=this.aspectRatio.split(":").map(Number);e>0&&i>0?(s=o,r=Math.round(s*(i/e)),r>n&&(r=n,s=Math.round(r*(e/i)))):(s=t.offsetWidth>0?t.offsetWidth:o,r=t.offsetHeight>0?t.offsetHeight:n)}else s=t.offsetWidth>0?t.offsetWidth:o,r=t.offsetHeight>0?t.offsetHeight:n;t.innerHTML="",this.fetchWeatherData().then(i=>{if(this._lastWeatherData=i,this.entityId&&"none"!==this.entityId&&this._weatherEntityApiInstance){if(!this._weatherEntityApiInstance.getForecastData())return void this.setError(`Weather entity ${this.entityId} is unavailable. Waiting for it to become available...`)}const a=this.showWind&&this._dataAvailability.wind,l=a?45:0;this._lastWidth=o,this._lastHeight=n,this._lastRenderedWidth=o,this._lastRenderedHeight=n,this.svg=window.d3.select(t).append("svg").attr("width",s).attr("height",r).attr("viewBox",`0 0 ${s} ${r}`).attr("preserveAspectRatio",d?"xMidYMid meet":"none");let h=48;"8h"===this.meteogramHours?h=8:"12h"===this.meteogramHours?h=12:"24h"===this.meteogramHours?h=24:"48h"===this.meteogramHours?h=48:"54h"===this.meteogramHours?h=54:"max"===this.meteogramHours&&(h=i.time.length);const c=t=>t&&Array.isArray(t)?t.slice(0,Math.min(h,t.length)+1):(console.warn(`[${e}] sliceData: received undefined/null array, returning empty array`),[]),u=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windGust","windDirection","symbolCode","pressure"].filter(t=>!i[t]||!Array.isArray(i[t]));u.length>0&&console.warn(`[${e}] ForecastData has undefined/non-array properties:`,u);const m={time:c(i.time),temperature:c(i.temperature),rain:c(i.rain),rainMin:c(i.rainMin),rainMax:c(i.rainMax),cloudCover:c(i.cloudCover),windSpeed:c(i.windSpeed),windGust:c(i.windGust),windDirection:c(i.windDirection),symbolCode:c(i.symbolCode),pressure:c(i.pressure),units:i.units};if(this.renderMeteogram(this.svg,m,s,r,l,30,a),this.errorCount=0,this._weatherRetryTimeout&&(clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=null),this._setupResizeObserver(),this._setupVisibilityObserver(),this._setupMutationObserver(),this.apiExpiresAt){const t=Date.now(),i=Math.max(this.apiExpiresAt+6e4-t,0);this._weatherRefreshTimeout&&clearTimeout(this._weatherRefreshTimeout),this._debugLog(`[${e}] Setting scheduled-refresh-after-expiresAt in ${Math.round(i/1e3)}s (at ${new Date(this.apiExpiresAt+6e4).toISOString()})`),this._weatherRefreshTimeout=window.setTimeout(()=>{this._scheduleDrawMeteogram("scheduled-refresh-after-expiresAt",!0)},i)}}).catch(t=>{var i;console.error(`[${e}] ERROR caught in _drawMeteogram:`,{error:t,message:null==t?void 0:t.message,stack:null==t?void 0:t.stack,name:null==t?void 0:t.name}),t.message&&t.message.includes("is unavailable. Waiting for it to become available")?(this.setError(`Weather entity ${this.entityId} is unavailable. Waiting for it to become available...`),this._weatherRetryTimeout&&clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=window.setTimeout(()=>{this.meteogramError="",this._drawMeteogram("retry-entity-unavailable")},500)):(console.error(`[${e}] Triggering 60-second retry due to error:`,{errorMessage:null==t?void 0:t.message,hasExistingMeteogramError:!!this.meteogramError,existingError:this.meteogramError,containsApiError:null===(i=this.meteogramError)||void 0===i?void 0:i.includes("API Error")}),this.meteogramError&&this.meteogramError.includes("API Error")?this.meteogramError+="<br><span style='color:#b71c1c;'>Weather data not available, retrying in 60 seconds</span>":this.setError("Weather data not available, retrying in 60 seconds"),this._weatherRetryTimeout&&clearTimeout(this._weatherRetryTimeout),this._weatherRetryTimeout=window.setTimeout(()=>{this.meteogramError="",this._drawMeteogram("retry-after-error")},6e4))}).finally(()=>{this._chartRenderInProgress=!1,this.weatherDataPromise=null,this._statusLastRender=(new Date).toISOString(),this._pendingRender&&(this._pendingRender=!1,this._drawMeteogram("pending-after-render"))})}getHaLocale(){return this.hass&&this.hass.language?this.hass.language:"en"}getForecastDataAge(){if(!this._lastWeatherData||!this._lastWeatherData.time||0===this._lastWeatherData.time.length)return"no data";const t=this._lastWeatherData.time[0],e=new Date,i=t instanceof Date?t:new Date(t);if(isNaN(i.getTime()))return"invalid data";const a=e.getTime()-i.getTime(),s=Math.abs(a),r=Math.floor(s/6e4),o=Math.floor(r/60),n=a<0?"in ":"";if(r<60)return`${n}${r} min`;if(o<24)return`${n}${o}h ${r%60}m`;return`${n}${Math.floor(o/24)}d ${o%24}h`}generateDiagnosticInfo(){let t="",e=null,i="not available",a="not available",s=this._statusLastRender||"unknown";const r=this.getForecastDataAge();if(this.entityId&&"none"!==this.entityId&&this._weatherEntityApiInstance){const s=this._weatherEntityApiInstance.getDiagnosticInfo(),o=s.inMemoryData.isExpired?"#f44336":"#4caf50";i="not set"!==s.inMemoryData.expiresAtFormatted?q`<span style="color:${o}">${s.inMemoryData.expiresAtFormatted}${s.inMemoryData.isExpired?" (EXPIRED)":""}</span>`:"not set",a=s.inMemoryData.lastFetchFormatted,t=`<div style='margin-top:8px;color:#ff9800;font-size:0.85em;line-height:1.4;'>\n        <b>📱 Entity API:</b> ${s.entityExists?"✅":"❌"} ${s.entityState||"unknown"} | <b>Last Updated:</b> ${s.entityLastUpdated?new Date(s.entityLastUpdated).toLocaleString():"unknown"}<br>\n        <b>Subscription:</b> ${s.hasSubscription?"✅":"❌"} | <b>Connection:</b> ${s.hasConnection?"✅":"❌"}<br>\n        <b>Last Data Fetch:</b> ${s.inMemoryData.lastFetchFormatted} | <b>Age:</b> ${s.inMemoryData.dataAgeMinutes} min<br>\n        <b>Last Forecast Fetched:</b> ${s.lastForecastFetch||"never"} ${s.lastForecastFetchAge?`(${s.lastForecastFetchAge})`:""}<br>\n        <b>Earliest Forecast:</b> ${r} ago<br>\n        <b>Data Expires:</b> <span style="color:${o}">${s.inMemoryData.expiresAtFormatted} ${s.inMemoryData.isExpired?"(EXPIRED)":""}</span><br>\n        <b>Hourly Data:</b> ${s.hourlyForecastData.status}\n      </div>`,e=null}else if(this._weatherApiInstance)try{const e=this._weatherApiInstance.getDiagnosticInfo(),s=e.isExpired?"#f44336":"#4caf50";if(this.apiExpiresAt){const t=Date.now()>this.apiExpiresAt,e=t?" (EXPIRED)":"";i=q`<span style="color:${t?"#f44336":"#4caf50"}">${new Date(this.apiExpiresAt).toLocaleString()}${e}</span>`}a=this._statusLastFetch?this._statusLastFetch.includes("T")?new Date(this._statusLastFetch).toLocaleString():this._statusLastFetch:"not available",t=`<div style='margin-top:8px;color:#ff9800;font-size:0.85em;line-height:1.4;'>\n          <b>🌤️ ${e.apiType}:</b> ${e.hasData?"✅":"❌"} Data | <b>Location:</b> ${e.location.lat.toFixed(2)}, ${e.location.lon.toFixed(2)}<br>\n          <b>Last Data Fetch:</b> ${e.lastFetchFormatted} | <b>Age:</b> ${e.dataAgeMinutes} min<br>\n          <b>Earliest Forecast:</b> ${r} ago<br>\n          <b>Data Expires:</b> <span style="color:${s}">${e.expiresAtFormatted} ${e.isExpired?"(EXPIRED)":""}</span><br>\n          <b>Hourly Data:</b> ${e.dataTimeLength} entries\n        </div>`}catch(e){console.error("[MeteogramCard] Error getting Weather API diagnostic info:",e),t=`<div style='margin-top:8px;color:#ff9800;font-size:0.85em;'>Weather API diagnostic error: ${e}</div>`}else t="<div style='margin-top:8px;color:#ff9800;font-size:0.85em;'>No diagnostic info available</div>";return{tooltip:t,panel:e,expires:i,lastFetch:a,lastRender:s}}isDaytimeAt(t){if(this.entityId&&this.hass&&this.hass.states&&this.hass.states[this.entityId]){const e=this.hass.states[this.entityId].attributes||{};if(e.sunrise&&e.sunset){const i=new Date(e.sunrise),a=new Date(e.sunset);return t>=i&&t<a}}if(this.hass&&this.hass.states&&this.hass.states["sun.sun"]){const t=this.hass.states["sun.sun"].attributes||{};if("number"==typeof t.elevation)return t.elevation>0}const e=t.getHours();return e>=6&&e<18}renderMeteogram(t,e,i,a,s=0,r=24,o=!1){var n;const d=window.d3,{time:l,temperature:h,rain:c,rainMin:u,rainMax:m,cloudCover:g,windSpeed:p,windGust:_,windDirection:f,symbolCode:y,pressure:v}=e,w=l.length;let b,A,$;this.getSystemTemperatureUnit(),this.getSystemPressureUnit(),this.getSystemWindSpeedUnit(),this.getSystemPrecipitationUnit(),f.some(t=>null!==t),this.entityId&&"none"!==this.entityId?(b=h,A=c,$=m):(b=h.map(t=>this.convertTemperature(t)),v.map(t=>this.convertPressure(t)),p.map(t=>this.convertWindSpeed(t)),_.map(t=>this.convertWindSpeed(t)),A=c.map(t=>null!==t?this.convertPrecipitation(t):null),u.map(t=>null!==t?this.convertPrecipitation(t):null),$=m.map(t=>null!==t?this.convertPrecipitation(t):null));const x=A.filter(t=>null!==t),I=$.filter(t=>null!==t),E=this.showPressure&&this._dataAvailability.pressure,S=this.showCloudCover&&this._dataAvailability.cloudCover,D=[];S&&D.push({class:"legend-cloud",label:"Cloud Cover"}),this.showPrecipitation&&this._dataAvailability.precipitation&&D.push({class:"legend-rain",label:"Precipitation"}),E&&D.push({class:"legend-pressure",label:"Pressure"}),this._dataAvailability.temperature&&D.push({class:"legend-temp",label:"Temperature"}),"core"===this.displayMode?this._margin={top:50,right:40,bottom:r+10,left:40}:this.focussed?this._margin={top:10,right:40,bottom:r+10,left:40}:this._margin=E?{top:70,right:70,bottom:r+10,left:70}:{top:70,right:40,bottom:r+10,left:70};const C=this._margin;this._chartHeight=this.focussed?a-s-r-10:a-s-r-50-10,this._chartWidth=i-C.left-C.right;let M=this._chartWidth/(w-1);const k=d.scaleLinear().domain([0,w-1]).range([0,this._chartWidth]);M=k(1)-k(0);const F=C.top-30,P=[];for(let t=0;t<w;t++)0!==t&&l[t].getDate()===l[t-1].getDate()||P.push(t);const T=[];for(let t=0;t<P.length;++t){const e=P[t],i=t+1<P.length?P[t+1]:w;T.push({start:e,end:i})}if(!t||"function"!=typeof t.selectAll||"function"!=typeof t.append)throw console.error("[MeteogramCard] svg is not a D3 selection:",t),new Error("SVG is not a D3 selection. D3 may not be loaded or svg was not created correctly.");const L=t.append("g").attr("transform",`translate(${C.left},${C.top})`);if(!L||"function"!=typeof L.selectAll||"function"!=typeof L.append)throw console.error("[MeteogramCard] chart is not a D3 selection:",L),new Error("Chart is not a D3 selection. D3 may not be loaded or chart was not created correctly.");const R=b.filter(t=>null!==t),W=d.scaleLinear().domain([Math.floor(d.min(R)-2),Math.ceil(d.max(R)+2)]).range([this._chartHeight,0]),O=d.scaleLinear().domain([0,Math.max(2,d.max([...I,...x])+1)]).range([this._chartHeight,0]);let z;if(this.showPressure&&this._dataAvailability.pressure){const t=v.filter(t=>null!==t&&"number"==typeof t&&!isNaN(t)),e=d.extent(t),i=.1*(e[1]-e[0]);z=d.scaleLinear().domain([100*Math.floor((e[0]-i)/100),100*Math.ceil((e[1]+i)/100)]).range([this._chartHeight,0])}const H="core"===this.displayMode?0:D.length,N="core"===this.displayMode?[]:D.map((t,e)=>({x:e*(this._chartWidth/H)+2,y:-45}));if(t.selectAll(".day-bg").data(T).enter().append("rect").attr("class","day-bg").attr("x",t=>C.left+k(t.start)).attr("y",C.top-42).attr("width",t=>{const e=k(Math.max(t.end-1,t.start))-k(t.start)+M,i=this._chartWidth-k(t.start);return Math.max(0,Math.min(e,i))}).attr("height",this._chartHeight+42).attr("opacity",(t,e)=>e%2==0?.16:0),this._chartRenderer||(this._chartRenderer=new $t(this)),this._chartRenderer.drawChartGrid(t,L,d,k,W,w,C,P),this._chartRenderer.drawGridOutline(L),this._chartRenderer&&"function"==typeof this._chartRenderer.drawDateLabels&&this._chartRenderer.drawDateLabels(t,l,P,C,k,this._chartWidth,F),this._chartRenderer.drawBottomHourLabels(t,e.time,C,k,s,i),S){const t="core"===this.displayMode?-1:D.findIndex(t=>t.class.includes("legend-cloud"));if(t>=0&&N.length>0){const e=N[t];this._chartRenderer.drawCloudBand(L,g,w,k,e.x,e.y)}else this._chartRenderer.drawCloudBand(L,g,w,k)}if(this.showPrecipitation&&this._dataAvailability.precipitation){const t="core"===this.displayMode?-1:D.findIndex(t=>t.class.includes("legend-rain"));if(t>=0&&N.length>0){const e=N[t];this._chartRenderer.drawRainBars(L,A,$,w,k,O,M,e.x,e.y)}else this._chartRenderer.drawRainBars(L,A,$,w,k,O,M)}if(E&&z){const t="core"===this.displayMode?-1:D.findIndex(t=>t.class.includes("legend-pressure"));if(t>=0&&N.length>0){const e=N[t];this._chartRenderer.drawPressureLine(L,v,k,z,e.x,e.y)}else this._chartRenderer.drawPressureLine(L,v,k,z)}if(o){let a=null===(n=e.units)||void 0===n?void 0:n.windSpeed;a||(a=this.entityId&&"none"!==this.entityId?this.getSystemWindSpeedUnit():"m/s"),this._chartRenderer.drawWindBand(t,k,s,C,i,w,l,p,_,f,a)}const U="core"===this.displayMode?-1:D.findIndex(t=>t.class.includes("legend-temp"));if(U>=0&&N.length>0){const t=N[U];this._chartRenderer.drawTemperatureLine(L,b,k,W,t.x,t.y)}else this._chartRenderer.drawTemperatureLine(L,b,k,W);this.showWeatherIcons&&this._chartRenderer.drawWeatherIcons(L,y,b,k,W,e,w)}render(){this._updateDarkMode();let t={...this.styles||{}},e={};for(const[i,a]of Object.entries(t))if("modes"===i&&"object"==typeof a)e.modes=a;else if("string"==typeof a||"number"==typeof a){e[i.startsWith("--")?i:`--${i}`]=String(a)}let a=!1;if(a=this.hass&&this.hass.themes&&"boolean"==typeof this.hass.themes.darkMode?this.hass.themes.darkMode:window.matchMedia&&window.matchMedia("(prefers-color-scheme: dark)").matches,e.modes&&"object"==typeof e.modes){if(a&&e.modes.dark){const t={};for(const[i,a]of Object.entries(e.modes.dark)){t[i.startsWith("--")?i:`--${i}`]=String(a)}e={...e,...t}}delete e.modes}Object.entries(e).forEach(([t,e])=>{t.startsWith("--")&&"string"==typeof e&&this.style.setProperty(t,e)});const s=Object.entries(e).filter(([t,e])=>t.startsWith("--")&&"string"==typeof e).map(([t,e])=>`${t}: ${e};`).join(" "),r=vt.METEOGRAM_CARD_API_CALL_COUNT>0?Math.round(100*vt.METEOGRAM_CARD_API_SUCCESS_COUNT/vt.METEOGRAM_CARD_API_CALL_COUNT):0,o=`API Success Rate: ${vt.METEOGRAM_CARD_API_SUCCESS_COUNT}/${vt.METEOGRAM_CARD_API_CALL_COUNT} (${r}%) since ${i.toISOString()}`,n="width:100%;height:100%;";if("focussed"===this.displayMode||this.focussed)return q`
        <ha-card style="${s}">
          <div class="card-content">
            ${this.meteogramError?q`<div
                  class="error"
                  style="white-space:normal;"
                  .innerHTML=${this.meteogramError}
                ></div>`:q`<div style="${n}">
                  <div id="chart" style="width:100%;height:100%"></div>
                </div>`}
          </div>
        </ha-card>
      `;const d=this.entityId&&"none"!==this.entityId&&this.entityAttribution||!(this.entityId&&"none"!==this.entityId);let l="#1976d2";this._lastApiSuccess?l="#388e3c":null===this._statusApiSuccess?l="#fbc02d":!1===this._statusApiSuccess&&(l="#b71c1c");let h="";if(this.entityId&&"none"!==this.entityId&&this.entityAttribution){let t="",e="";if(this.entityId){const i=this.entityId.split(".");if(2===i.length){i[0];const a=i[1],s={openweathermap:{name:"OpenWeatherMap",url:"https://www.home-assistant.io/integrations/openweathermap/"},met:{name:"Met.no (Norwegian Meteorological Institute)",url:"https://www.home-assistant.io/integrations/met/"},accuweather:{name:"AccuWeather",url:"https://www.home-assistant.io/integrations/accuweather/"},pirateweather:{name:"Pirate Weather",url:"https://www.home-assistant.io/integrations/pirateweather/"},tomorrowio:{name:"Tomorrow.io",url:"https://www.home-assistant.io/integrations/tomorrowio/"},weatherbit:{name:"Weatherbit",url:"https://www.home-assistant.io/integrations/weatherbit/"},forecast_solar:{name:"Forecast.Solar",url:"https://www.home-assistant.io/integrations/forecast_solar/"}};s[a]?(t=s[a].name,e=s[a].url):(t=a.replace(/_/g," ").replace(/\b\w/g,t=>t.toUpperCase()),e="")}}h=`\n                <div style='padding:8px;min-width:300px;max-width:450px;text-align:left;'>\n                    <div style='margin-bottom:4px;'>${this.entityAttribution}</div>\n                    <div style='margin-top:6px;font-size:0.97em;color:#555;'>\n                        Integration: ${e?`<a href='${e}' target='_blank' rel='noopener' style='color:inherit;text-decoration:underline;'>${t}</a>`:t}\n                        <span style='color:#888;'>(${this.entityId})</span>\n                    </div>\n                    ${this._missingForecastKeys&&this._missingForecastKeys.length>0?`<div style='margin-top:8px;color:#b71c1c;font-size:0.97em;'><b>Missing data:</b> ${this._missingForecastKeys.join(", ")}\n                    <br>Some supported features cannot be plotted because the required data is not provided.</div>`:""}\n                    ${this.generateDiagnosticInfo().tooltip}\n                    <div style='margin-top:8px;color:#1976d2;font-size:0.97em;'><b>Hours available in data source:</b> <b>${this.getAvailableHours()}</b></div>\n                    <div style='margin-top:8px;color:#666;font-size:0.9em;'><b>Card version:</b> ${xt.meteogramCardVersion}</div>\n                </div>\n            `}else h=`\n                <div style='padding:8px;min-width:300px;max-width:450px;text-align:left;'>\n                    <div style='margin-bottom:4px;'>\n                        Weather data from <a href='https://www.met.no/en' target='_blank' rel='noopener' style='color:inherit;text-decoration:underline;'>the Norwegian Meteorological Institute (MET Norway)</a>,\n                        licensed under <a href='https://creativecommons.org/licenses/by/4.0/' target='_blank' rel='noopener' style='color:inherit;text-decoration:underline;'>CC BY 4.0</a>\n                    </div>\n                    ${this._missingForecastKeys&&this._missingForecastKeys.length>0?`<div style='margin-top:8px;color:#b71c1c;font-size:0.97em;'><b>Missing data:</b> ${this._missingForecastKeys.join(", ")}</div>`:""}\n                    ${this.generateDiagnosticInfo().tooltip}\n                    <div style='margin-top:8px;color:#1976d2;font-size:0.97em;'><b>Hours available in data source:</b> <b>${this.getAvailableHours()}</b></div>\n                    <div style='margin-top:8px;color:#666;font-size:0.9em;'><b>Card version:</b> ${xt.meteogramCardVersion}</div>\n                </div>\n            `;return q`
      <ha-card style="${s}">
        ${this.title?q`<div class="card-header">${this.title}</div>`:""}
        <div class="card-content">
          ${d?q`
                <div class="attribution-icon-wrapper">
                  <span
                    class="attribution-icon"
                    style="color:${l};"
                    tabindex="0"
                    @click=${this._onAttributionIconClick}
                    @keydown=${t=>{"Enter"!==t.key&&" "!==t.key||this._onAttributionIconClick(t)}}
                    aria-label="Show attribution"
                    aria-expanded="${this.attributionTooltipOpen}"
                  >
                    <span style="font-size:1.3em;vertical-align:middle;"
                      >${"ℹ️"}</span
                    >
                    <span
                      class="attribution-tooltip${this.attributionTooltipOpen?" open":""}"
                      .innerHTML=${h}
                    ></span>
                  </span>
                </div>
              `:""}
          ${this.meteogramError?q`<div
                class="error"
                style="white-space:normal;"
                .innerHTML=${this.meteogramError}
              ></div>`:q`
                <div style="${n}">
                  <div id="chart" style="width:100%;height:100%"></div>
                </div>
                ${this.diagnostics?(()=>{const t=this.generateDiagnosticInfo();return q`
                        <div
                          id="meteogram-status-panel"
                          style="margin-top:12px; font-size:0.95em; background:#f5f5f5; border-radius:6px; padding:8px; color:#333;"
                          xmlns="http://www.w3.org/1999/html"
                        >
                          <b
                            >${ft(this.hass,"ui.card.meteogram.status_panel","Status Panel")}</b
                          >
                          <div
                            style="display:grid; grid-template-columns:1fr 1fr; gap:8px; margin-top:6px;"
                          >
                            <div>
                              <span
                                >${ft(this.hass,"ui.card.meteogram.status.expires_at","Expires At")}
                                : ${t.expires}</span
                              ><br />
                              <span
                                >${ft(this.hass,"ui.card.meteogram.status.last_render","Last Render")}
                                : ${t.lastRender}</span
                              ><br />
                              <span
                                >${ft(this.hass,"ui.card.meteogram.status.last_data_fetch","Last Data Fetch")}
                                : ${t.lastFetch}</span
                              >
                            </div>
                            <div>
                              <span
                                title="${this._lastApiSuccess?ft(this.hass,"ui.card.meteogram.status.success","success")+` : ${o}`:null===this._statusApiSuccess?ft(this.hass,"ui.card.meteogram.status.cached","cached")+` : ${o}`:ft(this.hass,"ui.card.meteogram.status.failed","failed")+` : ${o}`}"
                              >
                                ${ft(this.hass,"ui.card.meteogram.status.api_success","API Success")}
                                :
                                ${this._lastApiSuccess?"✅":null===this._statusApiSuccess?"❎":"❌"}
                              </span>
                              <br />
                              <span
                                >Card version:
                                <code
                                  >${xt.meteogramCardVersion}</code
                                ></span
                              ><br />
                              <span
                                >Client type:
                                <code>${function(){const t=navigator.userAgent;return/Home Assistant/.test(t)?"HA Companion":/Edg/.test(t)?"Edge":/Chrome/.test(t)?"Chrome":/Android/.test(t)?"Android":/iPhone|iPad|iPod/.test(t)?"iOS":/Firefox/.test(t)?"Firefox":"Unknown"}()}</code></span
                              ><br />
                              <span>${o}</span>
                            </div>
                          </div>
                          ${t.panel||""}
                        </div>
                      `})():""}
              `}
        </div>
      </ha-card>
    `}_logDomState(){if(this.errorCount>0&&this.debug){if(this._debugLog("DOM state check:"),this._debugLog("- shadowRoot exists:",!!this.shadowRoot),this.shadowRoot){const t=this.shadowRoot.querySelector("#chart");this._debugLog("- chart div exists:",!!t),t&&this._debugLog("- chart div size:",t.offsetWidth,"x",t.offsetHeight)}this._debugLog("- Is connected:",this.isConnected),this._debugLog("- Chart loaded:",this.chartLoaded)}}logMethodEntry(t,i){void 0!==i?this._debugLog(`[${e}] ENTER: ${t}`,i):this._debugLog(`[${e}] ENTER: ${t}`)}logErrorContext(t,i){i instanceof Error?console.error(`[${e}] ERROR in ${t}:`,i.message,i.stack):console.error(`[${e}] ERROR in ${t}:`,i)}setError(t){this.logMethodEntry("setError",{message:t});const e=Date.now();this.meteogramError=t,this.lastErrorTime=e,this.errorCount=1,console.error("Meteogram error:",t),t===this.meteogramError?(this.errorCount++,e-this.lastErrorTime>1e4&&(this.meteogramError=`${t} (occurred ${this.errorCount} times)`,this.lastErrorTime=e)):(this.errorCount=1,this.meteogramError=t,this.lastErrorTime=e,console.error("Meteogram error:",t))}_updateDarkMode(){let t=!1;t=this.hass&&this.hass.themes&&"boolean"==typeof this.hass.themes.darkMode?this.hass.themes.darkMode:document.documentElement.classList.contains("dark-theme")||document.body.classList.contains("dark-theme"),t?this.setAttribute("dark",""):this.removeAttribute("dark")}convertTemperature(t){if(null==t)return t;const e=this.getSystemTemperatureUnit();return i=t,(a="°C")===(s=e)?i:"°F"===s?9*i/5+32:(console.warn(`[meteogram-card] Temperature conversion from ${a} to ${s} not implemented.`),i);var i,a,s}convertPressure(t){if(null==t)return t;const e=this.getSystemPressureUnit();return i=t,(a="hPa")===(s=e)?i:"inHg"===s?.029529983071445*i:(console.warn(`[meteogram-card] Pressure conversion from ${a} to ${s} not implemented.`),i);var i,a,s}convertWindSpeed(t){if(null==t)return t;return bt(t,"m/s",this.getSystemWindSpeedUnit())}convertPrecipitation(t){if(null==t)return t;const e=this.getSystemPrecipitationUnit();return i=t,(a="mm")===(s=e)?i:"in"===s?.0393701*i:(console.warn(`[meteogram-card] Precipitation conversion from ${a} to ${s} not implemented.`),i);var i,a,s}_initializeUnits(){var t,e,i,a,s,r,o,n,d,l,h,c;if(null===(i=null===(e=null===(t=this.hass)||void 0===t?void 0:t.config)||void 0===e?void 0:e.unit_system)||void 0===i?void 0:i.temperature){const t=this.hass.config.unit_system.temperature;"°F"===t||"°C"===t?this._tempUnit=t:"F"===t?this._tempUnit="°F":"C"===t&&(this._tempUnit="°C")}if(null===(r=null===(s=null===(a=this.hass)||void 0===a?void 0:a.config)||void 0===s?void 0:s.unit_system)||void 0===r?void 0:r.pressure){const t=this.hass.config.unit_system.pressure;"hPa"===t||"inHg"===t?this._pressureUnit=t:"mbar"===t&&(this._pressureUnit="hPa")}if(null===(d=null===(n=null===(o=this.hass)||void 0===o?void 0:o.config)||void 0===n?void 0:n.unit_system)||void 0===d?void 0:d.wind_speed){const t=this.hass.config.unit_system.wind_speed;"m/s"!==t&&"km/h"!==t&&"mph"!==t&&"kt"!==t&&"kn"!==t||(this._windSpeedUnit="kn"===t?"kt":t)}if(null===(c=null===(h=null===(l=this.hass)||void 0===l?void 0:l.config)||void 0===h?void 0:h.unit_system)||void 0===c?void 0:c.precipitation){const t=this.hass.config.unit_system.precipitation;"mm"!==t&&"in"!==t||(this._precipUnit=t)}}getSystemTemperatureUnit(){return this._tempUnit}getSystemPressureUnit(){return this._pressureUnit}getSystemWindSpeedUnit(){return this._windSpeedUnit}getSystemPrecipitationUnit(){return this._precipUnit}getAvailableHours(){return null!==this._availableHours?this._availableHours:"unknown"}schedulePeriodicCacheCleanup(){const t="meteogram-card-cleanup-done";if(!sessionStorage.getItem(t))try{const i=localStorage.getItem("metno-weather-cache");if(i)try{const t=JSON.parse(i);if(t["forecast-data"]){const i=Date.now(),a=864e5,s=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windGust","windDirection","symbolCode","pressure"];let r=0,o=0;for(const[e,n]of Object.entries(t["forecast-data"])){const d=n;let l=!1;if(i-d.expiresAt>a)l=!0,r++;else if(d.data&&"object"==typeof d.data){s.filter(t=>!Array.isArray(d.data[t])).length>0&&(l=!0,o++)}else l=!0,o++;l&&delete t["forecast-data"][e]}(r>0||o>0)&&(localStorage.setItem("metno-weather-cache",JSON.stringify(t)),"true"===localStorage.getItem("meteogram-debug")&&console.debug(`[${e}] Startup cleanup: removed ${r} old and ${o} invalid MET.no cache entries`))}}catch(t){console.warn(`[${e}] Corrupted MET.no cache during startup cleanup, clearing:`,t),localStorage.removeItem("metno-weather-cache")}const a=localStorage.getItem("meteogram-card-entity-weather-cache");if(a)try{const t=JSON.parse(a),i=Date.now(),s=864e5,r=["time","temperature","rain","rainMin","rainMax","cloudCover","windSpeed","windGust","windDirection","symbolCode","pressure"];let o=0,n=0;for(const[e,a]of Object.entries(t)){let d=!1;if(a&&"object"==typeof a&&"timestamp"in a){const t=a;if(i-t.timestamp>s)d=!0,o++;else if(t.data&&"object"==typeof t.data){r.filter(e=>!Array.isArray(t.data[e])).length>0&&(d=!0,n++)}else d=!0,n++}else if(a&&"object"==typeof a){r.filter(t=>!Array.isArray(a[t])).length>0&&(d=!0,n++)}else d=!0,n++;d&&delete t[e]}(o>0||n>0)&&(localStorage.setItem("meteogram-card-entity-weather-cache",JSON.stringify(t)),"true"===localStorage.getItem("meteogram-debug")&&console.debug(`[${e}] Startup cleanup: removed ${o} old and ${n} invalid entity cache entries`))}catch(t){console.warn(`[${e}] Corrupted entity cache during startup cleanup, clearing:`,t),localStorage.removeItem("meteogram-card-entity-weather-cache")}sessionStorage.setItem(t,"true")}catch(t){console.warn(`[${e}] Failed to perform startup cache cleanup:`,t)}}};It.lastD3RetryTime=0,It.meteogramCardVersion=t,It.styles=At,s([gt({type:String})],It.prototype,"title",void 0),s([gt({type:Number})],It.prototype,"latitude",void 0),s([gt({type:Number})],It.prototype,"longitude",void 0),s([gt({attribute:!1})],It.prototype,"hass",void 0),s([gt({type:Boolean})],It.prototype,"showCloudCover",void 0),s([gt({type:Boolean})],It.prototype,"showPressure",void 0),s([gt({type:Boolean})],It.prototype,"showWeatherIcons",void 0),s([gt({type:Boolean})],It.prototype,"showWind",void 0),s([gt({type:Boolean})],It.prototype,"denseWeatherIcons",void 0),s([gt({type:String})],It.prototype,"meteogramHours",void 0),s([gt({type:Object})],It.prototype,"styles",void 0),s([gt({type:Boolean})],It.prototype,"diagnostics",void 0),s([gt({type:Boolean})],It.prototype,"debug",void 0),s([gt({type:String})],It.prototype,"entityId",void 0),s([gt({type:Boolean})],It.prototype,"focussed",void 0),s([gt({type:String})],It.prototype,"displayMode",void 0),s([gt({type:String})],It.prototype,"aspectRatio",void 0),s([gt({type:Number})],It.prototype,"altitude",void 0),s([gt({type:String})],It.prototype,"layoutMode",void 0),s([pt()],It.prototype,"chartLoaded",void 0),s([pt()],It.prototype,"meteogramError",void 0),s([pt()],It.prototype,"errorCount",void 0),s([pt()],It.prototype,"lastErrorTime",void 0),s([pt()],It.prototype,"_statusExpiresAt",void 0),s([pt()],It.prototype,"_statusLastRender",void 0),s([pt()],It.prototype,"_statusLastFetch",void 0),s([pt()],It.prototype,"_statusApiSuccess",void 0),s([pt()],It.prototype,"attributionTooltipOpen",void 0),s([pt()],It.prototype,"entityAttribution",void 0),It=xt=s([ct("meteogram-card")],It);console.info(`%c☀️ ${e} ${t} ⚡️🌦️`,"color: #1976d2; font-weight: bold; background: white"),window.customElements.get("meteogram-card")||customElements.define("meteogram-card",MeteogramCard),window.customCards=window.customCards||[],window.customCards.push({type:"meteogram-card",name:e,description:"A custom card showing a meteogram with wind barbs.",version:t,preview:"https://github.com/jm-cook/lovelace-meteogram-card/blob/main/images/meteogram-card.png",documentationURL:"https://github.com/jm-cook/lovelace-meteogram-card/blob/main/README.md"});
